
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004000  08004000  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000074  0800407c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800407c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6c1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea4  00000000  00000000  0002a765  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b8  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a08  00000000  00000000  0002d260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097cd  00000000  00000000  00044c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000875b1  00000000  00000000  0004e435  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d59e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  000d5a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e48 	.word	0x08003e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003e48 	.word	0x08003e48

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <DMA1_Stream6_IRQHandler>:
//								 DMA_IT_FEIE|
//								 DMA_IT_DMEIE
}

void DMA1_Stream6_IRQHandler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	// clear DMAT

	_HAL_DMA_DISABLE_IT(pxDmaHandle->DMA_Stream, DMA_IT_TC);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <DMA1_Stream6_IRQHandler+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <DMA1_Stream6_IRQHandler+0x24>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f022 0210 	bic.w	r2, r2, #16
 80005c6:	601a      	str	r2, [r3, #0]
//	_HAL_DMA_DISABLE_IT(pxDmaHandle->DMA_Stream-?)


}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000090 	.word	0x20000090

080005d8 <I2C_PeripheralClkControl>:
/* Function definitions -----------------------------------------------------*/

/*
 * @I2C_PeripheralClkControl: Enables the peripheral clock for a respective I2C interface
 */
void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <I2C_PeripheralClkControl+0x54>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d106      	bne.n	80005f6 <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 80005ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 80005f4:	e014      	b.n	8000620 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <I2C_PeripheralClkControl+0x5c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d106      	bne.n	800060c <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
}
 800060a:	e009      	b.n	8000620 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <I2C_PeripheralClkControl+0x60>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d105      	bne.n	8000620 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <I2C_PeripheralClkControl+0x58>)
 800061a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40005400 	.word	0x40005400
 8000630:	40023800 	.word	0x40023800
 8000634:	40005800 	.word	0x40005800
 8000638:	40005c00 	.word	0x40005c00

0800063c <I2C_Init>:

/*
 * @I2C_Init: Populates I2C struct
 */
void I2C_Init(I2C_Handle_t *I2C_handle) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

	// initializing static pointer
	I2C_handle_p = I2C_handle;
 8000644:	4a36      	ldr	r2, [pc, #216]	; (8000720 <I2C_Init+0xe4>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffc2 	bl	80005d8 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7a5b      	ldrb	r3, [r3, #9]
 800065e:	029b      	lsls	r3, r3, #10
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	430a      	orrs	r2, r1
 800067e:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800068e:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <I2C_Init+0xe8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <I2C_Init+0xec>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	0c9b      	lsrs	r3, r3, #18
 800069c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a0:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4a1d      	ldr	r2, [pc, #116]	; (800072c <I2C_Init+0xf0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d10f      	bne.n	80006dc <I2C_Init+0xa0>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <I2C_Init+0xe8>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	69d9      	ldr	r1, [r3, #28]
 80006d2:	897a      	ldrh	r2, [r7, #10]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	430a      	orrs	r2, r1
 80006da:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <I2C_Init+0xf0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d80f      	bhi.n	8000706 <I2C_Init+0xca>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a19      	ldr	r1, [r3, #32]
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <I2C_Init+0xe8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <I2C_Init+0xec>)
 80006f2:	fba2 2303 	umull	r2, r3, r2, r3
 80006f6:	0c9b      	lsrs	r3, r3, #18
 80006f8:	3301      	adds	r3, #1
 80006fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	430a      	orrs	r2, r1
 8000704:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f042 0201 	orr.w	r2, r2, #1
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000094 	.word	0x20000094
 8000724:	2000000c 	.word	0x2000000c
 8000728:	431bde83 	.word	0x431bde83
 800072c:	000186a0 	.word	0x000186a0

08000730 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	4013      	ands	r3, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000748:	2301      	movs	r3, #1
 800074a:	e000      	b.n	800074e <GetFlagStatus+0x1e>
	}
	return FLAG_NOT_SET;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <I2C_WaitForCompletion>:

static void I2C_WaitForCompletion(I2C_TypeDef *pI2Cx, uint16_t i2cRegister)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	807b      	strh	r3, [r7, #2]
	while (!GetFlagStatus(pI2Cx, i2cRegister) && WaitTillTimeout(5));
 80007a6:	bf00      	nop
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ffbf 	bl	8000730 <GetFlagStatus>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d105      	bne.n	80007c4 <I2C_WaitForCompletion+0x2a>
 80007b8:	2005      	movs	r0, #5
 80007ba:	f000 fb93 	bl	8000ee4 <WaitTillTimeout>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f1      	bne.n	80007a8 <I2C_WaitForCompletion+0xe>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <I2C_WriteSlaveAddress>:

/*
 * @I2C_WriteSlaveAddress: Writes slave address to DR
 */
static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a1b      	ldrb	r3, [r3, #8]
 80007dc:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d104      	bne.n	80007f4 <I2C_WriteSlaveAddress+0x28>
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	e003      	b.n	80007fc <I2C_WriteSlaveAddress+0x30>
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	611a      	str	r2, [r3, #16]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <I2C_ClearADDRFlag>:

/*
 * @I2C_ClearADDRFlag: Reads SR1 and SR2 registers to clear ADDR flag
 * During RXing: when 2 bytes are to be read, reset the ACK and set the POS bit
 */
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <I2C_ClearADDRFlag+0x50>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	7b1b      	ldrb	r3, [r3, #12]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b02      	cmp	r3, #2
 8000826:	d113      	bne.n	8000850 <I2C_ClearADDRFlag+0x3c>
	{
		if (I2C_handle_p->rxBufferLength == 2)
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <I2C_ClearADDRFlag+0x50>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7edb      	ldrb	r3, [r3, #27]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b02      	cmp	r3, #2
 8000832:	d10d      	bne.n	8000850 <I2C_ClearADDRFlag+0x3c>
		{
			I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <I2C_ClearADDRFlag+0x50>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f813 	bl	8000868 <I2C_ControlAcking>
			I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <I2C_ClearADDRFlag+0x50>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800084e:	601a      	str	r2, [r3, #0]
		}
	}

	dummyRead = pI2Cx->SR1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	60fb      	str	r3, [r7, #12]
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000094 	.word	0x20000094

08000868 <I2C_ControlAcking>:

/*
 * @I2C_ControlAcking: enables/disables the ACK bit for I2C
 */
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if (enable)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000886:	e005      	b.n	8000894 <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_I2C_StartInterrupt>:
/*
 * @HAL_I2C_StartInterrupt: Generates the START condition and enables I2C control bits
 * usage: called to "enable" I2C transaction via interrupts
 */
I2C_State HAL_I2C_StartInterrupt(I2C_State expectedState)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	char *command = expectedState == I2C_TX_BUSY ? "TXing...\n" : "RXing...\n";
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d101      	bne.n	80008b4 <HAL_I2C_StartInterrupt+0x14>
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_I2C_StartInterrupt+0x4c>)
 80008b2:	e000      	b.n	80008b6 <HAL_I2C_StartInterrupt+0x16>
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_I2C_StartInterrupt+0x50>)
 80008b6:	60fb      	str	r3, [r7, #12]

	if (I2C_handle_p->I2C_State == I2C_INIT)
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_I2C_StartInterrupt+0x54>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7b1b      	ldrb	r3, [r3, #12]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d10a      	bne.n	80008da <HAL_I2C_StartInterrupt+0x3a>
	{
//		printf ("%s", command);

		// set transaction state
		I2C_handle_p->I2C_State = expectedState;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_I2C_StartInterrupt+0x54>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	731a      	strb	r2, [r3, #12]

		I2C_GenerateStartCondition(I2C_handle_p);
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_I2C_StartInterrupt+0x54>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff42 	bl	800075a <I2C_GenerateStartCondition>

		// enable i2c control bits
		I2C_SetCtrlBits();
 80008d6:	f000 fae7 	bl	8000ea8 <I2C_SetCtrlBits>
	}
	return I2C_handle_p->I2C_State;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_I2C_StartInterrupt+0x54>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	7b1b      	ldrb	r3, [r3, #12]
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	08003e60 	.word	0x08003e60
 80008f0:	08003e6c 	.word	0x08003e6c
 80008f4:	20000094 	.word	0x20000094

080008f8 <I2C1_EV_IRQHandler>:

/*
 * I2C1_EV_IRQHandler: Interrupt handler for I2C
 */
void I2C1_EV_IRQHandler (void)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 80008fe:	4b6d      	ldr	r3, [pc, #436]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	0a5b      	lsrs	r3, r3, #9
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 8000910:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	0a9b      	lsrs	r3, r3, #10
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;			// stores register values

	if (eventInterrupt)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 80c1 	beq.w	8000aac <I2C1_EV_IRQHandler+0x1b4>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 800092a:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	717b      	strb	r3, [r7, #5]
		if (temp)
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d018      	beq.n	8000972 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7b1b      	ldrb	r3, [r3, #12]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b03      	cmp	r3, #3
 800094a:	d106      	bne.n	800095a <I2C1_EV_IRQHandler+0x62>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 800094c:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff3a 	bl	80007cc <I2C_WriteSlaveAddress>
 8000958:	e00b      	b.n	8000972 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	7b1b      	ldrb	r3, [r3, #12]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d105      	bne.n	8000972 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff2d 	bl	80007cc <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 8000972:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000984:	797b      	ldrb	r3, [r7, #5]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d005      	beq.n	8000996 <I2C1_EV_IRQHandler+0x9e>
		{
			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff3f 	bl	8000814 <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d022      	beq.n	80009e2 <I2C1_EV_IRQHandler+0xea>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	09db      	lsrs	r3, r3, #7
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 80009ae:	797b      	ldrb	r3, [r7, #5]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <I2C1_EV_IRQHandler+0xcc>
 80009b4:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	7b1b      	ldrb	r3, [r3, #12]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d101      	bne.n	80009c4 <I2C1_EV_IRQHandler+0xcc>
			{
				I2C_TXE_Interrupt();
 80009c0:	f000 f8f8 	bl	8000bb4 <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	099b      	lsrs	r3, r3, #6
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <I2C1_EV_IRQHandler+0xea>
 80009dc:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	717b      	strb	r3, [r7, #5]
		if (temp)
 80009f4:	797b      	ldrb	r3, [r7, #5]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d058      	beq.n	8000aac <I2C1_EV_IRQHandler+0x1b4>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)					// TXE=1, BTF=1
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	7b1b      	ldrb	r3, [r3, #12]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d10d      	bne.n	8000a22 <I2C1_EV_IRQHandler+0x12a>
			{
				if (!I2C_handle_p->txBufferLength)						// if there are no more TX bytes to be sent
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	7e9b      	ldrb	r3, [r3, #26]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d14c      	bne.n	8000aac <I2C1_EV_IRQHandler+0x1b4>
				{
					I2C_GenerateStopCondition(I2C_handle_p);
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff feaf 	bl	800077a <I2C_GenerateStopCondition>
					I2C_StopTransmission();
 8000a1c:	f000 fa24 	bl	8000e68 <I2C_StopTransmission>
					I2C_StopTransmission();
				}
			}
		}
	}
}
 8000a20:	e044      	b.n	8000aac <I2C1_EV_IRQHandler+0x1b4>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	7b1b      	ldrb	r3, [r3, #12]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d13e      	bne.n	8000aac <I2C1_EV_IRQHandler+0x1b4>
				if (I2C_handle_p->rxBufferLength == 2)
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	7edb      	ldrb	r3, [r3, #27]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d138      	bne.n	8000aac <I2C1_EV_IRQHandler+0x1b4>
					I2C_GenerateStopCondition(I2C_handle_p);
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe9b 	bl	800077a <I2C_GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read second last byte
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6918      	ldr	r0, [r3, #16]
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6959      	ldr	r1, [r3, #20]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	7e1a      	ldrb	r2, [r3, #24]
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	1c54      	adds	r4, r2, #1
 8000a5c:	b2e4      	uxtb	r4, r4
 8000a5e:	761c      	strb	r4, [r3, #24]
 8000a60:	4613      	mov	r3, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	b2c2      	uxtb	r2, r0
 8000a66:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	7eda      	ldrb	r2, [r3, #27]
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	3a01      	subs	r2, #1
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read last byte
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6918      	ldr	r0, [r3, #16]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6959      	ldr	r1, [r3, #20]
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	7e1a      	ldrb	r2, [r3, #24]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	1c54      	adds	r4, r2, #1
 8000a8e:	b2e4      	uxtb	r4, r4
 8000a90:	761c      	strb	r4, [r3, #24]
 8000a92:	4613      	mov	r3, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	b2c2      	uxtb	r2, r0
 8000a98:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <I2C1_EV_IRQHandler+0x1bc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	7eda      	ldrb	r2, [r3, #27]
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8000aa8:	f000 f9de 	bl	8000e68 <I2C_StopTransmission>
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <I2C_HandleInterruptEvents>:

/*
 * @I2C_HandleInterruptEvents: Called upon getting an error interrupt - resets the bit and generate stop condition
 */
void I2C_HandleInterruptEvents (uint16_t errorRegister, I2C_ErrorEvents errorEvent)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	717b      	strb	r3, [r7, #5]
	I2C_handle_p->pI2Cx->SR1 &= ~(errorRegister);
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <I2C_HandleInterruptEvents+0x3c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	88f9      	ldrh	r1, [r7, #6]
 8000ad2:	43c9      	mvns	r1, r1
 8000ad4:	400a      	ands	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]

	if (errorEvent == I2C_ERROR_AF)
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <I2C_HandleInterruptEvents+0x34>
	{
//		printf ("Received ACK failure...\n");
		I2C_StopTransmission();
 8000ade:	f000 f9c3 	bl	8000e68 <I2C_StopTransmission>
		I2C_GenerateStopCondition(I2C_handle_p);
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <I2C_HandleInterruptEvents+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe47 	bl	800077a <I2C_GenerateStopCondition>
	}
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000094 	.word	0x20000094

08000af8 <I2C1_ER_IRQHandler>:

/*
 * @I2C1_ER_IRQHandler: Interrupt handler for I2C errors
 */
void I2C1_ER_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
//	printf ("ERROR IRQ handler...\n");
	I2C_handle_p->I2C_State = I2C_ERROR;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2204      	movs	r2, #4
 8000b04:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	71fb      	strb	r3, [r7, #7]
	if (errorInterrupt)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d044      	beq.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
	{
		if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF)
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <I2C1_ER_IRQHandler+0x42>
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_AF);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b34:	f7ff ffc0 	bl	8000ab8 <I2C_HandleInterruptEvents>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
		}
	}
}
 8000b38:	e036      	b.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_OVR)
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <I2C1_ER_IRQHandler+0x5e>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_OVR);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b50:	f7ff ffb2 	bl	8000ab8 <I2C_HandleInterruptEvents>
}
 8000b54:	e028      	b.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_PECERR)
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <I2C1_ER_IRQHandler+0x7a>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_PECERR);
 8000b66:	2102      	movs	r1, #2
 8000b68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b6c:	f7ff ffa4 	bl	8000ab8 <I2C_HandleInterruptEvents>
}
 8000b70:	e01a      	b.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TIMEOUT)
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <I2C1_ER_IRQHandler+0x96>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_TIMEOUT);
 8000b82:	2103      	movs	r1, #3
 8000b84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b88:	f7ff ff96 	bl	8000ab8 <I2C_HandleInterruptEvents>
}
 8000b8c:	e00c      	b.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <I2C1_ER_IRQHandler+0xb8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <I2C1_ER_IRQHandler+0xb0>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ba4:	f7ff ff88 	bl	8000ab8 <I2C_HandleInterruptEvents>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000094 	.word	0x20000094

08000bb4 <I2C_TXE_Interrupt>:
/*
 * @I2C_TXE_Interrupt: Writes the respective byte to the DR
 * data register = empty = TXE
 */
void I2C_TXE_Interrupt (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <I2C_TXE_Interrupt+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	7e9b      	ldrb	r3, [r3, #26]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d011      	beq.n	8000be8 <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <I2C_TXE_Interrupt+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	1c51      	adds	r1, r2, #1
 8000bce:	b2c9      	uxtb	r1, r1
 8000bd0:	7019      	strb	r1, [r3, #0]
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <I2C_TXE_Interrupt+0x40>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <I2C_TXE_Interrupt+0x40>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	7e9a      	ldrb	r2, [r3, #26]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	3a01      	subs	r2, #1
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	769a      	strb	r2, [r3, #26]
	}
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <HAL_I2C_Master_Transmit>:

/*
 * HAL_I2C_Master_Transmit: polling approach for TXing bytes to the slave
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	4613      	mov	r3, r2
 8000c04:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fda7 	bl	800075a <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fdc1 	bl	800079a <I2C_WaitForCompletion>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f7ff fdd6 	bl	80007cc <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fdb7 	bl	800079a <I2C_WaitForCompletion>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fdef 	bl	8000814 <I2C_ClearADDRFlag>

	// write to the SDA line
	for (; size > 0; size--)
 8000c36:	e015      	b.n	8000c64 <HAL_I2C_Master_Transmit+0x6c>
	{
		// making sure data register is empty prior to writing to it
		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_TXE);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fdab 	bl	800079a <I2C_WaitForCompletion>

		I2C_handle->pI2Cx->DR = *data++;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	611a      	str	r2, [r3, #16]

		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2104      	movs	r1, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd9e 	bl	800079a <I2C_WaitForCompletion>
	for (; size > 0; size--)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1e6      	bne.n	8000c38 <HAL_I2C_Master_Transmit+0x40>
	}
	I2C_GenerateStopCondition(I2C_handle);
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fd85 	bl	800077a <I2C_GenerateStopCondition>

	return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_I2C_Master_Receive>:

/*
 * @HAL_I2C_Master_Receive: Polling approach for RXing bytes from slave
 */
void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size, uint8_t startIndex)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	4611      	mov	r1, r2
 8000c86:	461a      	mov	r2, r3
 8000c88:	460b      	mov	r3, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff fd62 	bl	800075a <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd7c 	bl	800079a <I2C_WaitForCompletion>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff fd91 	bl	80007cc <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd72 	bl	800079a <I2C_WaitForCompletion>

	switch (size) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d002      	beq.n	8000cc2 <HAL_I2C_Master_Receive+0x48>
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d00f      	beq.n	8000ce0 <HAL_I2C_Master_Receive+0x66>
 8000cc0:	e022      	b.n	8000d08 <HAL_I2C_Master_Receive+0x8e>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fdcd 	bl	8000868 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd9e 	bl	8000814 <I2C_ClearADDRFlag>
			I2C_GenerateStopCondition(I2C_handle);				// generate STOP condition
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f7ff fd4e 	bl	800077a <I2C_GenerateStopCondition>
			break;
 8000cde:	e01e      	b.n	8000d1e <HAL_I2C_Master_Receive+0xa4>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fdbe 	bl	8000868 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cfa:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd87 	bl	8000814 <I2C_ClearADDRFlag>
			break;
 8000d06:	e00a      	b.n	8000d1e <HAL_I2C_Master_Receive+0xa4>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdaa 	bl	8000868 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fd7b 	bl	8000814 <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 8000d1e:	e09b      	b.n	8000e58 <HAL_I2C_Master_Receive+0x1de>
		if (size <= 3) {
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	f200 8086 	bhi.w	8000e34 <HAL_I2C_Master_Receive+0x1ba>
			if (size == 1) {
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d11f      	bne.n	8000d6e <HAL_I2C_Master_Receive+0xf4>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fd97 	bl	8000868 <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fd68 	bl	8000814 <I2C_ClearADDRFlag>

					// wait till RXNE = 1 (Data is sent from SR to DR)
					I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fd25 	bl	800079a <I2C_WaitForCompletion>

					// generate stop
					I2C_GenerateStopCondition(I2C_handle);
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fd12 	bl	800077a <I2C_GenerateStopCondition>

					// read data
					rxBuffer[startIndex++] = I2C_handle->pI2Cx->DR;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	71b9      	strb	r1, [r7, #6]
 8000d62:	4619      	mov	r1, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	440b      	add	r3, r1
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	e074      	b.n	8000e58 <HAL_I2C_Master_Receive+0x1de>

			}

			else if (size == 2) {
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d122      	bne.n	8000dba <HAL_I2C_Master_Receive+0x140>
				// wait till BTF is set (last byte is received) - shift reg=1, DR=1
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fd0d 	bl	800079a <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fcfa 	bl	800077a <I2C_GenerateStopCondition>
//				printf ("Start_index: %d\n", startIndex);

//				I2C_handle->pRxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
				rxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	1c59      	adds	r1, r3, #1
 8000d90:	71b9      	strb	r1, [r7, #6]
 8000d92:	4619      	mov	r1, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	440b      	add	r3, r1
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
				--size;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]

				rxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6919      	ldr	r1, [r3, #16]
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	4413      	add	r3, r2
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
//				I2C_handle->pRxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
				--size;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	e04e      	b.n	8000e58 <HAL_I2C_Master_Receive+0x1de>
			}
			else if (size == 3) {
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d14b      	bne.n	8000e58 <HAL_I2C_Master_Receive+0x1de>
				// wait for the second last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fce7 	bl	800079a <I2C_WaitForCompletion>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fd48 	bl	8000868 <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]

				size--;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]

				// wait for the last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2104      	movs	r1, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fccf 	bl	800079a <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fcbc 	bl	800077a <I2C_GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]

				size--;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]

				size--;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e011      	b.n	8000e58 <HAL_I2C_Master_Receive+0x1de>
			}

		}
		// > 3 bytes
		else {
			I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fcad 	bl	800079a <I2C_WaitForCompletion>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]

			size--;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f47f af60 	bne.w	8000d20 <HAL_I2C_Master_Receive+0xa6>

		}
	}
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <I2C_StopTransmission>:

/*
 * @I2C_StopTransmission: Disables I2C control bits and sets I2C struct to initial values
 */
static void I2C_StopTransmission(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
//	printf ("Stopping transmission...\n\n");

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <I2C_StopTransmission+0x3c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e78:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <I2C_StopTransmission+0x3c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e86:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <I2C_StopTransmission+0x3c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	731a      	strb	r2, [r3, #12]
	I2C_handle_p->rxBufferLength = BYTES_PER_TRANSACTION;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <I2C_StopTransmission+0x3c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2202      	movs	r2, #2
 8000e96:	76da      	strb	r2, [r3, #27]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <I2C_SetCtrlBits>:

/*
 * @I2C_SetCtrlBits: Sets I2C control bits
 */
static void I2C_SetCtrlBits(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <I2C_SetCtrlBits+0x38>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eb8:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <I2C_SetCtrlBits+0x38>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec6:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITERREN;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <I2C_SetCtrlBits+0x38>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ed4:	605a      	str	r2, [r3, #4]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000094 	.word	0x20000094

08000ee4 <WaitTillTimeout>:

HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 8000eee:	f000 f877 	bl	8000fe0 <HAL_GetTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 8000ef6:	bf00      	nop
 8000ef8:	f000 f872 	bl	8000fe0 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3f7      	bcc.n	8000ef8 <WaitTillTimeout+0x14>
	return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f92b 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f001 fbe8 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f943 	bl	8001202 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	f000 f90b 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	200000c0 	.word	0x200000c0

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000c0 	.word	0x200000c0

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <__NVIC_EnableIRQ+0x38>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff29 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff3e 	bl	8001040 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff31 	bl	800105c <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa2 	bl	8001154 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e159      	b.n	80014ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	429a      	cmp	r2, r3
 8001252:	f040 8148 	bne.w	80014e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00b      	beq.n	8001276 <HAL_GPIO_Init+0x5a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	2b11      	cmp	r3, #17
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0xfc>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b12      	cmp	r3, #18
 8001316:	d123      	bne.n	8001360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	69b9      	ldr	r1, [r7, #24]
 800135c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a2 	beq.w	80014e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a55      	ldr	r2, [pc, #340]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_GPIO_Init+0x2e4>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013be:	4a51      	ldr	r2, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x2e8>)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2ec>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x202>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_GPIO_Init+0x2f0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1fe>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1fa>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_GPIO_Init+0x2f8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1f6>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <HAL_GPIO_Init+0x2fc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1f2>
 800140a:	2304      	movs	r3, #4
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x204>
 800140e:	2307      	movs	r3, #7
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x204>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x204>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x204>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x204>
 800141e:	2300      	movs	r3, #0
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	4934      	ldr	r1, [pc, #208]	; (8001504 <HAL_GPIO_Init+0x2e8>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_GPIO_Init+0x300>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_GPIO_Init+0x300>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_GPIO_Init+0x300>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_GPIO_Init+0x300>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x300>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_GPIO_Init+0x300>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_GPIO_Init+0x300>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_GPIO_Init+0x300>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	f67f aea2 	bls.w	8001238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f4:	bf00      	nop
 80014f6:	3724      	adds	r7, #36	; 0x24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	401a      	ands	r2, r3
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	429a      	cmp	r2, r3
 800156a:	d104      	bne.n	8001576 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	041a      	lsls	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001574:	e002      	b.n	800157c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e25b      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d075      	beq.n	8001692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a6:	4ba3      	ldr	r3, [pc, #652]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d00c      	beq.n	80015cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4ba0      	ldr	r3, [pc, #640]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d112      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ca:	d10b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4b99      	ldr	r3, [pc, #612]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d05b      	beq.n	8001690 <HAL_RCC_OscConfig+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d157      	bne.n	8001690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e236      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x74>
 80015ee:	4b91      	ldr	r3, [pc, #580]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a90      	ldr	r2, [pc, #576]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a8a      	ldr	r2, [pc, #552]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a83      	ldr	r2, [pc, #524]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a80      	ldr	r2, [pc, #512]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcce 	bl	8000fe0 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcca 	bl	8000fe0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1fb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xc0>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fcba 	bl	8000fe0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcb6 	bl	8000fe0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1e7      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0xe8>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d063      	beq.n	8001766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1bb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4952      	ldr	r1, [pc, #328]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	e03a      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <HAL_RCC_OscConfig+0x2b0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fc6f 	bl	8000fe0 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fc6b 	bl	8000fe0 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e19c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4940      	ldr	r1, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e015      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x2b0>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fc4e 	bl	8000fe0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fc4a 	bl	8000fe0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e17b      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d030      	beq.n	80017d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d016      	beq.n	80017a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x2b4>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fc2e 	bl	8000fe0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff fc2a 	bl	8000fe0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e15b      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x200>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x2b4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fc17 	bl	8000fe0 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fc13 	bl	8000fe0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e144      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a0 	beq.w	8001922 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d121      	bne.n	8001862 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff fbd9 	bl	8000fe0 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e011      	b.n	8001856 <HAL_RCC_OscConfig+0x2ce>
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
 8001840:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff fbcc 	bl	8000fe0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0fd      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b81      	ldr	r3, [pc, #516]	; (8001a5c <HAL_RCC_OscConfig+0x4d4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <HAL_RCC_OscConfig+0x2f0>
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a7c      	ldr	r2, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	e01c      	b.n	80018b2 <HAL_RCC_OscConfig+0x32a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 8001880:	4b77      	ldr	r3, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a76      	ldr	r2, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	4b74      	ldr	r3, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a73      	ldr	r2, [pc, #460]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x32a>
 800189a:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a70      	ldr	r2, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	4b6e      	ldr	r3, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a6d      	ldr	r2, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb91 	bl	8000fe0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb8d 	bl	8000fe0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0bc      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ee      	beq.n	80018c2 <HAL_RCC_OscConfig+0x33a>
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb7b 	bl	8000fe0 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb77 	bl	8000fe0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0a6      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ee      	bne.n	80018ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8092 	beq.w	8001a50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d05c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d141      	bne.n	80019c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x4dc>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fb4b 	bl	8000fe0 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fb47 	bl	8000fe0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e078      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
 8001990:	4933      	ldr	r1, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_RCC_OscConfig+0x4dc>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fb20 	bl	8000fe0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fb1c 	bl	8000fe0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04d      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x41c>
 80019c2:	e045      	b.n	8001a50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb09 	bl	8000fe0 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff fb05 	bl	8000fe0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e036      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x44a>
 80019f0:	e02e      	b.n	8001a50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e029      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d115      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10d      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470060 	.word	0x42470060

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0cc      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4934      	ldr	r1, [pc, #208]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff fa42 	bl	8000fe0 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff fa3e 	bl	8000fe0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	fa21 f303 	lsr.w	r3, r1, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f9a2 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08003f48 	.word	0x08003f48
 8001c2c:	2000000c 	.word	0x2000000c
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4a:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d007      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x32>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d008      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x38>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 808d 	bne.w	8001d7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c62:	60bb      	str	r3, [r7, #8]
       break;
 8001c64:	e08c      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c68:	60bb      	str	r3, [r7, #8]
      break;
 8001c6a:	e089      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	ea03 0501 	and.w	r5, r3, r1
 8001c98:	ea04 0602 	and.w	r6, r4, r2
 8001c9c:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c9e:	fb02 f106 	mul.w	r1, r2, r6
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	fb02 f205 	mul.w	r2, r2, r5
 8001ca8:	440a      	add	r2, r1
 8001caa:	493a      	ldr	r1, [pc, #232]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cac:	fba5 0101 	umull	r0, r1, r5, r1
 8001cb0:	1853      	adds	r3, r2, r1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f04f 0400 	mov.w	r4, #0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	f7fe faf7 	bl	80002b0 <__aeabi_uldivmod>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e049      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	f04f 0400 	mov.w	r4, #0
 8001cd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	ea03 0501 	and.w	r5, r3, r1
 8001ce0:	ea04 0602 	and.w	r6, r4, r2
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f04f 0400 	mov.w	r4, #0
 8001cf0:	0154      	lsls	r4, r2, #5
 8001cf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cf6:	014b      	lsls	r3, r1, #5
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	1b49      	subs	r1, r1, r5
 8001cfe:	eb62 0206 	sbc.w	r2, r2, r6
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	f04f 0400 	mov.w	r4, #0
 8001d0a:	0194      	lsls	r4, r2, #6
 8001d0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d10:	018b      	lsls	r3, r1, #6
 8001d12:	1a5b      	subs	r3, r3, r1
 8001d14:	eb64 0402 	sbc.w	r4, r4, r2
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	00e2      	lsls	r2, r4, #3
 8001d22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d26:	00d9      	lsls	r1, r3, #3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	195b      	adds	r3, r3, r5
 8001d2e:	eb44 0406 	adc.w	r4, r4, r6
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	02a2      	lsls	r2, r4, #10
 8001d3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d40:	0299      	lsls	r1, r3, #10
 8001d42:	460b      	mov	r3, r1
 8001d44:	4614      	mov	r4, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	4621      	mov	r1, r4
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f04f 0400 	mov.w	r4, #0
 8001d50:	461a      	mov	r2, r3
 8001d52:	4623      	mov	r3, r4
 8001d54:	f7fe faac 	bl	80002b0 <__aeabi_uldivmod>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	60bb      	str	r3, [r7, #8]
      break;
 8001d78:	e002      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d7c:	60bb      	str	r3, [r7, #8]
      break;
 8001d7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d80:	68bb      	ldr	r3, [r7, #8]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	017d7840 	.word	0x017d7840

08001d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4601      	mov	r1, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0b5b      	lsrs	r3, r3, #13
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003f58 	.word	0x08003f58

08001dd8 <GetPCLK>:
static USART_Handle_t *ptrUSARTx;
bool endLine = false;


uint32_t GetPCLK(USART_TypeDef *pUSARTx)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	uint32_t pclk;
	if (pUSARTx == USART1 || USART6)
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8001de0:	f7ff ffe6 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8001de4:	60f8      	str	r0, [r7, #12]
	}
	else if (pUSARTx == USART2)
	{
		pclk = HAL_RCC_GetPCLK1Freq();
	}
	return pclk;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <USART_EnablePeripheralClk>:

/*
 * @USART_EnablePeripheralClk: Enables USARTx clock
 */
static void USART_EnablePeripheralClk(USART_TypeDef *pUSARTx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if (pUSARTx == USART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <USART_EnablePeripheralClk+0x54>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d106      	bne.n	8001e0e <USART_EnablePeripheralClk+0x1e>
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART1EN;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pUSARTx == USART6)
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
	}
}
 8001e0c:	e014      	b.n	8001e38 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <USART_EnablePeripheralClk+0x5c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d106      	bne.n	8001e24 <USART_EnablePeripheralClk+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e22:	e009      	b.n	8001e38 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART6)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <USART_EnablePeripheralClk+0x60>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d105      	bne.n	8001e38 <USART_EnablePeripheralClk+0x48>
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <USART_EnablePeripheralClk+0x58>)
 8001e32:	f043 0320 	orr.w	r3, r3, #32
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40011400 	.word	0x40011400

08001e54 <USART_TransmitData>:

/*
 * @USART_TransmitData: Enables USART control bits
 */
USART_State USART_TransmitData(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State != USART_TX_BUSY)
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <USART_TransmitData+0x3c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	7b1b      	ldrb	r3, [r3, #12]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d00d      	beq.n	8001e7e <USART_TransmitData+0x2a>
	{
		ptrUSARTx->USART_State = USART_TX_BUSY;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <USART_TransmitData+0x3c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	731a      	strb	r2, [r3, #12]
		ptrUSARTx->pUSARTx->CR1 |= (USART_CR1_TXEIE | USART_CR1_TCIE); // set Transmit Data Empty & Transmission Complete control bits
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <USART_TransmitData+0x3c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <USART_TransmitData+0x3c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e7c:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <USART_TransmitData+0x3c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000098 	.word	0x20000098

08001e94 <USART_RxData>:

USART_State USART_RxData(USART_State desiredState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
	if (ptrUSARTx->USART_State != desiredState && ptrUSARTx->USART_State != USART_READY)
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <USART_RxData+0x50>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	79fa      	ldrb	r2, [r7, #7]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d012      	beq.n	8001ed0 <USART_RxData+0x3c>
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <USART_RxData+0x50>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	7b1b      	ldrb	r3, [r3, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d00d      	beq.n	8001ed0 <USART_RxData+0x3c>
	{
		ptrUSARTx->USART_State = desiredState;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <USART_RxData+0x50>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	79fa      	ldrb	r2, [r7, #7]
 8001eba:	731a      	strb	r2, [r3, #12]
		ptrUSARTx->pUSARTx->CR1 |= (USART_CR1_RXNEIE | USART_CR1_RE);
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <USART_RxData+0x50>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <USART_RxData+0x50>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8001ece:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <USART_RxData+0x50>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	7b1b      	ldrb	r3, [r3, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000098 	.word	0x20000098

08001ee8 <USART2_IRQHandler>:

/*
 * @USART2_IRQHandler: IRQ handler for servicing USART2 interrupts
 */
void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	endLine = false;
 8001eec:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <USART2_IRQHandler+0xf0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

	// Transmit buffer empty
	if (ptrUSARTx->pUSARTx->SR & USART_SR_TXE)
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <USART2_IRQHandler+0x4e>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	7b1b      	ldrb	r3, [r3, #12]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d114      	bne.n	8001f36 <USART2_IRQHandler+0x4e>
		{
			// TXE
			if (ptrUSARTx->txLength)
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	7e1b      	ldrb	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00f      	beq.n	8001f36 <USART2_IRQHandler+0x4e>
			{
				ptrUSARTx->pUSARTx->DR = *ptrUSARTx->txBuffer++; // send to serial
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	6913      	ldr	r3, [r2, #16]
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	6111      	str	r1, [r2, #16]
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
				ptrUSARTx->txLength--;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	7e1a      	ldrb	r2, [r3, #24]
 8001f30:	3a01      	subs	r2, #1
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	761a      	strb	r2, [r3, #24]
			}
		}
	}

	// RXNE
	if (ptrUSARTx->pUSARTx->SR & USART_SR_RXNE && ptrUSARTx->rxLength)
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d021      	beq.n	8001f8a <USART2_IRQHandler+0xa2>
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	7e5b      	ldrb	r3, [r3, #25]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01c      	beq.n	8001f8a <USART2_IRQHandler+0xa2>
	{
		*ptrUSARTx->rxBuffer = ptrUSARTx->pUSARTx->DR;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
		if (*ptrUSARTx->rxBuffer == '\r')
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b0d      	cmp	r3, #13
 8001f6c:	d102      	bne.n	8001f74 <USART2_IRQHandler+0x8c>
		{
			endLine = true;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <USART2_IRQHandler+0xf0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
		}
		ptrUSARTx->rxBuffer++;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	3201      	adds	r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]
		ptrUSARTx->rxLength--;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	7e5a      	ldrb	r2, [r3, #25]
 8001f84:	3a01      	subs	r2, #1
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	765a      	strb	r2, [r3, #25]
	}

	if (ptrUSARTx->pUSARTx->SR & USART_SR_TC) // transmission complete
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01c      	beq.n	8001fd4 <USART2_IRQHandler+0xec>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	7b1b      	ldrb	r3, [r3, #12]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d107      	bne.n	8001fb4 <USART2_IRQHandler+0xcc>
		{
			if (!ptrUSARTx->txLength)		 // if no more bytes to send
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	7e1b      	ldrb	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <USART2_IRQHandler+0xec>
			{
				USART_CloseTransmission();
 8001fae:	f000 f8d1 	bl	8002154 <USART_CloseTransmission>
			{
				USART_CloseTransmission();
			}
		}
	}
}
 8001fb2:	e00f      	b.n	8001fd4 <USART2_IRQHandler+0xec>
		else if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	7b1b      	ldrb	r3, [r3, #12]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d10a      	bne.n	8001fd4 <USART2_IRQHandler+0xec>
			if (!ptrUSARTx->rxLength || endLine)		// if no more bytes to receive OR user keyed in enter
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <USART2_IRQHandler+0xf4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <USART2_IRQHandler+0xe8>
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <USART2_IRQHandler+0xf0>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <USART2_IRQHandler+0xec>
				USART_CloseTransmission();
 8001fd0:	f000 f8c0 	bl	8002154 <USART_CloseTransmission>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000009c 	.word	0x2000009c
 8001fdc:	20000098 	.word	0x20000098

08001fe0 <USART_Initization>:

/*
 * @USART_Init: Populates USART struct
 */
void USART_Initization(USART_Handle_t *pUSART)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	ptrUSARTx = pUSART;
 8001fe8:	4a59      	ldr	r2, [pc, #356]	; (8002150 <USART_Initization+0x170>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]

	// initializing peripheral clock
	USART_EnablePeripheralClk(pUSART->pUSARTx);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fefc 	bl	8001df0 <USART_EnablePeripheralClk>

	// enable UE bit
	pUSART->pUSARTx->CR1 |= USART_CR1_UE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002006:	60da      	str	r2, [r3, #12]

	// word length
	pUSART->pUSARTx->CR1 |= pUSART->USART_Config.USART_wordLength << USART_CR1_M_Pos;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7a5b      	ldrb	r3, [r3, #9]
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	4619      	mov	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	60da      	str	r2, [r3, #12]

	// parity control
	if (pUSART->USART_Config.USART_parityControl)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <USART_Initization+0x56>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_PS;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002034:	60da      	str	r2, [r3, #12]
	}

	// USART mode
	if (pUSART->USART_Config.USART_mode == USART_MODE_TX)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7a9b      	ldrb	r3, [r3, #10]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <USART_Initization+0x70>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0208 	orr.w	r2, r2, #8
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	e018      	b.n	8002082 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_RX)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7a9b      	ldrb	r3, [r3, #10]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d108      	bne.n	800206a <USART_Initization+0x8a>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_RE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0204 	orr.w	r2, r2, #4
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	e00b      	b.n	8002082 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_TXRX)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7a9b      	ldrb	r3, [r3, #10]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <USART_Initization+0xa2>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 020c 	orr.w	r2, r2, #12
 8002080:	60da      	str	r2, [r3, #12]
	}

	if (pUSART->dmaTransfer == DMA_TX_ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7edb      	ldrb	r3, [r3, #27]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <USART_Initization+0xba>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002098:	615a      	str	r2, [r3, #20]
	}

	if (pUSART->dmaReception == DMA_RX_ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7f1b      	ldrb	r3, [r3, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <USART_Initization+0xd2>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b0:	615a      	str	r2, [r3, #20]
	}
	// STOP bit
	pUSART->pUSARTx->CR2 |= pUSART->USART_Config.USART_stopBits << USART_CR2_STOP_Pos;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7a1b      	ldrb	r3, [r3, #8]
 80020bc:	031b      	lsls	r3, r3, #12
 80020be:	4619      	mov	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	611a      	str	r2, [r3, #16]

	// Hardware control
						// todo ....!

	// configuring baud rate
	uint8_t oversamplingValue = 16, divisor = 100;
 80020c8:	2310      	movs	r3, #16
 80020ca:	77fb      	strb	r3, [r7, #31]
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	77bb      	strb	r3, [r7, #30]
	uint32_t tempUsartDiv, tempFraction;

	uint8_t over8 = pUSART->pUSARTx->CR1 & USART_CR1_OVER8; 	// by default, over8=0 = 16x oversampling
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	777b      	strb	r3, [r7, #29]
	tempUsartDiv = (GetPCLK(pUSART->pUSARTx) * divisor) / (8 * (2 - over8) * pUSART->USART_Config.USART_baudRate);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe7a 	bl	8001dd8 <GetPCLK>
 80020e4:	4602      	mov	r2, r0
 80020e6:	7fbb      	ldrb	r3, [r7, #30]
 80020e8:	fb03 f302 	mul.w	r3, r3, r2
 80020ec:	7f7a      	ldrb	r2, [r7, #29]
 80020ee:	f1c2 0202 	rsb	r2, r2, #2
 80020f2:	00d2      	lsls	r2, r2, #3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	88c9      	ldrh	r1, [r1, #6]
 80020f8:	fb01 f202 	mul.w	r2, r1, r2
 80020fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002100:	61bb      	str	r3, [r7, #24]

	uint8_t divMantissa = tempUsartDiv / divisor;
 8002102:	7fbb      	ldrb	r3, [r7, #30]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	75fb      	strb	r3, [r7, #23]
	tempFraction = (tempUsartDiv - divMantissa * divisor) * oversamplingValue;
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	7fba      	ldrb	r2, [r7, #30]
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	461a      	mov	r2, r3
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	7ffa      	ldrb	r2, [r7, #31]
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	613b      	str	r3, [r7, #16]

	uint8_t divFraction = (tempFraction + 50)/divisor;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002128:	7fbb      	ldrb	r3, [r7, #30]
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	73fb      	strb	r3, [r7, #15]

	// writing to BRR register
	pUSART->pUSARTx->BRR |= (divMantissa << USART_BRR_DIV_Mantissa_Pos | divFraction);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	0119      	lsls	r1, r3, #4
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	430b      	orrs	r3, r1
 800213e:	4619      	mov	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]

}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000098 	.word	0x20000098

08002154 <USART_CloseTransmission>:


static void USART_CloseTransmission()
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

	if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <USART_CloseTransmission+0x60>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	7b1b      	ldrb	r3, [r3, #12]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d10a      	bne.n	8002178 <USART_CloseTransmission+0x24>
	{
		ptrUSARTx->pUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <USART_CloseTransmission+0x60>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <USART_CloseTransmission+0x60>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0220 	bic.w	r2, r2, #32
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	e00e      	b.n	8002196 <USART_CloseTransmission+0x42>
	}
	else if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <USART_CloseTransmission+0x60>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	7b1b      	ldrb	r3, [r3, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d109      	bne.n	8002196 <USART_CloseTransmission+0x42>
	{
		ptrUSARTx->pUSARTx->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TCIE);
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <USART_CloseTransmission+0x60>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <USART_CloseTransmission+0x60>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002194:	60da      	str	r2, [r3, #12]
	}
	ptrUSARTx->USART_State = USART_READY;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <USART_CloseTransmission+0x60>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	731a      	strb	r2, [r3, #12]
	ptrUSARTx->rxLength = ptrUSARTx->rxSize;	// restoring the original RX size
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <USART_CloseTransmission+0x60>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <USART_CloseTransmission+0x60>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	7e92      	ldrb	r2, [r2, #26]
 80021a8:	765a      	strb	r2, [r3, #25]
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000098 	.word	0x20000098

080021b8 <I2C_Initilization>:

/*
 * Initializing user-defined variables for I2C struct
 */
void I2C_Initilization(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	I2C1_handle.pI2Cx = I2C1;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <I2C_Initilization+0x54>)
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <I2C_Initilization+0x58>)
 80021c0:	601a      	str	r2, [r3, #0]
	I2C1_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <I2C_Initilization+0x54>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	725a      	strb	r2, [r3, #9]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <I2C_Initilization+0x54>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <I2C_Initilization+0x5c>)
 80021cc:	605a      	str	r2, [r3, #4]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MCP9808_ADDR;
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <I2C_Initilization+0x54>)
 80021d0:	2218      	movs	r2, #24
 80021d2:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <I2C_Initilization+0x54>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	815a      	strh	r2, [r3, #10]

	// set user configurable members
	I2C1_handle.txBuffer = txBuffer;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <I2C_Initilization+0x54>)
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <I2C_Initilization+0x60>)
 80021de:	611a      	str	r2, [r3, #16]
	I2C1_handle.txBufferLength = txSize;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <I2C_Initilization+0x64>)
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <I2C_Initilization+0x54>)
 80021e6:	769a      	strb	r2, [r3, #26]
	I2C1_handle.pRxBuffer = i2c_rxBuffer;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <I2C_Initilization+0x54>)
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <I2C_Initilization+0x68>)
 80021ec:	615a      	str	r2, [r3, #20]
	I2C1_handle.rxStartIndex = 0;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <I2C_Initilization+0x54>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	761a      	strb	r2, [r3, #24]
	I2C1_handle.rxBufferLength = BYTES_PER_TRANSACTION;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <I2C_Initilization+0x54>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	76da      	strb	r2, [r3, #27]
	I2C1_handle.rxBufferSize = bytesToRead;
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <I2C_Initilization+0x54>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	765a      	strb	r2, [r3, #25]

	I2C_Init(&I2C1_handle);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <I2C_Initilization+0x54>)
 8002202:	f7fe fa1b 	bl	800063c <I2C_Init>
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000128 	.word	0x20000128
 8002210:	40005400 	.word	0x40005400
 8002214:	000186a0 	.word	0x000186a0
 8002218:	20000008 	.word	0x20000008
 800221c:	20000009 	.word	0x20000009
 8002220:	20000124 	.word	0x20000124

08002224 <USART_Init>:

void USART_Init (void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	USART2_handle.pUSARTx = USART2;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <USART_Init+0x58>)
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <USART_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
	USART2_handle.USART_Config.USART_baudRate = USART_BAUD_9600;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <USART_Init+0x58>)
 8002230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002234:	80da      	strh	r2, [r3, #6]
	USART2_handle.USART_Config.USART_mode = USART_MODE_TXRX;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <USART_Init+0x58>)
 8002238:	2202      	movs	r2, #2
 800223a:	729a      	strb	r2, [r3, #10]
	USART2_handle.USART_Config.USART_parityControl = USART_PARITY_DISABLED;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <USART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	711a      	strb	r2, [r3, #4]
	USART2_handle.USART_Config.USART_stopBits = USART_STOP;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <USART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	721a      	strb	r2, [r3, #8]
	USART2_handle.USART_Config.USART_wordLength = USART_8_DATA_BITS;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <USART_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	725a      	strb	r2, [r3, #9]
	USART2_handle.rxBuffer = usart_rxBuffer;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <USART_Init+0x58>)
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <USART_Init+0x60>)
 8002252:	615a      	str	r2, [r3, #20]
	USART2_handle.rxLength = rxLength;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <USART_Init+0x64>)
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <USART_Init+0x58>)
 800225a:	765a      	strb	r2, [r3, #25]
	USART2_handle.rxSize = rxLength;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <USART_Init+0x64>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <USART_Init+0x58>)
 8002262:	769a      	strb	r2, [r3, #26]
	USART2_handle.dmaTransfer = DMA_TX_DISABLE;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <USART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	76da      	strb	r2, [r3, #27]
	USART2_handle.dmaReception = DMA_RX_DISABLE;
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <USART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]

	USART_Initization(&USART2_handle);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <USART_Init+0x58>)
 8002272:	f7ff feb5 	bl	8001fe0 <USART_Initization>
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000c4 	.word	0x200000c4
 8002280:	40004400 	.word	0x40004400
 8002284:	200000a0 	.word	0x200000a0
 8002288:	2000000a 	.word	0x2000000a

0800228c <GetTemperature>:
	DMA_Initialization(dmaHandle);
}


uint16_t GetTemperature(uint8_t interrupt)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
	printf ("Reading %d bytes\n", bytesToRead);
 8002296:	2102      	movs	r1, #2
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <GetTemperature+0x38>)
 800229a:	f000 fcc5 	bl	8002c28 <iprintf>
	uint16_t temperature;

	if (interrupt == SET)
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <GetTemperature+0x24>
	{
		temperature = ReadTemperatureInterrupt(&I2C1_handle);
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <GetTemperature+0x3c>)
 80022a6:	f000 f97f 	bl	80025a8 <ReadTemperatureInterrupt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	81fb      	strh	r3, [r7, #14]
 80022ae:	e003      	b.n	80022b8 <GetTemperature+0x2c>
	}
	else
	{
		ReadTemperature(&I2C1_handle, bytesToRead);
 80022b0:	2102      	movs	r1, #2
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <GetTemperature+0x3c>)
 80022b4:	f000 f9aa 	bl	800260c <ReadTemperature>
	}
	return temperature;
 80022b8:	89fb      	ldrh	r3, [r7, #14]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08003e78 	.word	0x08003e78
 80022c8:	20000128 	.word	0x20000128

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80022d0:	f7fe fe20 	bl	8000f14 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022d4:	f000 f814 	bl	8002300 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022d8:	f000 f872 	bl	80023c0 <MX_GPIO_Init>

	/* Initialize I2C struct */
    I2C_Initilization();
 80022dc:	f7ff ff6c 	bl	80021b8 <I2C_Initilization>

    /* Initialize USART struct */
    USART_Init();
 80022e0:	f7ff ffa0 	bl	8002224 <USART_Init>

    StartSerialSession (&USART2_handle, usart_rxBuffer, rxLength);
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <main+0x28>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4903      	ldr	r1, [pc, #12]	; (80022f8 <main+0x2c>)
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <main+0x30>)
 80022ee:	f000 fbf1 	bl	8002ad4 <StartSerialSession>

//    StartSerialSession (&USART2_handle, usart_rxBuffer, rxLength, &I2C1_handle);

	while (1);
 80022f2:	e7fe      	b.n	80022f2 <main+0x26>
 80022f4:	2000000a 	.word	0x2000000a
 80022f8:	200000a0 	.word	0x200000a0
 80022fc:	200000c4 	.word	0x200000c4

08002300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b094      	sub	sp, #80	; 0x50
 8002304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	2230      	movs	r2, #48	; 0x30
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fc81 	bl	8002c16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <SystemClock_Config+0xb8>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <SystemClock_Config+0xb8>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <SystemClock_Config+0xb8>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <SystemClock_Config+0xbc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <SystemClock_Config+0xbc>)
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <SystemClock_Config+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002364:	2301      	movs	r3, #1
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002368:	2310      	movs	r3, #16
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800236c:	2300      	movs	r3, #0
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f907 	bl	8001588 <HAL_RCC_OscConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002380:	f000 f8b6 	bl	80024f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002384:	230f      	movs	r3, #15
 8002386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fb62 	bl	8001a68 <HAL_RCC_ClockConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023aa:	f000 f8a1 	bl	80024f0 <Error_Handler>
  }
}
 80023ae:	bf00      	nop
 80023b0:	3750      	adds	r7, #80	; 0x50
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000

080023c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();			// Push button (PC13)
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a43      	ldr	r2, [pc, #268]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();			// LED (PA5)
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a3c      	ldr	r2, [pc, #240]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <MX_GPIO_Init+0x11c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();			// I2C1
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b36      	ldr	r3, [pc, #216]	; (80024dc <MX_GPIO_Init+0x11c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <MX_GPIO_Init+0x11c>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <MX_GPIO_Init+0x11c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	4830      	ldr	r0, [pc, #192]	; (80024e0 <MX_GPIO_Init+0x120>)
 8002420:	f7ff f87e 	bl	8001520 <HAL_GPIO_WritePin>

	/* USART config */
	gpio.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
	gpio.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002428:	230c      	movs	r3, #12
 800242a:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_PULLUP;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
	gpio.Alternate = GPIO_AF7_USART2;
 8002430:	2307      	movs	r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <MX_GPIO_Init+0x120>)
 800243c:	f7fe feee 	bl	800121c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002440:	2026      	movs	r0, #38	; 0x26
 8002442:	f7fe fed0 	bl	80011e6 <HAL_NVIC_EnableIRQ>

	/* LED/Push button config */

	// Configure GPIO pin : PC13 // PUSH BUTTON
	gpio.Pin = GPIO_PIN_13;
 8002446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800244a:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_IT_RISING;
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <MX_GPIO_Init+0x124>)
 800244e:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	4619      	mov	r1, r3
 800245a:	4823      	ldr	r0, [pc, #140]	; (80024e8 <MX_GPIO_Init+0x128>)
 800245c:	f7fe fede 	bl	800121c <HAL_GPIO_Init>

	// Configure GPIO pin : PA5  // LED
	gpio.Pin = GPIO_PIN_5;
 8002460:	2320      	movs	r3, #32
 8002462:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	481a      	ldr	r0, [pc, #104]	; (80024e0 <MX_GPIO_Init+0x120>)
 8002478:	f7fe fed0 	bl	800121c <HAL_GPIO_Init>

	// Configure I2C
	gpio.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
	gpio.Alternate = GPIO_AF4_I2C1;
 8002488:	2304      	movs	r3, #4
 800248a:	61fb      	str	r3, [r7, #28]


	// scl
	gpio.Pin = GPIO_PIN_6;
 800248c:	2340      	movs	r3, #64	; 0x40
 800248e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4619      	mov	r1, r3
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <MX_GPIO_Init+0x12c>)
 8002498:	f7fe fec0 	bl	800121c <HAL_GPIO_Init>

	// sdata
	gpio.Pin = GPIO_PIN_7;
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4619      	mov	r1, r3
 80024a6:	4811      	ldr	r0, [pc, #68]	; (80024ec <MX_GPIO_Init+0x12c>)
 80024a8:	f7fe feb8 	bl	800121c <HAL_GPIO_Init>

	/* EXTI GPIO init */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2028      	movs	r0, #40	; 0x28
 80024b2:	f7fe fe7c 	bl	80011ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024b6:	2028      	movs	r0, #40	; 0x28
 80024b8:	f7fe fe95 	bl	80011e6 <HAL_NVIC_EnableIRQ>

	/* EXTI I2C Interrupts */
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024bc:	201f      	movs	r0, #31
 80024be:	f7fe fe92 	bl	80011e6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024c2:	2020      	movs	r0, #32
 80024c4:	f7fe fe8f 	bl	80011e6 <HAL_NVIC_EnableIRQ>

//	/* EXTI DMA interrupt */ -- todo remove
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024c8:	2011      	movs	r0, #17
 80024ca:	f7fe fe8c 	bl	80011e6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024ce:	2010      	movs	r0, #16
 80024d0:	f7fe fe89 	bl	80011e6 <HAL_NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	10110000 	.word	0x10110000
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020400 	.word	0x40020400

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <ProcessData>:

#include <mcp9808.h>
/*
 * @ProcessData: Converts raw bytes into readable data
 */
uint16_t ProcessData (uint8_t *rxBuffer) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	uint8_t startIndex = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	737b      	strb	r3, [r7, #13]
	printf ("\nUpper byte: %d, Lower byte: %d\n", rxBuffer[startIndex], rxBuffer[startIndex+1]);
 800250c:	7b7b      	ldrb	r3, [r7, #13]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	7b7b      	ldrb	r3, [r7, #13]
 8002518:	3301      	adds	r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	481f      	ldr	r0, [pc, #124]	; (80025a0 <ProcessData+0xa0>)
 8002524:	f000 fb80 	bl	8002c28 <iprintf>
	uint16_t temperatureInDegrees;

	// process data
	uint8_t upperByte = rxBuffer[startIndex] & 0x1F; // mask out the 3 bits
 8002528:	7b7b      	ldrb	r3, [r7, #13]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	733b      	strb	r3, [r7, #12]
	uint8_t signBit = upperByte & 0x10;
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	72fb      	strb	r3, [r7, #11]

	if (signBit)
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <ProcessData+0x70>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 8002544:	7b3b      	ldrb	r3, [r7, #12]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	733b      	strb	r3, [r7, #12]
		temperatureInDegrees = 256 - (upperByte << 4 | rxBuffer[startIndex+1] >> 4);
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	b21a      	sxth	r2, r3
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	3301      	adds	r3, #1
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	440b      	add	r3, r1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	b2db      	uxtb	r3, r3
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	e00d      	b.n	800258c <ProcessData+0x8c>
	}
	else
	{
		temperatureInDegrees = upperByte << 4 | rxBuffer[startIndex+1] >> 4;
 8002570:	7b3b      	ldrb	r3, [r7, #12]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	b21a      	sxth	r2, r3
 8002576:	7b7b      	ldrb	r3, [r7, #13]
 8002578:	3301      	adds	r3, #1
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	b2db      	uxtb	r3, r3
 8002584:	b21b      	sxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b21b      	sxth	r3, r3
 800258a:	81fb      	strh	r3, [r7, #14]
	}
	printf ("Temperature value: %d\n\n", temperatureInDegrees);
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	4619      	mov	r1, r3
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <ProcessData+0xa4>)
 8002592:	f000 fb49 	bl	8002c28 <iprintf>
	return temperatureInDegrees;
 8002596:	89fb      	ldrh	r3, [r7, #14]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	08003e8c 	.word	0x08003e8c
 80025a4:	08003eb0 	.word	0x08003eb0

080025a8 <ReadTemperatureInterrupt>:

/*
 * @ReadTemperatureInterrupt: Reads temperature values via I2C using interrupts
 */
uint16_t ReadTemperatureInterrupt(I2C_Handle_t *I2C_handle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	// Start I2C transaction
	while (HAL_I2C_StartInterrupt(I2C_TX_BUSY) != I2C_READY);
 80025b0:	bf00      	nop
 80025b2:	2003      	movs	r0, #3
 80025b4:	f7fe f974 	bl	80008a0 <HAL_I2C_StartInterrupt>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d1f9      	bne.n	80025b2 <ReadTemperatureInterrupt+0xa>

	I2C_handle->I2C_State = I2C_INIT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	731a      	strb	r2, [r3, #12]

	// request the data from the sensor
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e00c      	b.n	80025e4 <ReadTemperatureInterrupt+0x3c>
	{
		I2C_handle->I2C_State = I2C_INIT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	731a      	strb	r2, [r3, #12]
		while (HAL_I2C_StartInterrupt(I2C_RX_BUSY) != I2C_READY);
 80025d0:	bf00      	nop
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7fe f964 	bl	80008a0 <HAL_I2C_StartInterrupt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d1f9      	bne.n	80025d2 <ReadTemperatureInterrupt+0x2a>
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3301      	adds	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7e5b      	ldrb	r3, [r3, #25]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	dbea      	blt.n	80025ca <ReadTemperatureInterrupt+0x22>
	}

	uint16_t temperature = ProcessData(I2C_handle->pRxBuffer);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff81 	bl	8002500 <ProcessData>
 80025fe:	4603      	mov	r3, r0
 8002600:	817b      	strh	r3, [r7, #10]
	return temperature;
 8002602:	897b      	ldrh	r3, [r7, #10]
//	for (int i = 0; i < I2C_handle->rxBufferSize; i+=2)
//	{
////		printf ("%d, %d\n", I2C_handle->pRxBuffer[i], I2C_handle->pRxBuffer[i+1]);
//		ProcessData(I2C_handle->pRxBuffer, i);
//	}
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <ReadTemperature>:

/*
 * @ReadTemperature: Read temperature via I2C using polling approach
 */
void ReadTemperature(I2C_Handle_t *I2C_handle, const uint8_t bytesToRead)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	466b      	mov	r3, sp
 800261a:	461d      	mov	r5, r3
	// todo - maybe use the following data straight from I2C_handle
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 800261c:	2305      	movs	r3, #5
 800261e:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuffer[bytesToRead];
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	3b01      	subs	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	78f9      	ldrb	r1, [r7, #3]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	00d4      	lsls	r4, r2, #3
 8002636:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	78f9      	ldrb	r1, [r7, #3]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	00d4      	lsls	r4, r2, #3
 800264c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002650:	00cb      	lsls	r3, r1, #3
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	3307      	adds	r3, #7
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	ebad 0d03 	sub.w	sp, sp, r3
 800265e:	466b      	mov	r3, sp
 8002660:	3300      	adds	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
	uint8_t startRxIndex = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	76fb      	strb	r3, [r7, #27]

	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe fabf 	bl	8000bf8 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	for (int i = 0; i < bytesToRead/2; i++, startRxIndex+=2)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e01d      	b.n	80026bc <ReadTemperature+0xb0>
	{
		HAL_I2C_Master_Receive (I2C_handle, rxBuffer, BYTES_PER_TRANSACTION, startRxIndex);
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	7efb      	ldrb	r3, [r7, #27]
 8002684:	2202      	movs	r2, #2
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe faf7 	bl	8000c7a <HAL_I2C_Master_Receive>

		for (int j=0; j<bytesToRead; j++)
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	e00a      	b.n	80026a8 <ReadTemperature+0x9c>
		{
			printf ("%d\n", rxBuffer[j]);
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	481c      	ldr	r0, [pc, #112]	; (8002710 <ReadTemperature+0x104>)
 800269e:	f000 fac3 	bl	8002c28 <iprintf>
		for (int j=0; j<bytesToRead; j++)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	3301      	adds	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf0      	blt.n	8002692 <ReadTemperature+0x86>
	for (int i = 0; i < bytesToRead/2; i++, startRxIndex+=2)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	7efb      	ldrb	r3, [r7, #27]
 80026b8:	3302      	adds	r3, #2
 80026ba:	76fb      	strb	r3, [r7, #27]
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4293      	cmp	r3, r2
 80026c8:	dbda      	blt.n	8002680 <ReadTemperature+0x74>
		}
	}

	printf ("Printing raw bytes:\n");
 80026ca:	4812      	ldr	r0, [pc, #72]	; (8002714 <ReadTemperature+0x108>)
 80026cc:	f000 fb20 	bl	8002d10 <puts>
	for (int i = 0; i < bytesToRead; i+=2)
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e013      	b.n	80026fe <ReadTemperature+0xf2>
	{
		printf ("%d,%d\n", rxBuffer[i], rxBuffer[i+1]);
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	461a      	mov	r2, r3
 80026ea:	480b      	ldr	r0, [pc, #44]	; (8002718 <ReadTemperature+0x10c>)
 80026ec:	f000 fa9c 	bl	8002c28 <iprintf>
		ProcessData(rxBuffer);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff04 	bl	8002500 <ProcessData>
	for (int i = 0; i < bytesToRead; i+=2)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3302      	adds	r3, #2
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	dbe7      	blt.n	80026d6 <ReadTemperature+0xca>
 8002706:	46ad      	mov	sp, r5
	}

//	ProcessData(rxBuffer, 0);

}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bdb0      	pop	{r4, r5, r7, pc}
 8002710:	08003ec8 	.word	0x08003ec8
 8002714:	08003ecc 	.word	0x08003ecc
 8002718:	08003ee0 	.word	0x08003ee0

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_MspInit+0x4c>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_MspInit+0x4c>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_MspInit+0x4c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_MspInit+0x4c>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
//
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
//
  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13))
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <EXTI15_10_IRQHandler+0x24>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <EXTI15_10_IRQHandler+0x20>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <EXTI15_10_IRQHandler+0x24>)
 80027ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d2:	615a      	str	r2, [r3, #20]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027d4:	2120      	movs	r1, #32
 80027d6:	4803      	ldr	r0, [pc, #12]	; (80027e4 <EXTI15_10_IRQHandler+0x28>)
 80027d8:	f7fe febb 	bl	8001552 <HAL_GPIO_TogglePin>
	}


}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40013c00 	.word	0x40013c00
 80027e4:	40020000 	.word	0x40020000

080027e8 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f7fe fbe4 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00a      	b.n	800281c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002806:	f3af 8000 	nop.w
 800280a:	4601      	mov	r1, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	b2ca      	uxtb	r2, r1
 8002814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	dbf0      	blt.n	8002806 <_read+0x12>
	}

return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e009      	b.n	8002854 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	60ba      	str	r2, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbf1      	blt.n	8002840 <_write+0x12>
	}
	return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_close>:

int _close(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	605a      	str	r2, [r3, #4]
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_isatty>:

int _isatty(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	return 1;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
	return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x50>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x16>
		heap_end = &end;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <_sbrk+0x50>)
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <_sbrk+0x54>)
 80028e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <_sbrk+0x50>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <_sbrk+0x50>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	466a      	mov	r2, sp
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d907      	bls.n	800290a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028fa:	f000 f957 	bl	8002bac <__errno>
 80028fe:	4602      	mov	r2, r0
 8002900:	230c      	movs	r3, #12
 8002902:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002908:	e006      	b.n	8002918 <_sbrk+0x48>
	}

	heap_end += incr;
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <_sbrk+0x50>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a03      	ldr	r2, [pc, #12]	; (8002920 <_sbrk+0x50>)
 8002914:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200000b4 	.word	0x200000b4
 8002924:	20000148 	.word	0x20000148

08002928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <SystemInit+0x28>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <SystemInit+0x28>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SystemInit+0x28>)
 800293e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002942:	609a      	str	r2, [r3, #8]
#endif
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <SendSerialData>:
 * @param: format: format of the TX data
 * @param: ...   : data to display
 * @return void
 */
void SendSerialData(USART_Handle_t *usart, const char *format, ...)
{
 8002954:	b40e      	push	{r1, r2, r3}
 8002956:	b5b0      	push	{r4, r5, r7, lr}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	466b      	mov	r3, sp
 8002960:	461d      	mov	r5, r3
	char serialBuffer[strlen(format)];
 8002962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002964:	f7fd fc46 	bl	80001f4 <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	4601      	mov	r1, r0
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	f04f 0400 	mov.w	r4, #0
 800297c:	00d4      	lsls	r4, r2, #3
 800297e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002982:	00cb      	lsls	r3, r1, #3
 8002984:	4601      	mov	r1, r0
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f04f 0400 	mov.w	r4, #0
 8002992:	00d4      	lsls	r4, r2, #3
 8002994:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002998:	00cb      	lsls	r3, r1, #3
 800299a:	1dc3      	adds	r3, r0, #7
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	ebad 0d03 	sub.w	sp, sp, r3
 80029a4:	466b      	mov	r3, sp
 80029a6:	3300      	adds	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 80029aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029ae:	60fb      	str	r3, [r7, #12]
	vsprintf(serialBuffer, format, args);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f9d6 	bl	8002d68 <vsiprintf>

	usart->txBuffer = serialBuffer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	611a      	str	r2, [r3, #16]
	usart->txLength = strlen(serialBuffer);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fc15 	bl	80001f4 <strlen>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	761a      	strb	r2, [r3, #24]

	while (USART_TransmitData() != USART_READY);
 80029d2:	bf00      	nop
 80029d4:	f7ff fa3e 	bl	8001e54 <USART_TransmitData>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d1fa      	bne.n	80029d4 <SendSerialData+0x80>
 80029de:	46ad      	mov	sp, r5
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80029ea:	b003      	add	sp, #12
 80029ec:	4770      	bx	lr

080029ee <ReceiveSerialData>:
 * ReceiveSerialData: Receive serial data from the slave
 * @param: usart:  pointer to USART structure
 * @return void
 */
void ReceiveSerialData(USART_Handle_t *usart)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	while (USART_RxData(USART_RX_BUSY) != USART_READY);
 80029f6:	bf00      	nop
 80029f8:	2002      	movs	r0, #2
 80029fa:	f7ff fa4b 	bl	8001e94 <USART_RxData>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d1f9      	bne.n	80029f8 <ReceiveSerialData+0xa>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <ParseSerialData>:
 * @param: tempBuffer: 		temporary buffer that stores the parsed data
 * @param: usart_rxBuffer:  pointer to rx buffer that stores the user input
 * @return void
 */
void ParseSerialData(USART_Handle_t *usart, char *tempBuffer, char *usart_rxBuffer) // hello\r\world\r
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
//	char *end = strstr(*tempPtr , "\r");
//	uint8_t bytes = end - start;
//	memcpy(tempBuffer, start, bytes);
//	*tempPtr = usart->rxBuffer;

	char *start = usart_rxBuffer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	61fb      	str	r3, [r7, #28]
	char *end = strstr(usart_rxBuffer, "\r");
 8002a1c:	210d      	movs	r1, #13
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f97e 	bl	8002d20 <strchr>
 8002a24:	61b8      	str	r0, [r7, #24]
	uint8_t bytes = end - start;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	75fb      	strb	r3, [r7, #23]
	memcpy(tempBuffer, start, bytes);
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	461a      	mov	r2, r3
 8002a32:	69f9      	ldr	r1, [r7, #28]
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f000 f8e3 	bl	8002c00 <memcpy>
}
 8002a3a:	bf00      	nop
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <ExecuteSerialData>:
 * @param: usart: pointer to usart structure
 * @param: str1:  hardcoded string to compare the user input against
 * @return false if "q" (quit) is entered, otherwise true
 */
bool ExecuteSerialData(USART_Handle_t *usart, const char *str1)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	if (!strcmp(str1, "temp"))
 8002a4e:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <ExecuteSerialData+0x74>)
 8002a50:	6838      	ldr	r0, [r7, #0]
 8002a52:	f7fd fbc5 	bl	80001e0 <strcmp>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <ExecuteSerialData+0x30>
	{
		uint16_t temp = GetTemperature(SET);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff fc15 	bl	800228c <GetTemperature>
 8002a62:	4603      	mov	r3, r0
 8002a64:	81fb      	strh	r3, [r7, #14]
		SendSerialData(usart, "Current temperature: %d\n", temp);
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4914      	ldr	r1, [pc, #80]	; (8002abc <ExecuteSerialData+0x78>)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff71 	bl	8002954 <SendSerialData>
 8002a72:	e01c      	b.n	8002aae <ExecuteSerialData+0x6a>
	}
	else if (!strcmp(str1, "led"))
 8002a74:	4912      	ldr	r1, [pc, #72]	; (8002ac0 <ExecuteSerialData+0x7c>)
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f7fd fbb2 	bl	80001e0 <strcmp>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <ExecuteSerialData+0x50>
	{
		SendSerialData(usart, "Toggling LED\n");
 8002a82:	4910      	ldr	r1, [pc, #64]	; (8002ac4 <ExecuteSerialData+0x80>)
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff65 	bl	8002954 <SendSerialData>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <ExecuteSerialData+0x84>)
 8002a8e:	f7fe fd60 	bl	8001552 <HAL_GPIO_TogglePin>
 8002a92:	e00c      	b.n	8002aae <ExecuteSerialData+0x6a>
	}
	else if (!strcmp(str1, "q"))
 8002a94:	490d      	ldr	r1, [pc, #52]	; (8002acc <ExecuteSerialData+0x88>)
 8002a96:	6838      	ldr	r0, [r7, #0]
 8002a98:	f7fd fba2 	bl	80001e0 <strcmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <ExecuteSerialData+0x6a>
	{
		SendSerialData(usart, "No longer accepting serial data...\n");
 8002aa2:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <ExecuteSerialData+0x8c>)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff55 	bl	8002954 <SendSerialData>
		return false;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <ExecuteSerialData+0x6c>
	}
	return true;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	08003ee8 	.word	0x08003ee8
 8002abc:	08003ef0 	.word	0x08003ef0
 8002ac0:	08003f0c 	.word	0x08003f0c
 8002ac4:	08003f10 	.word	0x08003f10
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	08003f20 	.word	0x08003f20
 8002ad0:	08003f24 	.word	0x08003f24

08002ad4 <StartSerialSession>:
 * @param: usart_rxBuffer:  pointer to rx buffer that stores user inputs
 * @param: rxBufferSize: 	size of the rx buffer
 * @return void
 */
void StartSerialSession (USART_Handle_t *usart, char *usart_rxBuffer, uint8_t rxBufferSize)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	71fb      	strb	r3, [r7, #7]
	char tempBuffer[20] = {0};
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]
	while(true)
	{
		ReceiveSerialData(usart);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff ff7b 	bl	80029ee <ReceiveSerialData>
		ParseSerialData(usart, tempBuffer, usart_rxBuffer);
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff ff83 	bl	8002a0c <ParseSerialData>
		bool status = ExecuteSerialData(usart, tempBuffer);
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff ff99 	bl	8002a44 <ExecuteSerialData>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!status)		// break if "q" is entered
 8002b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d112      	bne.n	8002b4c <StartSerialSession+0x78>
		{
			break;
		}

		// clear out/reset the buffers
		usart->rxBuffer = usart_rxBuffer;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	615a      	str	r2, [r3, #20]
		memset(usart_rxBuffer, 0, sizeof(rxBufferSize));
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2100      	movs	r1, #0
 8002b30:	68b8      	ldr	r0, [r7, #8]
 8002b32:	f000 f870 	bl	8002c16 <memset>
		memset(tempBuffer, 0, sizeof(tempBuffer));
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	2214      	movs	r2, #20
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f869 	bl	8002c16 <memset>

		// reset the USART state
		usart->USART_State = USART_INIT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	731a      	strb	r2, [r3, #12]
	{
 8002b4a:	e7d2      	b.n	8002af2 <StartSerialSession+0x1e>
			break;
 8002b4c:	bf00      	nop
	}
}
 8002b4e:	bf00      	nop
 8002b50:	3728      	adds	r7, #40	; 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b5e:	e003      	b.n	8002b68 <LoopCopyDataInit>

08002b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b66:	3104      	adds	r1, #4

08002b68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b70:	d3f6      	bcc.n	8002b60 <CopyDataInit>
  ldr  r2, =_sbss
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b74:	e002      	b.n	8002b7c <LoopFillZerobss>

08002b76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b78:	f842 3b04 	str.w	r3, [r2], #4

08002b7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b80:	d3f9      	bcc.n	8002b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b82:	f7ff fed1 	bl	8002928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b86:	f000 f817 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8a:	f7ff fb9f 	bl	80022cc <main>
  bx  lr    
 8002b8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b90:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002b94:	08004008 	.word	0x08004008
  ldr  r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b9c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002ba0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002ba4:	20000148 	.word	0x20000148

08002ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba8:	e7fe      	b.n	8002ba8 <ADC_IRQHandler>
	...

08002bac <__errno>:
 8002bac:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <__errno+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4e0d      	ldr	r6, [pc, #52]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbc:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bbe:	1ba4      	subs	r4, r4, r6
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	2500      	movs	r5, #0
 8002bc4:	42a5      	cmp	r5, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	4e0b      	ldr	r6, [pc, #44]	; (8002bf8 <__libc_init_array+0x40>)
 8002bca:	4c0c      	ldr	r4, [pc, #48]	; (8002bfc <__libc_init_array+0x44>)
 8002bcc:	f001 f93c 	bl	8003e48 <_init>
 8002bd0:	1ba4      	subs	r4, r4, r6
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	2500      	movs	r5, #0
 8002bd6:	42a5      	cmp	r5, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be0:	4798      	blx	r3
 8002be2:	3501      	adds	r5, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bea:	4798      	blx	r3
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08004000 	.word	0x08004000
 8002bf4:	08004000 	.word	0x08004000
 8002bf8:	08004000 	.word	0x08004000
 8002bfc:	08004004 	.word	0x08004004

08002c00 <memcpy>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	1e43      	subs	r3, r0, #1
 8002c04:	440a      	add	r2, r1
 8002c06:	4291      	cmp	r1, r2
 8002c08:	d100      	bne.n	8002c0c <memcpy+0xc>
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c14:	e7f7      	b.n	8002c06 <memcpy+0x6>

08002c16 <memset>:
 8002c16:	4402      	add	r2, r0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d100      	bne.n	8002c20 <memset+0xa>
 8002c1e:	4770      	bx	lr
 8002c20:	f803 1b01 	strb.w	r1, [r3], #1
 8002c24:	e7f9      	b.n	8002c1a <memset+0x4>
	...

08002c28 <iprintf>:
 8002c28:	b40f      	push	{r0, r1, r2, r3}
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <iprintf+0x2c>)
 8002c2c:	b513      	push	{r0, r1, r4, lr}
 8002c2e:	681c      	ldr	r4, [r3, #0]
 8002c30:	b124      	cbz	r4, 8002c3c <iprintf+0x14>
 8002c32:	69a3      	ldr	r3, [r4, #24]
 8002c34:	b913      	cbnz	r3, 8002c3c <iprintf+0x14>
 8002c36:	4620      	mov	r0, r4
 8002c38:	f000 fa50 	bl	80030dc <__sinit>
 8002c3c:	ab05      	add	r3, sp, #20
 8002c3e:	9a04      	ldr	r2, [sp, #16]
 8002c40:	68a1      	ldr	r1, [r4, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	4620      	mov	r0, r4
 8002c46:	f000 fd5b 	bl	8003700 <_vfiprintf_r>
 8002c4a:	b002      	add	sp, #8
 8002c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c50:	b004      	add	sp, #16
 8002c52:	4770      	bx	lr
 8002c54:	20000010 	.word	0x20000010

08002c58 <_puts_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	460e      	mov	r6, r1
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	b118      	cbz	r0, 8002c68 <_puts_r+0x10>
 8002c60:	6983      	ldr	r3, [r0, #24]
 8002c62:	b90b      	cbnz	r3, 8002c68 <_puts_r+0x10>
 8002c64:	f000 fa3a 	bl	80030dc <__sinit>
 8002c68:	69ab      	ldr	r3, [r5, #24]
 8002c6a:	68ac      	ldr	r4, [r5, #8]
 8002c6c:	b913      	cbnz	r3, 8002c74 <_puts_r+0x1c>
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f000 fa34 	bl	80030dc <__sinit>
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <_puts_r+0xac>)
 8002c76:	429c      	cmp	r4, r3
 8002c78:	d117      	bne.n	8002caa <_puts_r+0x52>
 8002c7a:	686c      	ldr	r4, [r5, #4]
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	071b      	lsls	r3, r3, #28
 8002c80:	d51d      	bpl.n	8002cbe <_puts_r+0x66>
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	b1db      	cbz	r3, 8002cbe <_puts_r+0x66>
 8002c86:	3e01      	subs	r6, #1
 8002c88:	68a3      	ldr	r3, [r4, #8]
 8002c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60a3      	str	r3, [r4, #8]
 8002c92:	b9e9      	cbnz	r1, 8002cd0 <_puts_r+0x78>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	da2e      	bge.n	8002cf6 <_puts_r+0x9e>
 8002c98:	4622      	mov	r2, r4
 8002c9a:	210a      	movs	r1, #10
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f000 f86d 	bl	8002d7c <__swbuf_r>
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d011      	beq.n	8002cca <_puts_r+0x72>
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	e011      	b.n	8002cce <_puts_r+0x76>
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <_puts_r+0xb0>)
 8002cac:	429c      	cmp	r4, r3
 8002cae:	d101      	bne.n	8002cb4 <_puts_r+0x5c>
 8002cb0:	68ac      	ldr	r4, [r5, #8]
 8002cb2:	e7e3      	b.n	8002c7c <_puts_r+0x24>
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_puts_r+0xb4>)
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	bf08      	it	eq
 8002cba:	68ec      	ldreq	r4, [r5, #12]
 8002cbc:	e7de      	b.n	8002c7c <_puts_r+0x24>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f8ad 	bl	8002e20 <__swsetup_r>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d0dd      	beq.n	8002c86 <_puts_r+0x2e>
 8002cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da04      	bge.n	8002cde <_puts_r+0x86>
 8002cd4:	69a2      	ldr	r2, [r4, #24]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dc06      	bgt.n	8002ce8 <_puts_r+0x90>
 8002cda:	290a      	cmp	r1, #10
 8002cdc:	d004      	beq.n	8002ce8 <_puts_r+0x90>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	6022      	str	r2, [r4, #0]
 8002ce4:	7019      	strb	r1, [r3, #0]
 8002ce6:	e7cf      	b.n	8002c88 <_puts_r+0x30>
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 f846 	bl	8002d7c <__swbuf_r>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d1c9      	bne.n	8002c88 <_puts_r+0x30>
 8002cf4:	e7e9      	b.n	8002cca <_puts_r+0x72>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	6022      	str	r2, [r4, #0]
 8002cfe:	7018      	strb	r0, [r3, #0]
 8002d00:	e7e5      	b.n	8002cce <_puts_r+0x76>
 8002d02:	bf00      	nop
 8002d04:	08003f84 	.word	0x08003f84
 8002d08:	08003fa4 	.word	0x08003fa4
 8002d0c:	08003f64 	.word	0x08003f64

08002d10 <puts>:
 8002d10:	4b02      	ldr	r3, [pc, #8]	; (8002d1c <puts+0xc>)
 8002d12:	4601      	mov	r1, r0
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f7ff bf9f 	b.w	8002c58 <_puts_r>
 8002d1a:	bf00      	nop
 8002d1c:	20000010 	.word	0x20000010

08002d20 <strchr>:
 8002d20:	b2c9      	uxtb	r1, r1
 8002d22:	4603      	mov	r3, r0
 8002d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d28:	b11a      	cbz	r2, 8002d32 <strchr+0x12>
 8002d2a:	428a      	cmp	r2, r1
 8002d2c:	d1f9      	bne.n	8002d22 <strchr+0x2>
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4770      	bx	lr
 8002d32:	2900      	cmp	r1, #0
 8002d34:	bf18      	it	ne
 8002d36:	2300      	movne	r3, #0
 8002d38:	e7f9      	b.n	8002d2e <strchr+0xe>
	...

08002d3c <_vsiprintf_r>:
 8002d3c:	b500      	push	{lr}
 8002d3e:	b09b      	sub	sp, #108	; 0x6c
 8002d40:	9100      	str	r1, [sp, #0]
 8002d42:	9104      	str	r1, [sp, #16]
 8002d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d48:	9105      	str	r1, [sp, #20]
 8002d4a:	9102      	str	r1, [sp, #8]
 8002d4c:	4905      	ldr	r1, [pc, #20]	; (8002d64 <_vsiprintf_r+0x28>)
 8002d4e:	9103      	str	r1, [sp, #12]
 8002d50:	4669      	mov	r1, sp
 8002d52:	f000 fbb3 	bl	80034bc <_svfiprintf_r>
 8002d56:	9b00      	ldr	r3, [sp, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	b01b      	add	sp, #108	; 0x6c
 8002d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d62:	bf00      	nop
 8002d64:	ffff0208 	.word	0xffff0208

08002d68 <vsiprintf>:
 8002d68:	4613      	mov	r3, r2
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	4802      	ldr	r0, [pc, #8]	; (8002d78 <vsiprintf+0x10>)
 8002d70:	6800      	ldr	r0, [r0, #0]
 8002d72:	f7ff bfe3 	b.w	8002d3c <_vsiprintf_r>
 8002d76:	bf00      	nop
 8002d78:	20000010 	.word	0x20000010

08002d7c <__swbuf_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	460e      	mov	r6, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	4605      	mov	r5, r0
 8002d84:	b118      	cbz	r0, 8002d8e <__swbuf_r+0x12>
 8002d86:	6983      	ldr	r3, [r0, #24]
 8002d88:	b90b      	cbnz	r3, 8002d8e <__swbuf_r+0x12>
 8002d8a:	f000 f9a7 	bl	80030dc <__sinit>
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <__swbuf_r+0x98>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d12a      	bne.n	8002dea <__swbuf_r+0x6e>
 8002d94:	686c      	ldr	r4, [r5, #4]
 8002d96:	69a3      	ldr	r3, [r4, #24]
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	071a      	lsls	r2, r3, #28
 8002d9e:	d52e      	bpl.n	8002dfe <__swbuf_r+0x82>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	b363      	cbz	r3, 8002dfe <__swbuf_r+0x82>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	b2f6      	uxtb	r6, r6
 8002dae:	4283      	cmp	r3, r0
 8002db0:	4637      	mov	r7, r6
 8002db2:	dc04      	bgt.n	8002dbe <__swbuf_r+0x42>
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f926 	bl	8003008 <_fflush_r>
 8002dbc:	bb28      	cbnz	r0, 8002e0a <__swbuf_r+0x8e>
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	701e      	strb	r6, [r3, #0]
 8002dcc:	6963      	ldr	r3, [r4, #20]
 8002dce:	3001      	adds	r0, #1
 8002dd0:	4283      	cmp	r3, r0
 8002dd2:	d004      	beq.n	8002dde <__swbuf_r+0x62>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d519      	bpl.n	8002e0e <__swbuf_r+0x92>
 8002dda:	2e0a      	cmp	r6, #10
 8002ddc:	d117      	bne.n	8002e0e <__swbuf_r+0x92>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f911 	bl	8003008 <_fflush_r>
 8002de6:	b190      	cbz	r0, 8002e0e <__swbuf_r+0x92>
 8002de8:	e00f      	b.n	8002e0a <__swbuf_r+0x8e>
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <__swbuf_r+0x9c>)
 8002dec:	429c      	cmp	r4, r3
 8002dee:	d101      	bne.n	8002df4 <__swbuf_r+0x78>
 8002df0:	68ac      	ldr	r4, [r5, #8]
 8002df2:	e7d0      	b.n	8002d96 <__swbuf_r+0x1a>
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <__swbuf_r+0xa0>)
 8002df6:	429c      	cmp	r4, r3
 8002df8:	bf08      	it	eq
 8002dfa:	68ec      	ldreq	r4, [r5, #12]
 8002dfc:	e7cb      	b.n	8002d96 <__swbuf_r+0x1a>
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 f80d 	bl	8002e20 <__swsetup_r>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d0cc      	beq.n	8002da4 <__swbuf_r+0x28>
 8002e0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e0e:	4638      	mov	r0, r7
 8002e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08003f84 	.word	0x08003f84
 8002e18:	08003fa4 	.word	0x08003fa4
 8002e1c:	08003f64 	.word	0x08003f64

08002e20 <__swsetup_r>:
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <__swsetup_r+0xcc>)
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	b125      	cbz	r5, 8002e36 <__swsetup_r+0x16>
 8002e2c:	69ab      	ldr	r3, [r5, #24]
 8002e2e:	b913      	cbnz	r3, 8002e36 <__swsetup_r+0x16>
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f953 	bl	80030dc <__sinit>
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <__swsetup_r+0xd0>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d10f      	bne.n	8002e5c <__swsetup_r+0x3c>
 8002e3c:	686c      	ldr	r4, [r5, #4]
 8002e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	0715      	lsls	r5, r2, #28
 8002e46:	d42c      	bmi.n	8002ea2 <__swsetup_r+0x82>
 8002e48:	06d0      	lsls	r0, r2, #27
 8002e4a:	d411      	bmi.n	8002e70 <__swsetup_r+0x50>
 8002e4c:	2209      	movs	r2, #9
 8002e4e:	6032      	str	r2, [r6, #0]
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e5a:	e03e      	b.n	8002eda <__swsetup_r+0xba>
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <__swsetup_r+0xd4>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swsetup_r+0x46>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7eb      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <__swsetup_r+0xd8>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7e6      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e70:	0751      	lsls	r1, r2, #29
 8002e72:	d512      	bpl.n	8002e9a <__swsetup_r+0x7a>
 8002e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e76:	b141      	cbz	r1, 8002e8a <__swsetup_r+0x6a>
 8002e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e7c:	4299      	cmp	r1, r3
 8002e7e:	d002      	beq.n	8002e86 <__swsetup_r+0x66>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f000 fa19 	bl	80032b8 <_free_r>
 8002e86:	2300      	movs	r3, #0
 8002e88:	6363      	str	r3, [r4, #52]	; 0x34
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b94b      	cbnz	r3, 8002eba <__swsetup_r+0x9a>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d003      	beq.n	8002eba <__swsetup_r+0x9a>
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f9bf 	bl	8003238 <__smakebuf_r>
 8002eba:	89a2      	ldrh	r2, [r4, #12]
 8002ebc:	f012 0301 	ands.w	r3, r2, #1
 8002ec0:	d00c      	beq.n	8002edc <__swsetup_r+0xbc>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	6963      	ldr	r3, [r4, #20]
 8002ec8:	425b      	negs	r3, r3
 8002eca:	61a3      	str	r3, [r4, #24]
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	b953      	cbnz	r3, 8002ee6 <__swsetup_r+0xc6>
 8002ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ed8:	d1ba      	bne.n	8002e50 <__swsetup_r+0x30>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	0792      	lsls	r2, r2, #30
 8002ede:	bf58      	it	pl
 8002ee0:	6963      	ldrpl	r3, [r4, #20]
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	e7f2      	b.n	8002ecc <__swsetup_r+0xac>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7f7      	b.n	8002eda <__swsetup_r+0xba>
 8002eea:	bf00      	nop
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	08003f84 	.word	0x08003f84
 8002ef4:	08003fa4 	.word	0x08003fa4
 8002ef8:	08003f64 	.word	0x08003f64

08002efc <__sflush_r>:
 8002efc:	898a      	ldrh	r2, [r1, #12]
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	0710      	lsls	r0, r2, #28
 8002f06:	460c      	mov	r4, r1
 8002f08:	d458      	bmi.n	8002fbc <__sflush_r+0xc0>
 8002f0a:	684b      	ldr	r3, [r1, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dc05      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc02      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d0f9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f22:	2300      	movs	r3, #0
 8002f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f28:	682f      	ldr	r7, [r5, #0]
 8002f2a:	6a21      	ldr	r1, [r4, #32]
 8002f2c:	602b      	str	r3, [r5, #0]
 8002f2e:	d032      	beq.n	8002f96 <__sflush_r+0x9a>
 8002f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	075a      	lsls	r2, r3, #29
 8002f36:	d505      	bpl.n	8002f44 <__sflush_r+0x48>
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	1ac0      	subs	r0, r0, r3
 8002f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f3e:	b10b      	cbz	r3, 8002f44 <__sflush_r+0x48>
 8002f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f42:	1ac0      	subs	r0, r0, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	4602      	mov	r2, r0
 8002f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f4a:	6a21      	ldr	r1, [r4, #32]
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b0      	blx	r6
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	d106      	bne.n	8002f64 <__sflush_r+0x68>
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	291d      	cmp	r1, #29
 8002f5a:	d848      	bhi.n	8002fee <__sflush_r+0xf2>
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <__sflush_r+0x108>)
 8002f5e:	40ca      	lsrs	r2, r1
 8002f60:	07d6      	lsls	r6, r2, #31
 8002f62:	d544      	bpl.n	8002fee <__sflush_r+0xf2>
 8002f64:	2200      	movs	r2, #0
 8002f66:	6062      	str	r2, [r4, #4]
 8002f68:	04d9      	lsls	r1, r3, #19
 8002f6a:	6922      	ldr	r2, [r4, #16]
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	d504      	bpl.n	8002f7a <__sflush_r+0x7e>
 8002f70:	1c42      	adds	r2, r0, #1
 8002f72:	d101      	bne.n	8002f78 <__sflush_r+0x7c>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b903      	cbnz	r3, 8002f7a <__sflush_r+0x7e>
 8002f78:	6560      	str	r0, [r4, #84]	; 0x54
 8002f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7c:	602f      	str	r7, [r5, #0]
 8002f7e:	2900      	cmp	r1, #0
 8002f80:	d0c9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d002      	beq.n	8002f90 <__sflush_r+0x94>
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 f994 	bl	80032b8 <_free_r>
 8002f90:	2000      	movs	r0, #0
 8002f92:	6360      	str	r0, [r4, #52]	; 0x34
 8002f94:	e7c0      	b.n	8002f18 <__sflush_r+0x1c>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b0      	blx	r6
 8002f9c:	1c41      	adds	r1, r0, #1
 8002f9e:	d1c8      	bne.n	8002f32 <__sflush_r+0x36>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0c5      	beq.n	8002f32 <__sflush_r+0x36>
 8002fa6:	2b1d      	cmp	r3, #29
 8002fa8:	d001      	beq.n	8002fae <__sflush_r+0xb2>
 8002faa:	2b16      	cmp	r3, #22
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0xb6>
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	e7b1      	b.n	8002f16 <__sflush_r+0x1a>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e7ad      	b.n	8002f18 <__sflush_r+0x1c>
 8002fbc:	690f      	ldr	r7, [r1, #16]
 8002fbe:	2f00      	cmp	r7, #0
 8002fc0:	d0a9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002fc2:	0793      	lsls	r3, r2, #30
 8002fc4:	680e      	ldr	r6, [r1, #0]
 8002fc6:	bf08      	it	eq
 8002fc8:	694b      	ldreq	r3, [r1, #20]
 8002fca:	600f      	str	r7, [r1, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	2300      	movne	r3, #0
 8002fd0:	eba6 0807 	sub.w	r8, r6, r7
 8002fd4:	608b      	str	r3, [r1, #8]
 8002fd6:	f1b8 0f00 	cmp.w	r8, #0
 8002fda:	dd9c      	ble.n	8002f16 <__sflush_r+0x1a>
 8002fdc:	4643      	mov	r3, r8
 8002fde:	463a      	mov	r2, r7
 8002fe0:	6a21      	ldr	r1, [r4, #32]
 8002fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b0      	blx	r6
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	dc06      	bgt.n	8002ffa <__sflush_r+0xfe>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	81a3      	strh	r3, [r4, #12]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff8:	e78e      	b.n	8002f18 <__sflush_r+0x1c>
 8002ffa:	4407      	add	r7, r0
 8002ffc:	eba8 0800 	sub.w	r8, r8, r0
 8003000:	e7e9      	b.n	8002fd6 <__sflush_r+0xda>
 8003002:	bf00      	nop
 8003004:	20400001 	.word	0x20400001

08003008 <_fflush_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	690b      	ldr	r3, [r1, #16]
 800300c:	4605      	mov	r5, r0
 800300e:	460c      	mov	r4, r1
 8003010:	b1db      	cbz	r3, 800304a <_fflush_r+0x42>
 8003012:	b118      	cbz	r0, 800301c <_fflush_r+0x14>
 8003014:	6983      	ldr	r3, [r0, #24]
 8003016:	b90b      	cbnz	r3, 800301c <_fflush_r+0x14>
 8003018:	f000 f860 	bl	80030dc <__sinit>
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <_fflush_r+0x48>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d109      	bne.n	8003036 <_fflush_r+0x2e>
 8003022:	686c      	ldr	r4, [r5, #4]
 8003024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003028:	b17b      	cbz	r3, 800304a <_fflush_r+0x42>
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003032:	f7ff bf63 	b.w	8002efc <__sflush_r>
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <_fflush_r+0x4c>)
 8003038:	429c      	cmp	r4, r3
 800303a:	d101      	bne.n	8003040 <_fflush_r+0x38>
 800303c:	68ac      	ldr	r4, [r5, #8]
 800303e:	e7f1      	b.n	8003024 <_fflush_r+0x1c>
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <_fflush_r+0x50>)
 8003042:	429c      	cmp	r4, r3
 8003044:	bf08      	it	eq
 8003046:	68ec      	ldreq	r4, [r5, #12]
 8003048:	e7ec      	b.n	8003024 <_fflush_r+0x1c>
 800304a:	2000      	movs	r0, #0
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	08003f84 	.word	0x08003f84
 8003054:	08003fa4 	.word	0x08003fa4
 8003058:	08003f64 	.word	0x08003f64

0800305c <std>:
 800305c:	2300      	movs	r3, #0
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	e9c0 3300 	strd	r3, r3, [r0]
 8003066:	6083      	str	r3, [r0, #8]
 8003068:	8181      	strh	r1, [r0, #12]
 800306a:	6643      	str	r3, [r0, #100]	; 0x64
 800306c:	81c2      	strh	r2, [r0, #14]
 800306e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003072:	6183      	str	r3, [r0, #24]
 8003074:	4619      	mov	r1, r3
 8003076:	2208      	movs	r2, #8
 8003078:	305c      	adds	r0, #92	; 0x5c
 800307a:	f7ff fdcc 	bl	8002c16 <memset>
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <std+0x38>)
 8003080:	6263      	str	r3, [r4, #36]	; 0x24
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <std+0x3c>)
 8003084:	62a3      	str	r3, [r4, #40]	; 0x28
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <std+0x40>)
 8003088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <std+0x44>)
 800308c:	6224      	str	r4, [r4, #32]
 800308e:	6323      	str	r3, [r4, #48]	; 0x30
 8003090:	bd10      	pop	{r4, pc}
 8003092:	bf00      	nop
 8003094:	08003c5d 	.word	0x08003c5d
 8003098:	08003c7f 	.word	0x08003c7f
 800309c:	08003cb7 	.word	0x08003cb7
 80030a0:	08003cdb 	.word	0x08003cdb

080030a4 <_cleanup_r>:
 80030a4:	4901      	ldr	r1, [pc, #4]	; (80030ac <_cleanup_r+0x8>)
 80030a6:	f000 b885 	b.w	80031b4 <_fwalk_reent>
 80030aa:	bf00      	nop
 80030ac:	08003009 	.word	0x08003009

080030b0 <__sfmoreglue>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	1e4a      	subs	r2, r1, #1
 80030b4:	2568      	movs	r5, #104	; 0x68
 80030b6:	4355      	muls	r5, r2
 80030b8:	460e      	mov	r6, r1
 80030ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030be:	f000 f949 	bl	8003354 <_malloc_r>
 80030c2:	4604      	mov	r4, r0
 80030c4:	b140      	cbz	r0, 80030d8 <__sfmoreglue+0x28>
 80030c6:	2100      	movs	r1, #0
 80030c8:	e9c0 1600 	strd	r1, r6, [r0]
 80030cc:	300c      	adds	r0, #12
 80030ce:	60a0      	str	r0, [r4, #8]
 80030d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030d4:	f7ff fd9f 	bl	8002c16 <memset>
 80030d8:	4620      	mov	r0, r4
 80030da:	bd70      	pop	{r4, r5, r6, pc}

080030dc <__sinit>:
 80030dc:	6983      	ldr	r3, [r0, #24]
 80030de:	b510      	push	{r4, lr}
 80030e0:	4604      	mov	r4, r0
 80030e2:	bb33      	cbnz	r3, 8003132 <__sinit+0x56>
 80030e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80030e8:	6503      	str	r3, [r0, #80]	; 0x50
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <__sinit+0x58>)
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <__sinit+0x5c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6282      	str	r2, [r0, #40]	; 0x28
 80030f2:	4298      	cmp	r0, r3
 80030f4:	bf04      	itt	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	6183      	streq	r3, [r0, #24]
 80030fa:	f000 f81f 	bl	800313c <__sfp>
 80030fe:	6060      	str	r0, [r4, #4]
 8003100:	4620      	mov	r0, r4
 8003102:	f000 f81b 	bl	800313c <__sfp>
 8003106:	60a0      	str	r0, [r4, #8]
 8003108:	4620      	mov	r0, r4
 800310a:	f000 f817 	bl	800313c <__sfp>
 800310e:	2200      	movs	r2, #0
 8003110:	60e0      	str	r0, [r4, #12]
 8003112:	2104      	movs	r1, #4
 8003114:	6860      	ldr	r0, [r4, #4]
 8003116:	f7ff ffa1 	bl	800305c <std>
 800311a:	2201      	movs	r2, #1
 800311c:	2109      	movs	r1, #9
 800311e:	68a0      	ldr	r0, [r4, #8]
 8003120:	f7ff ff9c 	bl	800305c <std>
 8003124:	2202      	movs	r2, #2
 8003126:	2112      	movs	r1, #18
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	f7ff ff97 	bl	800305c <std>
 800312e:	2301      	movs	r3, #1
 8003130:	61a3      	str	r3, [r4, #24]
 8003132:	bd10      	pop	{r4, pc}
 8003134:	08003f60 	.word	0x08003f60
 8003138:	080030a5 	.word	0x080030a5

0800313c <__sfp>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <__sfp+0x70>)
 8003140:	681e      	ldr	r6, [r3, #0]
 8003142:	69b3      	ldr	r3, [r6, #24]
 8003144:	4607      	mov	r7, r0
 8003146:	b913      	cbnz	r3, 800314e <__sfp+0x12>
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ffc7 	bl	80030dc <__sinit>
 800314e:	3648      	adds	r6, #72	; 0x48
 8003150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003154:	3b01      	subs	r3, #1
 8003156:	d503      	bpl.n	8003160 <__sfp+0x24>
 8003158:	6833      	ldr	r3, [r6, #0]
 800315a:	b133      	cbz	r3, 800316a <__sfp+0x2e>
 800315c:	6836      	ldr	r6, [r6, #0]
 800315e:	e7f7      	b.n	8003150 <__sfp+0x14>
 8003160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003164:	b16d      	cbz	r5, 8003182 <__sfp+0x46>
 8003166:	3468      	adds	r4, #104	; 0x68
 8003168:	e7f4      	b.n	8003154 <__sfp+0x18>
 800316a:	2104      	movs	r1, #4
 800316c:	4638      	mov	r0, r7
 800316e:	f7ff ff9f 	bl	80030b0 <__sfmoreglue>
 8003172:	6030      	str	r0, [r6, #0]
 8003174:	2800      	cmp	r0, #0
 8003176:	d1f1      	bne.n	800315c <__sfp+0x20>
 8003178:	230c      	movs	r3, #12
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4604      	mov	r4, r0
 800317e:	4620      	mov	r0, r4
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <__sfp+0x74>)
 8003184:	6665      	str	r5, [r4, #100]	; 0x64
 8003186:	e9c4 5500 	strd	r5, r5, [r4]
 800318a:	60a5      	str	r5, [r4, #8]
 800318c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003190:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003194:	2208      	movs	r2, #8
 8003196:	4629      	mov	r1, r5
 8003198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800319c:	f7ff fd3b 	bl	8002c16 <memset>
 80031a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031a8:	e7e9      	b.n	800317e <__sfp+0x42>
 80031aa:	bf00      	nop
 80031ac:	08003f60 	.word	0x08003f60
 80031b0:	ffff0001 	.word	0xffff0001

080031b4 <_fwalk_reent>:
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4680      	mov	r8, r0
 80031ba:	4689      	mov	r9, r1
 80031bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031c0:	2600      	movs	r6, #0
 80031c2:	b914      	cbnz	r4, 80031ca <_fwalk_reent+0x16>
 80031c4:	4630      	mov	r0, r6
 80031c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80031ce:	3f01      	subs	r7, #1
 80031d0:	d501      	bpl.n	80031d6 <_fwalk_reent+0x22>
 80031d2:	6824      	ldr	r4, [r4, #0]
 80031d4:	e7f5      	b.n	80031c2 <_fwalk_reent+0xe>
 80031d6:	89ab      	ldrh	r3, [r5, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d907      	bls.n	80031ec <_fwalk_reent+0x38>
 80031dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031e0:	3301      	adds	r3, #1
 80031e2:	d003      	beq.n	80031ec <_fwalk_reent+0x38>
 80031e4:	4629      	mov	r1, r5
 80031e6:	4640      	mov	r0, r8
 80031e8:	47c8      	blx	r9
 80031ea:	4306      	orrs	r6, r0
 80031ec:	3568      	adds	r5, #104	; 0x68
 80031ee:	e7ee      	b.n	80031ce <_fwalk_reent+0x1a>

080031f0 <__swhatbuf_r>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	460e      	mov	r6, r1
 80031f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f8:	2900      	cmp	r1, #0
 80031fa:	b096      	sub	sp, #88	; 0x58
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	da07      	bge.n	8003212 <__swhatbuf_r+0x22>
 8003202:	2300      	movs	r3, #0
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	89b3      	ldrh	r3, [r6, #12]
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	d410      	bmi.n	800322e <__swhatbuf_r+0x3e>
 800320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003210:	e00e      	b.n	8003230 <__swhatbuf_r+0x40>
 8003212:	466a      	mov	r2, sp
 8003214:	f000 fd88 	bl	8003d28 <_fstat_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	dbf2      	blt.n	8003202 <__swhatbuf_r+0x12>
 800321c:	9a01      	ldr	r2, [sp, #4]
 800321e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003226:	425a      	negs	r2, r3
 8003228:	415a      	adcs	r2, r3
 800322a:	602a      	str	r2, [r5, #0]
 800322c:	e7ee      	b.n	800320c <__swhatbuf_r+0x1c>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	2000      	movs	r0, #0
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	b016      	add	sp, #88	; 0x58
 8003236:	bd70      	pop	{r4, r5, r6, pc}

08003238 <__smakebuf_r>:
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800323c:	079d      	lsls	r5, r3, #30
 800323e:	4606      	mov	r6, r0
 8003240:	460c      	mov	r4, r1
 8003242:	d507      	bpl.n	8003254 <__smakebuf_r+0x1c>
 8003244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	2301      	movs	r3, #1
 800324e:	6163      	str	r3, [r4, #20]
 8003250:	b002      	add	sp, #8
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	ab01      	add	r3, sp, #4
 8003256:	466a      	mov	r2, sp
 8003258:	f7ff ffca 	bl	80031f0 <__swhatbuf_r>
 800325c:	9900      	ldr	r1, [sp, #0]
 800325e:	4605      	mov	r5, r0
 8003260:	4630      	mov	r0, r6
 8003262:	f000 f877 	bl	8003354 <_malloc_r>
 8003266:	b948      	cbnz	r0, 800327c <__smakebuf_r+0x44>
 8003268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326c:	059a      	lsls	r2, r3, #22
 800326e:	d4ef      	bmi.n	8003250 <__smakebuf_r+0x18>
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e7e3      	b.n	8003244 <__smakebuf_r+0xc>
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <__smakebuf_r+0x7c>)
 800327e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	6020      	str	r0, [r4, #0]
 8003284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	9b00      	ldr	r3, [sp, #0]
 800328c:	6163      	str	r3, [r4, #20]
 800328e:	9b01      	ldr	r3, [sp, #4]
 8003290:	6120      	str	r0, [r4, #16]
 8003292:	b15b      	cbz	r3, 80032ac <__smakebuf_r+0x74>
 8003294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003298:	4630      	mov	r0, r6
 800329a:	f000 fd57 	bl	8003d4c <_isatty_r>
 800329e:	b128      	cbz	r0, 80032ac <__smakebuf_r+0x74>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	431d      	orrs	r5, r3
 80032b0:	81a5      	strh	r5, [r4, #12]
 80032b2:	e7cd      	b.n	8003250 <__smakebuf_r+0x18>
 80032b4:	080030a5 	.word	0x080030a5

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d045      	beq.n	800334c <_free_r+0x94>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f000 fd79 	bl	8003dc2 <__malloc_lock>
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <_free_r+0x98>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f000 bd6f 	b.w	8003dc4 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90c      	bls.n	8003304 <_free_r+0x4c>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf04      	itt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	bf04      	itt	eq
 80032fa:	1852      	addeq	r2, r2, r1
 80032fc:	6022      	streq	r2, [r4, #0]
 80032fe:	6004      	str	r4, [r0, #0]
 8003300:	e7ec      	b.n	80032dc <_free_r+0x24>
 8003302:	4613      	mov	r3, r2
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	b10a      	cbz	r2, 800330c <_free_r+0x54>
 8003308:	42a2      	cmp	r2, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x4a>
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	1858      	adds	r0, r3, r1
 8003310:	42a0      	cmp	r0, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x74>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	4401      	add	r1, r0
 8003318:	1858      	adds	r0, r3, r1
 800331a:	4282      	cmp	r2, r0
 800331c:	6019      	str	r1, [r3, #0]
 800331e:	d1dd      	bne.n	80032dc <_free_r+0x24>
 8003320:	6810      	ldr	r0, [r2, #0]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	4401      	add	r1, r0
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	e7d7      	b.n	80032dc <_free_r+0x24>
 800332c:	d902      	bls.n	8003334 <_free_r+0x7c>
 800332e:	230c      	movs	r3, #12
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	e7d3      	b.n	80032dc <_free_r+0x24>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428a      	cmp	r2, r1
 800333a:	bf04      	itt	eq
 800333c:	6811      	ldreq	r1, [r2, #0]
 800333e:	6852      	ldreq	r2, [r2, #4]
 8003340:	6062      	str	r2, [r4, #4]
 8003342:	bf04      	itt	eq
 8003344:	1809      	addeq	r1, r1, r0
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	605c      	str	r4, [r3, #4]
 800334a:	e7c7      	b.n	80032dc <_free_r+0x24>
 800334c:	bd38      	pop	{r3, r4, r5, pc}
 800334e:	bf00      	nop
 8003350:	200000b8 	.word	0x200000b8

08003354 <_malloc_r>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	1ccd      	adds	r5, r1, #3
 8003358:	f025 0503 	bic.w	r5, r5, #3
 800335c:	3508      	adds	r5, #8
 800335e:	2d0c      	cmp	r5, #12
 8003360:	bf38      	it	cc
 8003362:	250c      	movcc	r5, #12
 8003364:	2d00      	cmp	r5, #0
 8003366:	4606      	mov	r6, r0
 8003368:	db01      	blt.n	800336e <_malloc_r+0x1a>
 800336a:	42a9      	cmp	r1, r5
 800336c:	d903      	bls.n	8003376 <_malloc_r+0x22>
 800336e:	230c      	movs	r3, #12
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	2000      	movs	r0, #0
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	f000 fd24 	bl	8003dc2 <__malloc_lock>
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <_malloc_r+0xac>)
 800337c:	6814      	ldr	r4, [r2, #0]
 800337e:	4621      	mov	r1, r4
 8003380:	b991      	cbnz	r1, 80033a8 <_malloc_r+0x54>
 8003382:	4c20      	ldr	r4, [pc, #128]	; (8003404 <_malloc_r+0xb0>)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	b91b      	cbnz	r3, 8003390 <_malloc_r+0x3c>
 8003388:	4630      	mov	r0, r6
 800338a:	f000 fc57 	bl	8003c3c <_sbrk_r>
 800338e:	6020      	str	r0, [r4, #0]
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f000 fc52 	bl	8003c3c <_sbrk_r>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d124      	bne.n	80033e6 <_malloc_r+0x92>
 800339c:	230c      	movs	r3, #12
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 fd0f 	bl	8003dc4 <__malloc_unlock>
 80033a6:	e7e4      	b.n	8003372 <_malloc_r+0x1e>
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	1b5b      	subs	r3, r3, r5
 80033ac:	d418      	bmi.n	80033e0 <_malloc_r+0x8c>
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d90f      	bls.n	80033d2 <_malloc_r+0x7e>
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	50cd      	str	r5, [r1, r3]
 80033b6:	18cc      	adds	r4, r1, r3
 80033b8:	4630      	mov	r0, r6
 80033ba:	f000 fd03 	bl	8003dc4 <__malloc_unlock>
 80033be:	f104 000b 	add.w	r0, r4, #11
 80033c2:	1d23      	adds	r3, r4, #4
 80033c4:	f020 0007 	bic.w	r0, r0, #7
 80033c8:	1ac3      	subs	r3, r0, r3
 80033ca:	d0d3      	beq.n	8003374 <_malloc_r+0x20>
 80033cc:	425a      	negs	r2, r3
 80033ce:	50e2      	str	r2, [r4, r3]
 80033d0:	e7d0      	b.n	8003374 <_malloc_r+0x20>
 80033d2:	428c      	cmp	r4, r1
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	bf16      	itet	ne
 80033d8:	6063      	strne	r3, [r4, #4]
 80033da:	6013      	streq	r3, [r2, #0]
 80033dc:	460c      	movne	r4, r1
 80033de:	e7eb      	b.n	80033b8 <_malloc_r+0x64>
 80033e0:	460c      	mov	r4, r1
 80033e2:	6849      	ldr	r1, [r1, #4]
 80033e4:	e7cc      	b.n	8003380 <_malloc_r+0x2c>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d005      	beq.n	80033fc <_malloc_r+0xa8>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4630      	mov	r0, r6
 80033f4:	f000 fc22 	bl	8003c3c <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d0cf      	beq.n	800339c <_malloc_r+0x48>
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e7db      	b.n	80033b8 <_malloc_r+0x64>
 8003400:	200000b8 	.word	0x200000b8
 8003404:	200000bc 	.word	0x200000bc

08003408 <__ssputs_r>:
 8003408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	688e      	ldr	r6, [r1, #8]
 800340e:	429e      	cmp	r6, r3
 8003410:	4682      	mov	sl, r0
 8003412:	460c      	mov	r4, r1
 8003414:	4690      	mov	r8, r2
 8003416:	4699      	mov	r9, r3
 8003418:	d837      	bhi.n	800348a <__ssputs_r+0x82>
 800341a:	898a      	ldrh	r2, [r1, #12]
 800341c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003420:	d031      	beq.n	8003486 <__ssputs_r+0x7e>
 8003422:	6825      	ldr	r5, [r4, #0]
 8003424:	6909      	ldr	r1, [r1, #16]
 8003426:	1a6f      	subs	r7, r5, r1
 8003428:	6965      	ldr	r5, [r4, #20]
 800342a:	2302      	movs	r3, #2
 800342c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003430:	fb95 f5f3 	sdiv	r5, r5, r3
 8003434:	f109 0301 	add.w	r3, r9, #1
 8003438:	443b      	add	r3, r7
 800343a:	429d      	cmp	r5, r3
 800343c:	bf38      	it	cc
 800343e:	461d      	movcc	r5, r3
 8003440:	0553      	lsls	r3, r2, #21
 8003442:	d530      	bpl.n	80034a6 <__ssputs_r+0x9e>
 8003444:	4629      	mov	r1, r5
 8003446:	f7ff ff85 	bl	8003354 <_malloc_r>
 800344a:	4606      	mov	r6, r0
 800344c:	b950      	cbnz	r0, 8003464 <__ssputs_r+0x5c>
 800344e:	230c      	movs	r3, #12
 8003450:	f8ca 3000 	str.w	r3, [sl]
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800345a:	81a3      	strh	r3, [r4, #12]
 800345c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003464:	463a      	mov	r2, r7
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	f7ff fbca 	bl	8002c00 <memcpy>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	6126      	str	r6, [r4, #16]
 800347a:	6165      	str	r5, [r4, #20]
 800347c:	443e      	add	r6, r7
 800347e:	1bed      	subs	r5, r5, r7
 8003480:	6026      	str	r6, [r4, #0]
 8003482:	60a5      	str	r5, [r4, #8]
 8003484:	464e      	mov	r6, r9
 8003486:	454e      	cmp	r6, r9
 8003488:	d900      	bls.n	800348c <__ssputs_r+0x84>
 800348a:	464e      	mov	r6, r9
 800348c:	4632      	mov	r2, r6
 800348e:	4641      	mov	r1, r8
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	f000 fc7d 	bl	8003d90 <memmove>
 8003496:	68a3      	ldr	r3, [r4, #8]
 8003498:	1b9b      	subs	r3, r3, r6
 800349a:	60a3      	str	r3, [r4, #8]
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	441e      	add	r6, r3
 80034a0:	6026      	str	r6, [r4, #0]
 80034a2:	2000      	movs	r0, #0
 80034a4:	e7dc      	b.n	8003460 <__ssputs_r+0x58>
 80034a6:	462a      	mov	r2, r5
 80034a8:	f000 fc8d 	bl	8003dc6 <_realloc_r>
 80034ac:	4606      	mov	r6, r0
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d1e2      	bne.n	8003478 <__ssputs_r+0x70>
 80034b2:	6921      	ldr	r1, [r4, #16]
 80034b4:	4650      	mov	r0, sl
 80034b6:	f7ff feff 	bl	80032b8 <_free_r>
 80034ba:	e7c8      	b.n	800344e <__ssputs_r+0x46>

080034bc <_svfiprintf_r>:
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	461d      	mov	r5, r3
 80034c2:	898b      	ldrh	r3, [r1, #12]
 80034c4:	061f      	lsls	r7, r3, #24
 80034c6:	b09d      	sub	sp, #116	; 0x74
 80034c8:	4680      	mov	r8, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4616      	mov	r6, r2
 80034ce:	d50f      	bpl.n	80034f0 <_svfiprintf_r+0x34>
 80034d0:	690b      	ldr	r3, [r1, #16]
 80034d2:	b96b      	cbnz	r3, 80034f0 <_svfiprintf_r+0x34>
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	f7ff ff3d 	bl	8003354 <_malloc_r>
 80034da:	6020      	str	r0, [r4, #0]
 80034dc:	6120      	str	r0, [r4, #16]
 80034de:	b928      	cbnz	r0, 80034ec <_svfiprintf_r+0x30>
 80034e0:	230c      	movs	r3, #12
 80034e2:	f8c8 3000 	str.w	r3, [r8]
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ea:	e0c8      	b.n	800367e <_svfiprintf_r+0x1c2>
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	6163      	str	r3, [r4, #20]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9309      	str	r3, [sp, #36]	; 0x24
 80034f4:	2320      	movs	r3, #32
 80034f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034fa:	2330      	movs	r3, #48	; 0x30
 80034fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003500:	9503      	str	r5, [sp, #12]
 8003502:	f04f 0b01 	mov.w	fp, #1
 8003506:	4637      	mov	r7, r6
 8003508:	463d      	mov	r5, r7
 800350a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800350e:	b10b      	cbz	r3, 8003514 <_svfiprintf_r+0x58>
 8003510:	2b25      	cmp	r3, #37	; 0x25
 8003512:	d13e      	bne.n	8003592 <_svfiprintf_r+0xd6>
 8003514:	ebb7 0a06 	subs.w	sl, r7, r6
 8003518:	d00b      	beq.n	8003532 <_svfiprintf_r+0x76>
 800351a:	4653      	mov	r3, sl
 800351c:	4632      	mov	r2, r6
 800351e:	4621      	mov	r1, r4
 8003520:	4640      	mov	r0, r8
 8003522:	f7ff ff71 	bl	8003408 <__ssputs_r>
 8003526:	3001      	adds	r0, #1
 8003528:	f000 80a4 	beq.w	8003674 <_svfiprintf_r+0x1b8>
 800352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352e:	4453      	add	r3, sl
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	783b      	ldrb	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 809d 	beq.w	8003674 <_svfiprintf_r+0x1b8>
 800353a:	2300      	movs	r3, #0
 800353c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800354c:	931a      	str	r3, [sp, #104]	; 0x68
 800354e:	462f      	mov	r7, r5
 8003550:	2205      	movs	r2, #5
 8003552:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003556:	4850      	ldr	r0, [pc, #320]	; (8003698 <_svfiprintf_r+0x1dc>)
 8003558:	f7fc fe5a 	bl	8000210 <memchr>
 800355c:	9b04      	ldr	r3, [sp, #16]
 800355e:	b9d0      	cbnz	r0, 8003596 <_svfiprintf_r+0xda>
 8003560:	06d9      	lsls	r1, r3, #27
 8003562:	bf44      	itt	mi
 8003564:	2220      	movmi	r2, #32
 8003566:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800356a:	071a      	lsls	r2, r3, #28
 800356c:	bf44      	itt	mi
 800356e:	222b      	movmi	r2, #43	; 0x2b
 8003570:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003574:	782a      	ldrb	r2, [r5, #0]
 8003576:	2a2a      	cmp	r2, #42	; 0x2a
 8003578:	d015      	beq.n	80035a6 <_svfiprintf_r+0xea>
 800357a:	9a07      	ldr	r2, [sp, #28]
 800357c:	462f      	mov	r7, r5
 800357e:	2000      	movs	r0, #0
 8003580:	250a      	movs	r5, #10
 8003582:	4639      	mov	r1, r7
 8003584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003588:	3b30      	subs	r3, #48	; 0x30
 800358a:	2b09      	cmp	r3, #9
 800358c:	d94d      	bls.n	800362a <_svfiprintf_r+0x16e>
 800358e:	b1b8      	cbz	r0, 80035c0 <_svfiprintf_r+0x104>
 8003590:	e00f      	b.n	80035b2 <_svfiprintf_r+0xf6>
 8003592:	462f      	mov	r7, r5
 8003594:	e7b8      	b.n	8003508 <_svfiprintf_r+0x4c>
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <_svfiprintf_r+0x1dc>)
 8003598:	1a80      	subs	r0, r0, r2
 800359a:	fa0b f000 	lsl.w	r0, fp, r0
 800359e:	4318      	orrs	r0, r3
 80035a0:	9004      	str	r0, [sp, #16]
 80035a2:	463d      	mov	r5, r7
 80035a4:	e7d3      	b.n	800354e <_svfiprintf_r+0x92>
 80035a6:	9a03      	ldr	r2, [sp, #12]
 80035a8:	1d11      	adds	r1, r2, #4
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	9103      	str	r1, [sp, #12]
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	db01      	blt.n	80035b6 <_svfiprintf_r+0xfa>
 80035b2:	9207      	str	r2, [sp, #28]
 80035b4:	e004      	b.n	80035c0 <_svfiprintf_r+0x104>
 80035b6:	4252      	negs	r2, r2
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	9207      	str	r2, [sp, #28]
 80035be:	9304      	str	r3, [sp, #16]
 80035c0:	783b      	ldrb	r3, [r7, #0]
 80035c2:	2b2e      	cmp	r3, #46	; 0x2e
 80035c4:	d10c      	bne.n	80035e0 <_svfiprintf_r+0x124>
 80035c6:	787b      	ldrb	r3, [r7, #1]
 80035c8:	2b2a      	cmp	r3, #42	; 0x2a
 80035ca:	d133      	bne.n	8003634 <_svfiprintf_r+0x178>
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	9203      	str	r2, [sp, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bfb8      	it	lt
 80035d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035dc:	3702      	adds	r7, #2
 80035de:	9305      	str	r3, [sp, #20]
 80035e0:	4d2e      	ldr	r5, [pc, #184]	; (800369c <_svfiprintf_r+0x1e0>)
 80035e2:	7839      	ldrb	r1, [r7, #0]
 80035e4:	2203      	movs	r2, #3
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7fc fe12 	bl	8000210 <memchr>
 80035ec:	b138      	cbz	r0, 80035fe <_svfiprintf_r+0x142>
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	fa03 f000 	lsl.w	r0, r3, r0
 80035f6:	9b04      	ldr	r3, [sp, #16]
 80035f8:	4303      	orrs	r3, r0
 80035fa:	3701      	adds	r7, #1
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	7839      	ldrb	r1, [r7, #0]
 8003600:	4827      	ldr	r0, [pc, #156]	; (80036a0 <_svfiprintf_r+0x1e4>)
 8003602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003606:	2206      	movs	r2, #6
 8003608:	1c7e      	adds	r6, r7, #1
 800360a:	f7fc fe01 	bl	8000210 <memchr>
 800360e:	2800      	cmp	r0, #0
 8003610:	d038      	beq.n	8003684 <_svfiprintf_r+0x1c8>
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <_svfiprintf_r+0x1e8>)
 8003614:	bb13      	cbnz	r3, 800365c <_svfiprintf_r+0x1a0>
 8003616:	9b03      	ldr	r3, [sp, #12]
 8003618:	3307      	adds	r3, #7
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	3308      	adds	r3, #8
 8003620:	9303      	str	r3, [sp, #12]
 8003622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003624:	444b      	add	r3, r9
 8003626:	9309      	str	r3, [sp, #36]	; 0x24
 8003628:	e76d      	b.n	8003506 <_svfiprintf_r+0x4a>
 800362a:	fb05 3202 	mla	r2, r5, r2, r3
 800362e:	2001      	movs	r0, #1
 8003630:	460f      	mov	r7, r1
 8003632:	e7a6      	b.n	8003582 <_svfiprintf_r+0xc6>
 8003634:	2300      	movs	r3, #0
 8003636:	3701      	adds	r7, #1
 8003638:	9305      	str	r3, [sp, #20]
 800363a:	4619      	mov	r1, r3
 800363c:	250a      	movs	r5, #10
 800363e:	4638      	mov	r0, r7
 8003640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003644:	3a30      	subs	r2, #48	; 0x30
 8003646:	2a09      	cmp	r2, #9
 8003648:	d903      	bls.n	8003652 <_svfiprintf_r+0x196>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0c8      	beq.n	80035e0 <_svfiprintf_r+0x124>
 800364e:	9105      	str	r1, [sp, #20]
 8003650:	e7c6      	b.n	80035e0 <_svfiprintf_r+0x124>
 8003652:	fb05 2101 	mla	r1, r5, r1, r2
 8003656:	2301      	movs	r3, #1
 8003658:	4607      	mov	r7, r0
 800365a:	e7f0      	b.n	800363e <_svfiprintf_r+0x182>
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4622      	mov	r2, r4
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <_svfiprintf_r+0x1ec>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4640      	mov	r0, r8
 8003668:	f3af 8000 	nop.w
 800366c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003670:	4681      	mov	r9, r0
 8003672:	d1d6      	bne.n	8003622 <_svfiprintf_r+0x166>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	065b      	lsls	r3, r3, #25
 8003678:	f53f af35 	bmi.w	80034e6 <_svfiprintf_r+0x2a>
 800367c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800367e:	b01d      	add	sp, #116	; 0x74
 8003680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003684:	ab03      	add	r3, sp, #12
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4622      	mov	r2, r4
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <_svfiprintf_r+0x1ec>)
 800368c:	a904      	add	r1, sp, #16
 800368e:	4640      	mov	r0, r8
 8003690:	f000 f9c2 	bl	8003a18 <_printf_i>
 8003694:	e7ea      	b.n	800366c <_svfiprintf_r+0x1b0>
 8003696:	bf00      	nop
 8003698:	08003fc4 	.word	0x08003fc4
 800369c:	08003fca 	.word	0x08003fca
 80036a0:	08003fce 	.word	0x08003fce
 80036a4:	00000000 	.word	0x00000000
 80036a8:	08003409 	.word	0x08003409

080036ac <__sfputc_r>:
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	b410      	push	{r4}
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	da08      	bge.n	80036ca <__sfputc_r+0x1e>
 80036b8:	6994      	ldr	r4, [r2, #24]
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	db01      	blt.n	80036c2 <__sfputc_r+0x16>
 80036be:	290a      	cmp	r1, #10
 80036c0:	d103      	bne.n	80036ca <__sfputc_r+0x1e>
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c6:	f7ff bb59 	b.w	8002d7c <__swbuf_r>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	1c58      	adds	r0, r3, #1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	7019      	strb	r1, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__sfputs_r>:
 80036da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036dc:	4606      	mov	r6, r0
 80036de:	460f      	mov	r7, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	d101      	bne.n	80036ec <__sfputs_r+0x12>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e007      	b.n	80036fc <__sfputs_r+0x22>
 80036ec:	463a      	mov	r2, r7
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff ffda 	bl	80036ac <__sfputc_r>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d1f3      	bne.n	80036e4 <__sfputs_r+0xa>
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003700 <_vfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	4617      	mov	r7, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4606      	mov	r6, r0
 800370e:	b118      	cbz	r0, 8003718 <_vfiprintf_r+0x18>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_vfiprintf_r+0x18>
 8003714:	f7ff fce2 	bl	80030dc <__sinit>
 8003718:	4b7c      	ldr	r3, [pc, #496]	; (800390c <_vfiprintf_r+0x20c>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d158      	bne.n	80037d0 <_vfiprintf_r+0xd0>
 800371e:	6874      	ldr	r4, [r6, #4]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	0718      	lsls	r0, r3, #28
 8003724:	d55e      	bpl.n	80037e4 <_vfiprintf_r+0xe4>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05b      	beq.n	80037e4 <_vfiprintf_r+0xe4>
 800372c:	2300      	movs	r3, #0
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	2320      	movs	r3, #32
 8003732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003736:	2330      	movs	r3, #48	; 0x30
 8003738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800373c:	9503      	str	r5, [sp, #12]
 800373e:	f04f 0b01 	mov.w	fp, #1
 8003742:	46b8      	mov	r8, r7
 8003744:	4645      	mov	r5, r8
 8003746:	f815 3b01 	ldrb.w	r3, [r5], #1
 800374a:	b10b      	cbz	r3, 8003750 <_vfiprintf_r+0x50>
 800374c:	2b25      	cmp	r3, #37	; 0x25
 800374e:	d154      	bne.n	80037fa <_vfiprintf_r+0xfa>
 8003750:	ebb8 0a07 	subs.w	sl, r8, r7
 8003754:	d00b      	beq.n	800376e <_vfiprintf_r+0x6e>
 8003756:	4653      	mov	r3, sl
 8003758:	463a      	mov	r2, r7
 800375a:	4621      	mov	r1, r4
 800375c:	4630      	mov	r0, r6
 800375e:	f7ff ffbc 	bl	80036da <__sfputs_r>
 8003762:	3001      	adds	r0, #1
 8003764:	f000 80c2 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800376a:	4453      	add	r3, sl
 800376c:	9309      	str	r3, [sp, #36]	; 0x24
 800376e:	f898 3000 	ldrb.w	r3, [r8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ba 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003778:	2300      	movs	r3, #0
 800377a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	9307      	str	r3, [sp, #28]
 8003786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378a:	931a      	str	r3, [sp, #104]	; 0x68
 800378c:	46a8      	mov	r8, r5
 800378e:	2205      	movs	r2, #5
 8003790:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003794:	485e      	ldr	r0, [pc, #376]	; (8003910 <_vfiprintf_r+0x210>)
 8003796:	f7fc fd3b 	bl	8000210 <memchr>
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	bb78      	cbnz	r0, 80037fe <_vfiprintf_r+0xfe>
 800379e:	06d9      	lsls	r1, r3, #27
 80037a0:	bf44      	itt	mi
 80037a2:	2220      	movmi	r2, #32
 80037a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037a8:	071a      	lsls	r2, r3, #28
 80037aa:	bf44      	itt	mi
 80037ac:	222b      	movmi	r2, #43	; 0x2b
 80037ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037b2:	782a      	ldrb	r2, [r5, #0]
 80037b4:	2a2a      	cmp	r2, #42	; 0x2a
 80037b6:	d02a      	beq.n	800380e <_vfiprintf_r+0x10e>
 80037b8:	9a07      	ldr	r2, [sp, #28]
 80037ba:	46a8      	mov	r8, r5
 80037bc:	2000      	movs	r0, #0
 80037be:	250a      	movs	r5, #10
 80037c0:	4641      	mov	r1, r8
 80037c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c6:	3b30      	subs	r3, #48	; 0x30
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d969      	bls.n	80038a0 <_vfiprintf_r+0x1a0>
 80037cc:	b360      	cbz	r0, 8003828 <_vfiprintf_r+0x128>
 80037ce:	e024      	b.n	800381a <_vfiprintf_r+0x11a>
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <_vfiprintf_r+0x214>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <_vfiprintf_r+0xda>
 80037d6:	68b4      	ldr	r4, [r6, #8]
 80037d8:	e7a2      	b.n	8003720 <_vfiprintf_r+0x20>
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <_vfiprintf_r+0x218>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68f4      	ldreq	r4, [r6, #12]
 80037e2:	e79d      	b.n	8003720 <_vfiprintf_r+0x20>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff fb1a 	bl	8002e20 <__swsetup_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d09d      	beq.n	800372c <_vfiprintf_r+0x2c>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037f4:	b01d      	add	sp, #116	; 0x74
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	46a8      	mov	r8, r5
 80037fc:	e7a2      	b.n	8003744 <_vfiprintf_r+0x44>
 80037fe:	4a44      	ldr	r2, [pc, #272]	; (8003910 <_vfiprintf_r+0x210>)
 8003800:	1a80      	subs	r0, r0, r2
 8003802:	fa0b f000 	lsl.w	r0, fp, r0
 8003806:	4318      	orrs	r0, r3
 8003808:	9004      	str	r0, [sp, #16]
 800380a:	4645      	mov	r5, r8
 800380c:	e7be      	b.n	800378c <_vfiprintf_r+0x8c>
 800380e:	9a03      	ldr	r2, [sp, #12]
 8003810:	1d11      	adds	r1, r2, #4
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	9103      	str	r1, [sp, #12]
 8003816:	2a00      	cmp	r2, #0
 8003818:	db01      	blt.n	800381e <_vfiprintf_r+0x11e>
 800381a:	9207      	str	r2, [sp, #28]
 800381c:	e004      	b.n	8003828 <_vfiprintf_r+0x128>
 800381e:	4252      	negs	r2, r2
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	9207      	str	r2, [sp, #28]
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f898 3000 	ldrb.w	r3, [r8]
 800382c:	2b2e      	cmp	r3, #46	; 0x2e
 800382e:	d10e      	bne.n	800384e <_vfiprintf_r+0x14e>
 8003830:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003834:	2b2a      	cmp	r3, #42	; 0x2a
 8003836:	d138      	bne.n	80038aa <_vfiprintf_r+0x1aa>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003848:	f108 0802 	add.w	r8, r8, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4d33      	ldr	r5, [pc, #204]	; (800391c <_vfiprintf_r+0x21c>)
 8003850:	f898 1000 	ldrb.w	r1, [r8]
 8003854:	2203      	movs	r2, #3
 8003856:	4628      	mov	r0, r5
 8003858:	f7fc fcda 	bl	8000210 <memchr>
 800385c:	b140      	cbz	r0, 8003870 <_vfiprintf_r+0x170>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	fa03 f000 	lsl.w	r0, r3, r0
 8003866:	9b04      	ldr	r3, [sp, #16]
 8003868:	4303      	orrs	r3, r0
 800386a:	f108 0801 	add.w	r8, r8, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f898 1000 	ldrb.w	r1, [r8]
 8003874:	482a      	ldr	r0, [pc, #168]	; (8003920 <_vfiprintf_r+0x220>)
 8003876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800387a:	2206      	movs	r2, #6
 800387c:	f108 0701 	add.w	r7, r8, #1
 8003880:	f7fc fcc6 	bl	8000210 <memchr>
 8003884:	2800      	cmp	r0, #0
 8003886:	d037      	beq.n	80038f8 <_vfiprintf_r+0x1f8>
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <_vfiprintf_r+0x224>)
 800388a:	bb1b      	cbnz	r3, 80038d4 <_vfiprintf_r+0x1d4>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	3307      	adds	r3, #7
 8003890:	f023 0307 	bic.w	r3, r3, #7
 8003894:	3308      	adds	r3, #8
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800389a:	444b      	add	r3, r9
 800389c:	9309      	str	r3, [sp, #36]	; 0x24
 800389e:	e750      	b.n	8003742 <_vfiprintf_r+0x42>
 80038a0:	fb05 3202 	mla	r2, r5, r2, r3
 80038a4:	2001      	movs	r0, #1
 80038a6:	4688      	mov	r8, r1
 80038a8:	e78a      	b.n	80037c0 <_vfiprintf_r+0xc0>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	4619      	mov	r1, r3
 80038b4:	250a      	movs	r5, #10
 80038b6:	4640      	mov	r0, r8
 80038b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038bc:	3a30      	subs	r2, #48	; 0x30
 80038be:	2a09      	cmp	r2, #9
 80038c0:	d903      	bls.n	80038ca <_vfiprintf_r+0x1ca>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0c3      	beq.n	800384e <_vfiprintf_r+0x14e>
 80038c6:	9105      	str	r1, [sp, #20]
 80038c8:	e7c1      	b.n	800384e <_vfiprintf_r+0x14e>
 80038ca:	fb05 2101 	mla	r1, r5, r1, r2
 80038ce:	2301      	movs	r3, #1
 80038d0:	4680      	mov	r8, r0
 80038d2:	e7f0      	b.n	80038b6 <_vfiprintf_r+0x1b6>
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4622      	mov	r2, r4
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <_vfiprintf_r+0x228>)
 80038dc:	a904      	add	r1, sp, #16
 80038de:	4630      	mov	r0, r6
 80038e0:	f3af 8000 	nop.w
 80038e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80038e8:	4681      	mov	r9, r0
 80038ea:	d1d5      	bne.n	8003898 <_vfiprintf_r+0x198>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	065b      	lsls	r3, r3, #25
 80038f0:	f53f af7e 	bmi.w	80037f0 <_vfiprintf_r+0xf0>
 80038f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f6:	e77d      	b.n	80037f4 <_vfiprintf_r+0xf4>
 80038f8:	ab03      	add	r3, sp, #12
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4622      	mov	r2, r4
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <_vfiprintf_r+0x228>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	4630      	mov	r0, r6
 8003904:	f000 f888 	bl	8003a18 <_printf_i>
 8003908:	e7ec      	b.n	80038e4 <_vfiprintf_r+0x1e4>
 800390a:	bf00      	nop
 800390c:	08003f84 	.word	0x08003f84
 8003910:	08003fc4 	.word	0x08003fc4
 8003914:	08003fa4 	.word	0x08003fa4
 8003918:	08003f64 	.word	0x08003f64
 800391c:	08003fca 	.word	0x08003fca
 8003920:	08003fce 	.word	0x08003fce
 8003924:	00000000 	.word	0x00000000
 8003928:	080036db 	.word	0x080036db

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4691      	mov	r9, r2
 8003932:	461f      	mov	r7, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	4293      	cmp	r3, r2
 800393e:	bfb8      	it	lt
 8003940:	4613      	movlt	r3, r2
 8003942:	f8c9 3000 	str.w	r3, [r9]
 8003946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	b112      	cbz	r2, 8003956 <_printf_common+0x2a>
 8003950:	3301      	adds	r3, #1
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003960:	3302      	addmi	r3, #2
 8003962:	f8c9 3000 	strmi.w	r3, [r9]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d107      	bne.n	800397e <_printf_common+0x52>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f8d9 2000 	ldr.w	r2, [r9]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc28      	bgt.n	80039d0 <_printf_common+0xa4>
 800397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	3300      	adds	r3, #0
 8003986:	bf18      	it	ne
 8003988:	2301      	movne	r3, #1
 800398a:	0692      	lsls	r2, r2, #26
 800398c:	d42d      	bmi.n	80039ea <_printf_common+0xbe>
 800398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003992:	4639      	mov	r1, r7
 8003994:	4630      	mov	r0, r6
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d020      	beq.n	80039de <_printf_common+0xb2>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	68e5      	ldr	r5, [r4, #12]
 80039a0:	f8d9 2000 	ldr.w	r2, [r9]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	341a      	adds	r4, #26
 80039c8:	454d      	cmp	r5, r9
 80039ca:	d11a      	bne.n	8003a02 <_printf_common+0xd6>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e008      	b.n	80039e2 <_printf_common+0xb6>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4652      	mov	r2, sl
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d103      	bne.n	80039e6 <_printf_common+0xba>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	3501      	adds	r5, #1
 80039e8:	e7c3      	b.n	8003972 <_printf_common+0x46>
 80039ea:	18e1      	adds	r1, r4, r3
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	2030      	movs	r0, #48	; 0x30
 80039f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f4:	4422      	add	r2, r4
 80039f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fe:	3302      	adds	r3, #2
 8003a00:	e7c5      	b.n	800398e <_printf_common+0x62>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4622      	mov	r2, r4
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0e6      	beq.n	80039de <_printf_common+0xb2>
 8003a10:	f109 0901 	add.w	r9, r9, #1
 8003a14:	e7d8      	b.n	80039c8 <_printf_common+0x9c>
	...

08003a18 <_printf_i>:
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a20:	460c      	mov	r4, r1
 8003a22:	7e09      	ldrb	r1, [r1, #24]
 8003a24:	b085      	sub	sp, #20
 8003a26:	296e      	cmp	r1, #110	; 0x6e
 8003a28:	4617      	mov	r7, r2
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	4698      	mov	r8, r3
 8003a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a30:	f000 80b3 	beq.w	8003b9a <_printf_i+0x182>
 8003a34:	d822      	bhi.n	8003a7c <_printf_i+0x64>
 8003a36:	2963      	cmp	r1, #99	; 0x63
 8003a38:	d036      	beq.n	8003aa8 <_printf_i+0x90>
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x3a>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	f000 80b9 	beq.w	8003bb4 <_printf_i+0x19c>
 8003a42:	2958      	cmp	r1, #88	; 0x58
 8003a44:	f000 8083 	beq.w	8003b4e <_printf_i+0x136>
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a50:	e032      	b.n	8003ab8 <_printf_i+0xa0>
 8003a52:	2964      	cmp	r1, #100	; 0x64
 8003a54:	d001      	beq.n	8003a5a <_printf_i+0x42>
 8003a56:	2969      	cmp	r1, #105	; 0x69
 8003a58:	d1f6      	bne.n	8003a48 <_printf_i+0x30>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	0605      	lsls	r5, r0, #24
 8003a60:	f103 0104 	add.w	r1, r3, #4
 8003a64:	d52a      	bpl.n	8003abc <_printf_i+0xa4>
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0x5e>
 8003a6e:	222d      	movs	r2, #45	; 0x2d
 8003a70:	425b      	negs	r3, r3
 8003a72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a76:	486f      	ldr	r0, [pc, #444]	; (8003c34 <_printf_i+0x21c>)
 8003a78:	220a      	movs	r2, #10
 8003a7a:	e039      	b.n	8003af0 <_printf_i+0xd8>
 8003a7c:	2973      	cmp	r1, #115	; 0x73
 8003a7e:	f000 809d 	beq.w	8003bbc <_printf_i+0x1a4>
 8003a82:	d808      	bhi.n	8003a96 <_printf_i+0x7e>
 8003a84:	296f      	cmp	r1, #111	; 0x6f
 8003a86:	d020      	beq.n	8003aca <_printf_i+0xb2>
 8003a88:	2970      	cmp	r1, #112	; 0x70
 8003a8a:	d1dd      	bne.n	8003a48 <_printf_i+0x30>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	e003      	b.n	8003a9e <_printf_i+0x86>
 8003a96:	2975      	cmp	r1, #117	; 0x75
 8003a98:	d017      	beq.n	8003aca <_printf_i+0xb2>
 8003a9a:	2978      	cmp	r1, #120	; 0x78
 8003a9c:	d1d4      	bne.n	8003a48 <_printf_i+0x30>
 8003a9e:	2378      	movs	r3, #120	; 0x78
 8003aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa4:	4864      	ldr	r0, [pc, #400]	; (8003c38 <_printf_i+0x220>)
 8003aa6:	e055      	b.n	8003b54 <_printf_i+0x13c>
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6011      	str	r1, [r2, #0]
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08c      	b.n	8003bd6 <_printf_i+0x1be>
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6011      	str	r1, [r2, #0]
 8003ac0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac4:	bf18      	it	ne
 8003ac6:	b21b      	sxthne	r3, r3
 8003ac8:	e7cf      	b.n	8003a6a <_printf_i+0x52>
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6010      	str	r0, [r2, #0]
 8003ad2:	0628      	lsls	r0, r5, #24
 8003ad4:	d501      	bpl.n	8003ada <_printf_i+0xc2>
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_printf_i+0xc8>
 8003ada:	0668      	lsls	r0, r5, #25
 8003adc:	d5fb      	bpl.n	8003ad6 <_printf_i+0xbe>
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	4854      	ldr	r0, [pc, #336]	; (8003c34 <_printf_i+0x21c>)
 8003ae2:	296f      	cmp	r1, #111	; 0x6f
 8003ae4:	bf14      	ite	ne
 8003ae6:	220a      	movne	r2, #10
 8003ae8:	2208      	moveq	r2, #8
 8003aea:	2100      	movs	r1, #0
 8003aec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af0:	6865      	ldr	r5, [r4, #4]
 8003af2:	60a5      	str	r5, [r4, #8]
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	f2c0 8095 	blt.w	8003c24 <_printf_i+0x20c>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	f021 0104 	bic.w	r1, r1, #4
 8003b00:	6021      	str	r1, [r4, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <_printf_i+0x16a>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	f040 808e 	bne.w	8003c28 <_printf_i+0x210>
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	2a08      	cmp	r2, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x112>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x112>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b26:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b2a:	ebac 0305 	sub.w	r3, ip, r5
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	f8cd 8000 	str.w	r8, [sp]
 8003b34:	463b      	mov	r3, r7
 8003b36:	aa03      	add	r2, sp, #12
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff fef6 	bl	800392c <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d14d      	bne.n	8003be0 <_printf_i+0x1c8>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b48:	b005      	add	sp, #20
 8003b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b4e:	4839      	ldr	r0, [pc, #228]	; (8003c34 <_printf_i+0x21c>)
 8003b50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	1d1d      	adds	r5, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6015      	str	r5, [r2, #0]
 8003b5e:	060a      	lsls	r2, r1, #24
 8003b60:	d50b      	bpl.n	8003b7a <_printf_i+0x162>
 8003b62:	07ca      	lsls	r2, r1, #31
 8003b64:	bf44      	itt	mi
 8003b66:	f041 0120 	orrmi.w	r1, r1, #32
 8003b6a:	6021      	strmi	r1, [r4, #0]
 8003b6c:	b91b      	cbnz	r3, 8003b76 <_printf_i+0x15e>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	f022 0220 	bic.w	r2, r2, #32
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	e7b7      	b.n	8003aea <_printf_i+0xd2>
 8003b7a:	064d      	lsls	r5, r1, #25
 8003b7c:	bf48      	it	mi
 8003b7e:	b29b      	uxthmi	r3, r3
 8003b80:	e7ef      	b.n	8003b62 <_printf_i+0x14a>
 8003b82:	4665      	mov	r5, ip
 8003b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b88:	fb02 3311 	mls	r3, r2, r1, r3
 8003b8c:	5cc3      	ldrb	r3, [r0, r3]
 8003b8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b92:	460b      	mov	r3, r1
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f5      	bne.n	8003b84 <_printf_i+0x16c>
 8003b98:	e7b9      	b.n	8003b0e <_printf_i+0xf6>
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	6961      	ldr	r1, [r4, #20]
 8003ba0:	1d18      	adds	r0, r3, #4
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	0628      	lsls	r0, r5, #24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0x196>
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0x19c>
 8003bae:	066a      	lsls	r2, r5, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0x192>
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	4665      	mov	r5, ip
 8003bba:	e7b9      	b.n	8003b30 <_printf_i+0x118>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	681d      	ldr	r5, [r3, #0]
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7fc fb21 	bl	8000210 <memchr>
 8003bce:	b108      	cbz	r0, 8003bd4 <_printf_i+0x1bc>
 8003bd0:	1b40      	subs	r0, r0, r5
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bde:	e7a7      	b.n	8003b30 <_printf_i+0x118>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	462a      	mov	r2, r5
 8003be4:	4639      	mov	r1, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0aa      	beq.n	8003b44 <_printf_i+0x12c>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d413      	bmi.n	8003c1c <_printf_i+0x204>
 8003bf4:	68e0      	ldr	r0, [r4, #12]
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	bfb8      	it	lt
 8003bfc:	4618      	movlt	r0, r3
 8003bfe:	e7a3      	b.n	8003b48 <_printf_i+0x130>
 8003c00:	2301      	movs	r3, #1
 8003c02:	464a      	mov	r2, r9
 8003c04:	4639      	mov	r1, r7
 8003c06:	4630      	mov	r0, r6
 8003c08:	47c0      	blx	r8
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d09a      	beq.n	8003b44 <_printf_i+0x12c>
 8003c0e:	3501      	adds	r5, #1
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9a03      	ldr	r2, [sp, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	dcf2      	bgt.n	8003c00 <_printf_i+0x1e8>
 8003c1a:	e7eb      	b.n	8003bf4 <_printf_i+0x1dc>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	f104 0919 	add.w	r9, r4, #25
 8003c22:	e7f5      	b.n	8003c10 <_printf_i+0x1f8>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ac      	bne.n	8003b82 <_printf_i+0x16a>
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c32:	e76c      	b.n	8003b0e <_printf_i+0xf6>
 8003c34:	08003fd5 	.word	0x08003fd5
 8003c38:	08003fe6 	.word	0x08003fe6

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4c06      	ldr	r4, [pc, #24]	; (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4605      	mov	r5, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	f7fe fe42 	bl	80028d0 <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000144 	.word	0x20000144

08003c5c <__sread>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	f000 f8d6 	bl	8003e14 <_read_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	bfab      	itete	ge
 8003c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c70:	181b      	addge	r3, r3, r0
 8003c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c76:	bfac      	ite	ge
 8003c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7a:	81a3      	strhlt	r3, [r4, #12]
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <__swrite>:
 8003c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	461f      	mov	r7, r3
 8003c84:	898b      	ldrh	r3, [r1, #12]
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	4605      	mov	r5, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	d505      	bpl.n	8003c9c <__swrite+0x1e>
 8003c90:	2302      	movs	r3, #2
 8003c92:	2200      	movs	r2, #0
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	f000 f868 	bl	8003d6c <_lseek_r>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	4632      	mov	r2, r6
 8003caa:	463b      	mov	r3, r7
 8003cac:	4628      	mov	r0, r5
 8003cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	f000 b817 	b.w	8003ce4 <_write_r>

08003cb6 <__sseek>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	460c      	mov	r4, r1
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 f855 	bl	8003d6c <_lseek_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	bf15      	itete	ne
 8003cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd2:	81a3      	strheq	r3, [r4, #12]
 8003cd4:	bf18      	it	ne
 8003cd6:	81a3      	strhne	r3, [r4, #12]
 8003cd8:	bd10      	pop	{r4, pc}

08003cda <__sclose>:
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 b813 	b.w	8003d08 <_close_r>
	...

08003ce4 <_write_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c07      	ldr	r4, [pc, #28]	; (8003d04 <_write_r+0x20>)
 8003ce8:	4605      	mov	r5, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fe fd9b 	bl	800282e <_write>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_write_r+0x1e>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_write_r+0x1e>
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000144 	.word	0x20000144

08003d08 <_close_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4c06      	ldr	r4, [pc, #24]	; (8003d24 <_close_r+0x1c>)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4605      	mov	r5, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	f7fe fda7 	bl	8002866 <_close>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_close_r+0x1a>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_close_r+0x1a>
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000144 	.word	0x20000144

08003d28 <_fstat_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4c07      	ldr	r4, [pc, #28]	; (8003d48 <_fstat_r+0x20>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	f7fe fda2 	bl	800287e <_fstat>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	d102      	bne.n	8003d44 <_fstat_r+0x1c>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	b103      	cbz	r3, 8003d44 <_fstat_r+0x1c>
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	20000144 	.word	0x20000144

08003d4c <_isatty_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4c06      	ldr	r4, [pc, #24]	; (8003d68 <_isatty_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4605      	mov	r5, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	f7fe fda1 	bl	800289e <_isatty>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_isatty_r+0x1a>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_isatty_r+0x1a>
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	20000144 	.word	0x20000144

08003d6c <_lseek_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4c07      	ldr	r4, [pc, #28]	; (8003d8c <_lseek_r+0x20>)
 8003d70:	4605      	mov	r5, r0
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	2200      	movs	r2, #0
 8003d78:	6022      	str	r2, [r4, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7fe fd9a 	bl	80028b4 <_lseek>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_lseek_r+0x1e>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_lseek_r+0x1e>
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	20000144 	.word	0x20000144

08003d90 <memmove>:
 8003d90:	4288      	cmp	r0, r1
 8003d92:	b510      	push	{r4, lr}
 8003d94:	eb01 0302 	add.w	r3, r1, r2
 8003d98:	d807      	bhi.n	8003daa <memmove+0x1a>
 8003d9a:	1e42      	subs	r2, r0, #1
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	d00a      	beq.n	8003db6 <memmove+0x26>
 8003da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003da8:	e7f8      	b.n	8003d9c <memmove+0xc>
 8003daa:	4283      	cmp	r3, r0
 8003dac:	d9f5      	bls.n	8003d9a <memmove+0xa>
 8003dae:	1881      	adds	r1, r0, r2
 8003db0:	1ad2      	subs	r2, r2, r3
 8003db2:	42d3      	cmn	r3, r2
 8003db4:	d100      	bne.n	8003db8 <memmove+0x28>
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003dc0:	e7f7      	b.n	8003db2 <memmove+0x22>

08003dc2 <__malloc_lock>:
 8003dc2:	4770      	bx	lr

08003dc4 <__malloc_unlock>:
 8003dc4:	4770      	bx	lr

08003dc6 <_realloc_r>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	4607      	mov	r7, r0
 8003dca:	4614      	mov	r4, r2
 8003dcc:	460e      	mov	r6, r1
 8003dce:	b921      	cbnz	r1, 8003dda <_realloc_r+0x14>
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dd6:	f7ff babd 	b.w	8003354 <_malloc_r>
 8003dda:	b922      	cbnz	r2, 8003de6 <_realloc_r+0x20>
 8003ddc:	f7ff fa6c 	bl	80032b8 <_free_r>
 8003de0:	4625      	mov	r5, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de6:	f000 f827 	bl	8003e38 <_malloc_usable_size_r>
 8003dea:	42a0      	cmp	r0, r4
 8003dec:	d20f      	bcs.n	8003e0e <_realloc_r+0x48>
 8003dee:	4621      	mov	r1, r4
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7ff faaf 	bl	8003354 <_malloc_r>
 8003df6:	4605      	mov	r5, r0
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d0f2      	beq.n	8003de2 <_realloc_r+0x1c>
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4622      	mov	r2, r4
 8003e00:	f7fe fefe 	bl	8002c00 <memcpy>
 8003e04:	4631      	mov	r1, r6
 8003e06:	4638      	mov	r0, r7
 8003e08:	f7ff fa56 	bl	80032b8 <_free_r>
 8003e0c:	e7e9      	b.n	8003de2 <_realloc_r+0x1c>
 8003e0e:	4635      	mov	r5, r6
 8003e10:	e7e7      	b.n	8003de2 <_realloc_r+0x1c>
	...

08003e14 <_read_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4c07      	ldr	r4, [pc, #28]	; (8003e34 <_read_r+0x20>)
 8003e18:	4605      	mov	r5, r0
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7fe fce6 	bl	80027f4 <_read>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_read_r+0x1e>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_read_r+0x1e>
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	20000144 	.word	0x20000144

08003e38 <_malloc_usable_size_r>:
 8003e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3c:	1f18      	subs	r0, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfbc      	itt	lt
 8003e42:	580b      	ldrlt	r3, [r1, r0]
 8003e44:	18c0      	addlt	r0, r0, r3
 8003e46:	4770      	bx	lr

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
