
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000328c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f8  080034f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003500  08003500  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  0800357c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  0800357c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ea5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c2b  00000000  00000000  00029f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c99  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ef4  00000000  00000000  000433e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086f0b  00000000  00000000  0004c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d31e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a30  00000000  00000000  000d325c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003414 	.word	0x08003414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003414 	.word	0x08003414

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <DMA_InterruptHandler>:

/*
 * @brief: interrupt handler for DMA
 */
void DMA_InterruptHandler(DMA_Handle_t *dmaHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* half transfer interrupt handling */
	if (dmaHandle->DMA_Stream->CR & DMA_IT_HT)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d010      	beq.n	80005e8 <DMA_InterruptHandler+0x38>
	{
		// disable interrupts
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_HT);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f022 0208 	bic.w	r2, r2, #8
 80005d4:	601a      	str	r2, [r3, #0]

		// invoke calback for processing
		if (dmaHandle->HalfXferCplCallback != NULL)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d033      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		{
			dmaHandle->HalfXferCplCallback(dmaHandle);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	4798      	blx	r3
		if (dmaHandle->XferErrorCallback != NULL)
		{
			dmaHandle->XferErrorCallback(dmaHandle);
		}
	}
}
 80005e6:	e02e      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TC)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <DMA_InterruptHandler+0x68>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TC);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f022 0210 	bic.w	r2, r2, #16
 8000604:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferCplCallback != NULL)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01b      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferCplCallback(dmaHandle);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	4798      	blx	r3
}
 8000616:	e016      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00f      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TE);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f022 0204 	bic.w	r2, r2, #4
 8000634:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferErrorCallback != NULL)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferErrorCallback(dmaHandle);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	4798      	blx	r3
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <I2C_PeripheralClkControl>:
/* Function definitions -----------------------------------------------------*/

/*
 * @I2C_PeripheralClkControl: Enables the peripheral clock for a respective I2C interface
 */
void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <I2C_PeripheralClkControl+0x54>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 800066c:	e014      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <I2C_PeripheralClkControl+0x5c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000682:	e009      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <I2C_PeripheralClkControl+0x60>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d105      	bne.n	8000698 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40005400 	.word	0x40005400
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40005800 	.word	0x40005800
 80006b0:	40005c00 	.word	0x40005c00

080006b4 <I2C_Init>:

/*
 * @I2C_Init: Populates I2C struct
 */
void I2C_Init(I2C_Handle_t *I2C_handle) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

	// initializing static pointer
	I2C_handle_p = I2C_handle;
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <I2C_Init+0xe4>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffc2 	bl	8000650 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4619      	mov	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000706:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <I2C_Init+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <I2C_Init+0xec>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	0c9b      	lsrs	r3, r3, #18
 8000714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000718:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6859      	ldr	r1, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	430a      	orrs	r2, r1
 8000728:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <I2C_Init+0xf0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d10f      	bne.n	8000754 <I2C_Init+0xa0>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <I2C_Init+0xe8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	69d9      	ldr	r1, [r3, #28]
 800074a:	897a      	ldrh	r2, [r7, #10]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <I2C_Init+0xf0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d80f      	bhi.n	800077e <I2C_Init+0xca>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a19      	ldr	r1, [r3, #32]
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <I2C_Init+0xe8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <I2C_Init+0xec>)
 800076a:	fba2 2303 	umull	r2, r3, r2, r3
 800076e:	0c9b      	lsrs	r3, r3, #18
 8000770:	3301      	adds	r3, #1
 8000772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000090 	.word	0x20000090
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	431bde83 	.word	0x431bde83
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	887b      	ldrh	r3, [r7, #2]
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <GetFlagStatus+0x1e>
	}
	return FLAG_NOT_SET;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <I2C_WaitForCompletion>:

static void I2C_WaitForCompletion(I2C_TypeDef *pI2Cx, uint16_t i2cRegister)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
	while (!GetFlagStatus(pI2Cx, i2cRegister) && WaitTillTimeout(5));
 800081e:	bf00      	nop
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffbf 	bl	80007a8 <GetFlagStatus>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d105      	bne.n	800083c <I2C_WaitForCompletion+0x2a>
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fb9f 	bl	8000f74 <WaitTillTimeout>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f1      	bne.n	8000820 <I2C_WaitForCompletion+0xe>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <I2C_WriteSlaveAddress>:

/*
 * @I2C_WriteSlaveAddress: Writes slave address to DR
 */
static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <I2C_WriteSlaveAddress+0x28>
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	e003      	b.n	8000874 <I2C_WriteSlaveAddress+0x30>
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	611a      	str	r2, [r3, #16]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <I2C_ClearADDRFlag>:

/*
 * @I2C_ClearADDRFlag: Reads SR1 and SR2 registers to clear ADDR flag
 * During RXing: when 2 bytes are to be read, reset the ACK and set the POS bit
 */
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7b1b      	ldrb	r3, [r3, #12]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b02      	cmp	r3, #2
 800089e:	d113      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
	{
		if (I2C_handle_p->rxBufferLength == 2)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7edb      	ldrb	r3, [r3, #27]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d10d      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
		{
			I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f813 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008c6:	601a      	str	r2, [r3, #0]
		}
	}

	dummyRead = pI2Cx->SR1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	60fb      	str	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000090 	.word	0x20000090

080008e0 <I2C_ControlAcking>:

/*
 * @I2C_ControlAcking: enables/disables the ACK bit for I2C
 */
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	if (enable)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008fe:	e005      	b.n	800090c <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_I2C_StartInterrupt>:
/*
 * @HAL_I2C_StartInterrupt: Generates the START condition and enables I2C control bits
 * usage: called to "enable" I2C transaction via interrupts
 */
I2C_State HAL_I2C_StartInterrupt(I2C_State expectedState, uint8_t txSize, uint8_t rxSize)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	char *command = expectedState == I2C_TX_BUSY ? "TXing...\n" : "RXing...\n";
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d101      	bne.n	8000934 <HAL_I2C_StartInterrupt+0x1c>
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_I2C_StartInterrupt+0x64>)
 8000932:	e000      	b.n	8000936 <HAL_I2C_StartInterrupt+0x1e>
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_I2C_StartInterrupt+0x68>)
 8000936:	60fb      	str	r3, [r7, #12]

	if (I2C_handle_p->I2C_State == I2C_INIT)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d112      	bne.n	800096a <HAL_I2C_StartInterrupt+0x52>
	{
		// set transaction state
		I2C_handle_p->I2C_State = expectedState;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	731a      	strb	r2, [r3, #12]

		// set respective buffer sizes
		I2C_handle_p->txBufferLength = txSize;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	769a      	strb	r2, [r3, #26]
		I2C_handle_p->rxBufferLength = rxSize;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	797a      	ldrb	r2, [r7, #5]
 800095a:	76da      	strb	r2, [r3, #27]

		// generate start condition
		I2C_GenerateStartCondition(I2C_handle_p);
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff36 	bl	80007d2 <I2C_GenerateStartCondition>

		// enable i2c control bits
		I2C_SetCtrlBits();
 8000966:	f000 fae7 	bl	8000f38 <I2C_SetCtrlBits>
	}
	return I2C_handle_p->I2C_State;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	b2db      	uxtb	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	0800342c 	.word	0x0800342c
 8000980:	08003438 	.word	0x08003438
 8000984:	20000090 	.word	0x20000090

08000988 <I2C1_EV_IRQHandler>:

/*
 * I2C1_EV_IRQHandler: Interrupt handler for I2C
 */
void I2C1_EV_IRQHandler (void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 800098e:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	0a9b      	lsrs	r3, r3, #10
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;			// stores register values

	if (eventInterrupt)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80c1 	beq.w	8000b3c <I2C1_EV_IRQHandler+0x1b4>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	717b      	strb	r3, [r7, #5]
		if (temp)
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d018      	beq.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	7b1b      	ldrb	r3, [r3, #12]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d106      	bne.n	80009ea <I2C1_EV_IRQHandler+0x62>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 80009dc:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff2e 	bl	8000844 <I2C_WriteSlaveAddress>
 80009e8:	e00b      	b.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	7b1b      	ldrb	r3, [r3, #12]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d105      	bne.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff21 	bl	8000844 <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 8000a02:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	085b      	lsrs	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a14:	797b      	ldrb	r3, [r7, #5]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <I2C1_EV_IRQHandler+0x9e>
		{
			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff33 	bl	800088c <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	09db      	lsrs	r3, r3, #7
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	7b1b      	ldrb	r3, [r3, #12]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d101      	bne.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
			{
				I2C_TXE_Interrupt();
 8000a50:	f000 f8f8 	bl	8000c44 <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000a66:	797b      	ldrb	r3, [r7, #5]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d058      	beq.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)					// TXE=1, BTF=1
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d10d      	bne.n	8000ab2 <I2C1_EV_IRQHandler+0x12a>
			{
				if (!I2C_handle_p->txBufferLength)						// if there are no more TX bytes to be sent
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7e9b      	ldrb	r3, [r3, #26]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14c      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				{
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fea3 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_StopTransmission();
 8000aac:	f000 fa24 	bl	8000ef8 <I2C_StopTransmission>
					I2C_StopTransmission();
				}
			}
		}
	}
}
 8000ab0:	e044      	b.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d13e      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				if (I2C_handle_p->rxBufferLength == 2)
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	7edb      	ldrb	r3, [r3, #27]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d138      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe8f 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read second last byte
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6918      	ldr	r0, [r3, #16]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6959      	ldr	r1, [r3, #20]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	7e1a      	ldrb	r2, [r3, #24]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	1c54      	adds	r4, r2, #1
 8000aec:	b2e4      	uxtb	r4, r4
 8000aee:	761c      	strb	r4, [r3, #24]
 8000af0:	4613      	mov	r3, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	b2c2      	uxtb	r2, r0
 8000af6:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	7eda      	ldrb	r2, [r3, #27]
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	3a01      	subs	r2, #1
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read last byte
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6918      	ldr	r0, [r3, #16]
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6959      	ldr	r1, [r3, #20]
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	7e1a      	ldrb	r2, [r3, #24]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	1c54      	adds	r4, r2, #1
 8000b1e:	b2e4      	uxtb	r4, r4
 8000b20:	761c      	strb	r4, [r3, #24]
 8000b22:	4613      	mov	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	b2c2      	uxtb	r2, r0
 8000b28:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	7eda      	ldrb	r2, [r3, #27]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	3a01      	subs	r2, #1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8000b38:	f000 f9de 	bl	8000ef8 <I2C_StopTransmission>
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000090 	.word	0x20000090

08000b48 <I2C_HandleInterruptEvents>:

/*
 * @I2C_HandleInterruptEvents: Called upon getting an error interrupt - resets the bit and generate stop condition
 */
void I2C_HandleInterruptEvents (uint16_t errorRegister, I2C_ErrorEvents errorEvent)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	717b      	strb	r3, [r7, #5]
	I2C_handle_p->pI2Cx->SR1 &= ~(errorRegister);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	88f9      	ldrh	r1, [r7, #6]
 8000b62:	43c9      	mvns	r1, r1
 8000b64:	400a      	ands	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]

	if (errorEvent == I2C_ERROR_AF)
 8000b68:	797b      	ldrb	r3, [r7, #5]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <I2C_HandleInterruptEvents+0x34>
	{
//		printf ("Received ACK failure...\n");
		I2C_StopTransmission();
 8000b6e:	f000 f9c3 	bl	8000ef8 <I2C_StopTransmission>
		I2C_GenerateStopCondition(I2C_handle_p);
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe3b 	bl	80007f2 <I2C_GenerateStopCondition>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000090 	.word	0x20000090

08000b88 <I2C1_ER_IRQHandler>:

/*
 * @I2C1_ER_IRQHandler: Interrupt handler for I2C errors
 */
void I2C1_ER_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
//	printf ("ERROR IRQ handler...\n");
	I2C_handle_p->I2C_State = I2C_ERROR;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2204      	movs	r2, #4
 8000b94:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
	if (errorInterrupt)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d044      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
	{
		if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF)
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <I2C1_ER_IRQHandler+0x42>
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_AF);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bc4:	f7ff ffc0 	bl	8000b48 <I2C_HandleInterruptEvents>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
		}
	}
}
 8000bc8:	e036      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_OVR)
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <I2C1_ER_IRQHandler+0x5e>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_OVR);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000be0:	f7ff ffb2 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000be4:	e028      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_PECERR)
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <I2C1_ER_IRQHandler+0x7a>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_PECERR);
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bfc:	f7ff ffa4 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c00:	e01a      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TIMEOUT)
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <I2C1_ER_IRQHandler+0x96>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_TIMEOUT);
 8000c12:	2103      	movs	r1, #3
 8000c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c18:	f7ff ff96 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c1c:	e00c      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c34:	f7ff ff88 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000090 	.word	0x20000090

08000c44 <I2C_TXE_Interrupt>:
/*
 * @I2C_TXE_Interrupt: Writes the respective byte to the DR
 * data register = empty = TXE
 */
void I2C_TXE_Interrupt (void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	7e9b      	ldrb	r3, [r3, #26]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d011      	beq.n	8000c78 <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	1c51      	adds	r1, r2, #1
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	7019      	strb	r1, [r3, #0]
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	7e9a      	ldrb	r2, [r3, #26]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	3a01      	subs	r2, #1
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	769a      	strb	r2, [r3, #26]
	}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000090 	.word	0x20000090

08000c88 <HAL_I2C_Master_Transmit>:

/*
 * HAL_I2C_Master_Transmit: polling approach for TXing bytes to the slave
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fd9b 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdb5 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fdca 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdab 	bl	8000812 <I2C_WaitForCompletion>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fde3 	bl	800088c <I2C_ClearADDRFlag>

	// write to the SDA line
	for (; size > 0; size--)
 8000cc6:	e015      	b.n	8000cf4 <HAL_I2C_Master_Transmit+0x6c>
	{
		// making sure data register is empty prior to writing to it
		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_TXE);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd9f 	bl	8000812 <I2C_WaitForCompletion>

		I2C_handle->pI2Cx->DR = *data++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	611a      	str	r2, [r3, #16]

		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd92 	bl	8000812 <I2C_WaitForCompletion>
	for (; size > 0; size--)
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <HAL_I2C_Master_Transmit+0x40>
	}
	I2C_GenerateStopCondition(I2C_handle);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fd79 	bl	80007f2 <I2C_GenerateStopCondition>

	return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_I2C_Master_Receive>:

/*
 * @HAL_I2C_Master_Receive: Polling approach for RXing bytes from slave
 */
void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size, uint8_t startIndex)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	4611      	mov	r1, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	460b      	mov	r3, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fd56 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd70 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000d32:	2101      	movs	r1, #1
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fd85 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd66 	bl	8000812 <I2C_WaitForCompletion>

	switch (size) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <HAL_I2C_Master_Receive+0x48>
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d00f      	beq.n	8000d70 <HAL_I2C_Master_Receive+0x66>
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Master_Receive+0x8e>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fdc1 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd92 	bl	800088c <I2C_ClearADDRFlag>
			I2C_GenerateStopCondition(I2C_handle);			// generate STOP condition
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fd42 	bl	80007f2 <I2C_GenerateStopCondition>
			break;
 8000d6e:	e01e      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdb2 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d8a:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd7b 	bl	800088c <I2C_ClearADDRFlag>
			break;
 8000d96:	e00a      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd9e 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd6f 	bl	800088c <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 8000dae:	e09b      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
		if (size <= 3) {
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	f200 8086 	bhi.w	8000ec4 <HAL_I2C_Master_Receive+0x1ba>
			if (size == 1) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d11f      	bne.n	8000dfe <HAL_I2C_Master_Receive+0xf4>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd8b 	bl	80008e0 <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd5c 	bl	800088c <I2C_ClearADDRFlag>

					// wait till RXNE = 1 (Data is sent from SR to DR)
					I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd19 	bl	8000812 <I2C_WaitForCompletion>

					// generate stop
					I2C_GenerateStopCondition(I2C_handle);
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fd06 	bl	80007f2 <I2C_GenerateStopCondition>

					// read data
					rxBuffer[startIndex++] = I2C_handle->pI2Cx->DR;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	1c59      	adds	r1, r3, #1
 8000df0:	71b9      	strb	r1, [r7, #6]
 8000df2:	4619      	mov	r1, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	440b      	add	r3, r1
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e074      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>

			}

			else if (size == 2) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d122      	bne.n	8000e4a <HAL_I2C_Master_Receive+0x140>
				// wait till BTF is set (last byte is received) - shift reg=1, DR=1
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd01 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fcee 	bl	80007f2 <I2C_GenerateStopCondition>

//				I2C_handle->pRxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
				rxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	71b9      	strb	r1, [r7, #6]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	440b      	add	r3, r1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
				--size;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]

				rxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6919      	ldr	r1, [r3, #16]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
//				I2C_handle->pRxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
				--size;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	e04e      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}
			else if (size == 3) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d14b      	bne.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
				// wait for the second last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fcdb 	bl	8000812 <I2C_WaitForCompletion>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd3c 	bl	80008e0 <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]

				size--;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]

				// wait for the last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2104      	movs	r1, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcc3 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff fcb0 	bl	80007f2 <I2C_GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]

				size--;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]

				size--;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e011      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}

		}
		// > 3 bytes
		else {
			I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fca1 	bl	8000812 <I2C_WaitForCompletion>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]

			size--;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f af60 	bne.w	8000db0 <HAL_I2C_Master_Receive+0xa6>

		}
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C_StopTransmission>:

/*
 * @I2C_StopTransmission: Disables I2C control bits and sets I2C struct to initial values
 */
static void I2C_StopTransmission(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
//	printf ("Stopping transmission...\n\n");

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f08:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f16:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	731a      	strb	r2, [r3, #12]
//	I2C_handle_p->rxBufferLength = BYTES_PER_TRANSACTION;

	I2C_handle_p->rxStartIndex = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
//	I2C_handle_p->txBufferLength = I2C
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000090 	.word	0x20000090

08000f38 <I2C_SetCtrlBits>:

/*
 * @I2C_SetCtrlBits: Sets I2C control bits
 */
static void I2C_SetCtrlBits(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f48:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f56:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITERREN;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f64:	605a      	str	r2, [r3, #4]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000090 	.word	0x20000090

08000f74 <WaitTillTimeout>:

HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 8000f7e:	f000 f877 	bl	8001070 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 8000f86:	bf00      	nop
 8000f88:	f000 f872 	bl	8001070 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f7      	bcc.n	8000f88 <WaitTillTimeout+0x14>
	return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f92b 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f001 fbcc 	bl	8002774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f943 	bl	8001292 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f000 f90b 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000004 	.word	0x20000004
 8001044:	20000000 	.word	0x20000000

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000004 	.word	0x20000004
 800106c:	200000b8 	.word	0x200000b8

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000b8 	.word	0x200000b8

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff3e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff31 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e159      	b.n	800157c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8148 	bne.w	8001576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d00b      	beq.n	8001306 <HAL_GPIO_Init+0x5a>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	2b11      	cmp	r3, #17
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b12      	cmp	r3, #18
 8001304:	d130      	bne.n	8001368 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0xfc>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a2 	beq.w	8001576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b56      	ldr	r3, [pc, #344]	; (8001590 <HAL_GPIO_Init+0x2e4>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a55      	ldr	r2, [pc, #340]	; (8001590 <HAL_GPIO_Init+0x2e4>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_GPIO_Init+0x2e4>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a48      	ldr	r2, [pc, #288]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x202>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_GPIO_Init+0x2f0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1fe>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <HAL_GPIO_Init+0x2f4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1fa>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1f6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <HAL_GPIO_Init+0x2fc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1f2>
 800149a:	2304      	movs	r3, #4
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 800149e:	2307      	movs	r3, #7
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4934      	ldr	r1, [pc, #208]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ce:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_GPIO_Init+0x300>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <HAL_GPIO_Init+0x300>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <HAL_GPIO_Init+0x300>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151c:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_GPIO_Init+0x300>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_GPIO_Init+0x300>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f aea2 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	3724      	adds	r7, #36	; 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	401a      	ands	r2, r3
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d104      	bne.n	8001606 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	041a      	lsls	r2, r3, #16
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001604:	e002      	b.n	800160c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e25b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d075      	beq.n	8001722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001636:	4ba3      	ldr	r3, [pc, #652]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d00c      	beq.n	800165c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4ba0      	ldr	r3, [pc, #640]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800164a:	2b08      	cmp	r3, #8
 800164c:	d112      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164e:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165a:	d10b      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d05b      	beq.n	8001720 <HAL_RCC_OscConfig+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d157      	bne.n	8001720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e236      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x74>
 800167e:	4b91      	ldr	r3, [pc, #580]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a8a      	ldr	r2, [pc, #552]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a83      	ldr	r2, [pc, #524]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fcce 	bl	8001070 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fcca 	bl	8001070 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1fb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xc0>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fcba 	bl	8001070 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fcb6 	bl	8001070 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1e7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	4b6c      	ldr	r3, [pc, #432]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0xe8>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x152>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1bb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4952      	ldr	r1, [pc, #328]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	e03a      	b.n	80017f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_RCC_OscConfig+0x2b0>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff fc6f 	bl	8001070 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fc6b 	bl	8001070 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e19c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4940      	ldr	r1, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_OscConfig+0x2b0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc4e 	bl	8001070 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc4a 	bl	8001070 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e17b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d030      	beq.n	8001864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d016      	beq.n	8001838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_RCC_OscConfig+0x2b4>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fc2e 	bl	8001070 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fc2a 	bl	8001070 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e15b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x200>
 8001836:	e015      	b.n	8001864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x2b4>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fc17 	bl	8001070 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fc13 	bl	8001070 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e144      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a0 	beq.w	80019b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x2b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d121      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_RCC_OscConfig+0x2b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_RCC_OscConfig+0x2b8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fbd9 	bl	8001070 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e011      	b.n	80018e6 <HAL_RCC_OscConfig+0x2ce>
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470000 	.word	0x42470000
 80018cc:	42470e80 	.word	0x42470e80
 80018d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff fbcc 	bl	8001070 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0fd      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x4d4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x2f0>
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6713      	str	r3, [r2, #112]	; 0x70
 8001906:	e01c      	b.n	8001942 <HAL_RCC_OscConfig+0x32a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x312>
 8001910:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a76      	ldr	r2, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	4b74      	ldr	r3, [pc, #464]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a73      	ldr	r2, [pc, #460]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	e00b      	b.n	8001942 <HAL_RCC_OscConfig+0x32a>
 800192a:	4b71      	ldr	r3, [pc, #452]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a70      	ldr	r2, [pc, #448]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a6d      	ldr	r2, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d015      	beq.n	8001976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff fb91 	bl	8001070 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fb8d 	bl	8001070 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0bc      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ee      	beq.n	8001952 <HAL_RCC_OscConfig+0x33a>
 8001974:	e014      	b.n	80019a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7ff fb7b 	bl	8001070 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff fb77 	bl	8001070 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0a6      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 80019ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8092 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d05c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d141      	bne.n	8001a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <HAL_RCC_OscConfig+0x4dc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fb4b 	bl	8001070 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fb47 	bl	8001070 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e078      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	019b      	lsls	r3, r3, #6
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	061b      	lsls	r3, r3, #24
 8001a20:	4933      	ldr	r1, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_RCC_OscConfig+0x4dc>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb20 	bl	8001070 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fb1c 	bl	8001070 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x41c>
 8001a52:	e045      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x4dc>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb09 	bl	8001070 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff fb05 	bl	8001070 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e036      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x44a>
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e029      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_RCC_OscConfig+0x4d8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d115      	bne.n	8001adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10d      	bne.n	8001adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40007000 	.word	0x40007000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	42470060 	.word	0x42470060

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0cc      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d90c      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0b8      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b64:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	494d      	ldr	r1, [pc, #308]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d044      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d119      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e07f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e067      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 0203 	bic.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4934      	ldr	r1, [pc, #208]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be8:	f7ff fa42 	bl	8001070 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff fa3e 	bl	8001070 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e04f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 020c 	and.w	r2, r3, #12
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1eb      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d20c      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e032      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7e:	f000 f821 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c82:	4601      	mov	r1, r0
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	fa21 f303 	lsr.w	r3, r1, r3
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f9a2 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	080034ac 	.word	0x080034ac
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cda:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d007      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x38>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 808d 	bne.w	8001e0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001cf2:	60bb      	str	r3, [r7, #8]
       break;
 8001cf4:	e08c      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cf8:	60bb      	str	r3, [r7, #8]
      break;
 8001cfa:	e089      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d06:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	f04f 0400 	mov.w	r4, #0
 8001d1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	ea03 0501 	and.w	r5, r3, r1
 8001d28:	ea04 0602 	and.w	r6, r4, r2
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d2e:	fb02 f106 	mul.w	r1, r2, r6
 8001d32:	2200      	movs	r2, #0
 8001d34:	fb02 f205 	mul.w	r2, r2, r5
 8001d38:	440a      	add	r2, r1
 8001d3a:	493a      	ldr	r1, [pc, #232]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d3c:	fba5 0101 	umull	r0, r1, r5, r1
 8001d40:	1853      	adds	r3, r2, r1
 8001d42:	4619      	mov	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f04f 0400 	mov.w	r4, #0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	f7fe faaf 	bl	80002b0 <__aeabi_uldivmod>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e049      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	ea03 0501 	and.w	r5, r3, r1
 8001d70:	ea04 0602 	and.w	r6, r4, r2
 8001d74:	4629      	mov	r1, r5
 8001d76:	4632      	mov	r2, r6
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f04f 0400 	mov.w	r4, #0
 8001d80:	0154      	lsls	r4, r2, #5
 8001d82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d86:	014b      	lsls	r3, r1, #5
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	1b49      	subs	r1, r1, r5
 8001d8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	0194      	lsls	r4, r2, #6
 8001d9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001da0:	018b      	lsls	r3, r1, #6
 8001da2:	1a5b      	subs	r3, r3, r1
 8001da4:	eb64 0402 	sbc.w	r4, r4, r2
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	00e2      	lsls	r2, r4, #3
 8001db2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001db6:	00d9      	lsls	r1, r3, #3
 8001db8:	460b      	mov	r3, r1
 8001dba:	4614      	mov	r4, r2
 8001dbc:	195b      	adds	r3, r3, r5
 8001dbe:	eb44 0406 	adc.w	r4, r4, r6
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	02a2      	lsls	r2, r4, #10
 8001dcc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dd0:	0299      	lsls	r1, r3, #10
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4621      	mov	r1, r4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f04f 0400 	mov.w	r4, #0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	f7fe fa64 	bl	80002b0 <__aeabi_uldivmod>
 8001de8:	4603      	mov	r3, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	60bb      	str	r3, [r7, #8]
      break;
 8001e08:	e002      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e0c:	60bb      	str	r3, [r7, #8]
      break;
 8001e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e10:	68bb      	ldr	r3, [r7, #8]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	017d7840 	.word	0x017d7840

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
 8001e48:	4601      	mov	r1, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080034bc 	.word	0x080034bc

08001e68 <GetPCLK>:
static USART_Handle_t *ptrUSARTx;
bool endLine = false;


uint32_t GetPCLK(USART_TypeDef *pUSARTx)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	uint32_t pclk;
	if (pUSARTx == USART1 || USART6)
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8001e70:	f7ff ffe6 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8001e74:	60f8      	str	r0, [r7, #12]
	}
	else if (pUSARTx == USART2)
	{
		pclk = HAL_RCC_GetPCLK1Freq();
	}
	return pclk;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <USART_EnablePeripheralClk>:

/*
 * @USART_EnablePeripheralClk: Enables USARTx clock
 */
static void USART_EnablePeripheralClk(USART_TypeDef *pUSARTx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	if (pUSARTx == USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <USART_EnablePeripheralClk+0x54>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d106      	bne.n	8001e9e <USART_EnablePeripheralClk+0x1e>
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART1EN;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pUSARTx == USART6)
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
	}
}
 8001e9c:	e014      	b.n	8001ec8 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <USART_EnablePeripheralClk+0x5c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d106      	bne.n	8001eb4 <USART_EnablePeripheralClk+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001eb2:	e009      	b.n	8001ec8 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART6)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <USART_EnablePeripheralClk+0x60>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d105      	bne.n	8001ec8 <USART_EnablePeripheralClk+0x48>
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <USART_EnablePeripheralClk+0x58>)
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40011400 	.word	0x40011400

08001ee4 <USART_TransmitData>:

/*
 * @USART_TransmitData: Enables USART control bits
 */
USART_State USART_TransmitData(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State != USART_TX_BUSY)
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <USART_TransmitData+0x3c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	7c1b      	ldrb	r3, [r3, #16]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d00d      	beq.n	8001f0e <USART_TransmitData+0x2a>
	{
		ptrUSARTx->USART_State = USART_TX_BUSY;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <USART_TransmitData+0x3c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	741a      	strb	r2, [r3, #16]
		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);  // set Transmit Data Empty & Transmission Complete control bits
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <USART_TransmitData+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <USART_TransmitData+0x3c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f0c:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <USART_TransmitData+0x3c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7c1b      	ldrb	r3, [r3, #16]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000094 	.word	0x20000094

08001f24 <USART_RxData>:

USART_State USART_RxData(USART_State desiredState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	if (ptrUSARTx->USART_State != desiredState && ptrUSARTx->USART_State != USART_READY)
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <USART_RxData+0x50>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	7c1b      	ldrb	r3, [r3, #16]
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d012      	beq.n	8001f60 <USART_RxData+0x3c>
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <USART_RxData+0x50>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d00d      	beq.n	8001f60 <USART_RxData+0x3c>
	{
		ptrUSARTx->USART_State = desiredState;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <USART_RxData+0x50>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	79fa      	ldrb	r2, [r7, #7]
 8001f4a:	741a      	strb	r2, [r3, #16]

		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE | USART_CR1_RE);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <USART_RxData+0x50>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <USART_RxData+0x50>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8001f5e:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <USART_RxData+0x50>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	7c1b      	ldrb	r3, [r3, #16]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000094 	.word	0x20000094

08001f78 <USART2_IRQHandler>:

/*
 * @USART2_IRQHandler: IRQ handler for servicing USART2 interrupts
 */
void USART2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	endLine = false;
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <USART2_IRQHandler+0x128>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]

	// Transmit buffer empty
	if (ptrUSARTx->pUSARTx->SR & USART_SR_TXE)
 8001f82:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <USART2_IRQHandler+0x4e>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	7c1b      	ldrb	r3, [r3, #16]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d114      	bne.n	8001fc6 <USART2_IRQHandler+0x4e>
		{
			// TXE
			if (ptrUSARTx->txLength)		// if there is stuff to send...
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	7f1b      	ldrb	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00f      	beq.n	8001fc6 <USART2_IRQHandler+0x4e>
			{
				ptrUSARTx->pUSARTx->DR = *ptrUSARTx->txBuffer++; // send to serial
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	6953      	ldr	r3, [r2, #20]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	6151      	str	r1, [r2, #20]
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
				ptrUSARTx->txLength--;
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	7f1a      	ldrb	r2, [r3, #28]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	771a      	strb	r2, [r3, #28]
			}
		}
	}

	// RXNE
	if (ptrUSARTx->pUSARTx->SR & USART_SR_RXNE)
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <USART2_IRQHandler+0xa0>
	{
		ptrUSARTx->rxBuffer[ptrUSARTx->txIdx] = ptrUSARTx->pUSARTx->DR;
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]

		if(ptrUSARTx->rxBuffer[ptrUSARTx->txIdx++] == '\r')
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6999      	ldr	r1, [r3, #24]
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002000:	1c50      	adds	r0, r2, #1
 8002002:	b2c0      	uxtb	r0, r0
 8002004:	f883 0020 	strb.w	r0, [r3, #32]
 8002008:	4613      	mov	r3, r2
 800200a:	440b      	add	r3, r1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b0d      	cmp	r3, #13
 8002010:	d102      	bne.n	8002018 <USART2_IRQHandler+0xa0>
		{
			endLine = true;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <USART2_IRQHandler+0x128>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
		}
	}

	if (ptrUSARTx->pUSARTx->SR & USART_SR_TC) // transmission complete
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <USART2_IRQHandler+0x12c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01f      	beq.n	8002068 <USART2_IRQHandler+0xf0>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <USART2_IRQHandler+0x12c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	7c1b      	ldrb	r3, [r3, #16]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d107      	bne.n	8002042 <USART2_IRQHandler+0xca>
		{
			if (!ptrUSARTx->txLength)		 // if no more bytes to send
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	7f1b      	ldrb	r3, [r3, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d115      	bne.n	8002068 <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 800203c:	f000 f834 	bl	80020a8 <USART_CloseTransmission>
 8002040:	e012      	b.n	8002068 <USART2_IRQHandler+0xf0>
			}
		}
		else if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	7c1b      	ldrb	r3, [r3, #16]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d10d      	bne.n	8002068 <USART2_IRQHandler+0xf0>
		{
			if (endLine)
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <USART2_IRQHandler+0x128>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8002054:	f000 f828 	bl	80020a8 <USART_CloseTransmission>
				ptrUSARTx->TxEndOfLineIdx++;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <USART2_IRQHandler+0x12c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002060:	3201      	adds	r2, #1
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
	}
	ptrUSARTx->txIdx &= ptrUSARTx->bitMask;
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <USART2_IRQHandler+0x12c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f893 1020 	ldrb.w	r1, [r3, #32]
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	7fda      	ldrb	r2, [r3, #31]
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
	ptrUSARTx->rxIdx &= ptrUSARTx->bitMask;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <USART2_IRQHandler+0x12c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	7fda      	ldrb	r2, [r3, #31]
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <USART2_IRQHandler+0x12c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	400a      	ands	r2, r1
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000098 	.word	0x20000098
 80020a4:	20000094 	.word	0x20000094

080020a8 <USART_CloseTransmission>:

static void USART_CloseTransmission()
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State == USART_RX_BUSY)
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	7c1b      	ldrb	r3, [r3, #16]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d00e      	beq.n	80020d4 <USART_CloseTransmission+0x2c>
		//USART_ApplicationCallback(ptrUSARTx);
//		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE);
//		ptrUSARTx->rxLength = ptrUSARTx->rxSize;	// restoring the original RX size
//		ptrUSARTx->rxBufferIdx = 0;
	}
	else if (ptrUSARTx->USART_State == USART_TX_BUSY)
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	7c1b      	ldrb	r3, [r3, #16]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d109      	bne.n	80020d4 <USART_CloseTransmission+0x2c>
	{
		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80020d2:	60da      	str	r2, [r3, #12]
	}
	ptrUSARTx->USART_State = ptrUSARTx->session ? USART_RX_BUSY : USART_READY;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <USART_CloseTransmission+0x3c>
 80020e0:	2202      	movs	r2, #2
 80020e2:	e000      	b.n	80020e6 <USART_CloseTransmission+0x3e>
 80020e4:	2201      	movs	r2, #1
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <USART_CloseTransmission+0x50>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	741a      	strb	r2, [r3, #16]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000094 	.word	0x20000094

080020fc <USART_Initization>:

/*
 * @USART_Init: Populates USART struct
 */
void USART_Initization(USART_Handle_t *pUSART)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	ptrUSARTx = pUSART;
 8002104:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <USART_Initization+0x178>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]

	// initializing peripheral clock
	USART_EnablePeripheralClk(pUSART->pUSARTx);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff feb6 	bl	8001e80 <USART_EnablePeripheralClk>

	// enable UE bit
	pUSART->pUSARTx->CR1 |= USART_CR1_UE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002122:	60da      	str	r2, [r3, #12]

	// word length
	pUSART->pUSARTx->CR1 |= pUSART->USART_Config.USART_wordLength << USART_CR1_M_Pos;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7b5b      	ldrb	r3, [r3, #13]
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	4619      	mov	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	60da      	str	r2, [r3, #12]

	// parity control
	if (pUSART->USART_Config.USART_parityControl)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <USART_Initization+0x56>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_PS;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	60da      	str	r2, [r3, #12]
	}

	// USART mode
	if (pUSART->USART_Config.USART_mode == USART_MODE_TX)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b9b      	ldrb	r3, [r3, #14]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <USART_Initization+0x70>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0208 	orr.w	r2, r2, #8
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	e018      	b.n	800219e <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_RX)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7b9b      	ldrb	r3, [r3, #14]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <USART_Initization+0x8a>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_RE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0204 	orr.w	r2, r2, #4
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	e00b      	b.n	800219e <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_TXRX)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7b9b      	ldrb	r3, [r3, #14]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <USART_Initization+0xa2>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 020c 	orr.w	r2, r2, #12
 800219c:	60da      	str	r2, [r3, #12]
	}

	if (pUSART->dmaTransfer == DMA_TX_ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <USART_Initization+0xbc>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAT;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b6:	615a      	str	r2, [r3, #20]
	}

	if (pUSART->dmaReception == DMA_RX_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <USART_Initization+0xd6>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d0:	615a      	str	r2, [r3, #20]
	}
	// STOP bit
	pUSART->pUSARTx->CR2 |= pUSART->USART_Config.USART_stopBits << USART_CR2_STOP_Pos;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7b1b      	ldrb	r3, [r3, #12]
 80021dc:	031b      	lsls	r3, r3, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	611a      	str	r2, [r3, #16]

	// Hardware control
						// todo ....!

	// configuring baud rate
	uint8_t oversamplingValue = 16, divisor = 100;
 80021e8:	2310      	movs	r3, #16
 80021ea:	77fb      	strb	r3, [r7, #31]
 80021ec:	2364      	movs	r3, #100	; 0x64
 80021ee:	77bb      	strb	r3, [r7, #30]
	uint32_t tempUsartDiv, tempFraction;

	uint8_t over8 = pUSART->pUSARTx->CR1 & USART_CR1_OVER8; 	// by default, over8=0 = 16x oversampling
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2300      	movs	r3, #0
 80021f8:	777b      	strb	r3, [r7, #29]
	tempUsartDiv = (GetPCLK(pUSART->pUSARTx) * divisor) / (8 * (2 - over8) * pUSART->USART_Config.USART_baudRate);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe32 	bl	8001e68 <GetPCLK>
 8002204:	4602      	mov	r2, r0
 8002206:	7fbb      	ldrb	r3, [r7, #30]
 8002208:	fb03 f202 	mul.w	r2, r3, r2
 800220c:	7f7b      	ldrb	r3, [r7, #29]
 800220e:	f1c3 0302 	rsb	r3, r3, #2
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	fb03 f301 	mul.w	r3, r3, r1
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	61bb      	str	r3, [r7, #24]

	uint8_t divMantissa = tempUsartDiv / divisor;
 8002224:	7fbb      	ldrb	r3, [r7, #30]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	75fb      	strb	r3, [r7, #23]
	tempFraction = (tempUsartDiv - divMantissa * divisor) * oversamplingValue;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	7fba      	ldrb	r2, [r7, #30]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	461a      	mov	r2, r3
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	7ffa      	ldrb	r2, [r7, #31]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	613b      	str	r3, [r7, #16]

	uint8_t divFraction = (tempFraction + 50)/divisor;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800224a:	7fbb      	ldrb	r3, [r7, #30]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	73fb      	strb	r3, [r7, #15]

	// writing to BRR register
	pUSART->pUSARTx->BRR |= (divMantissa << USART_BRR_DIV_Mantissa_Pos | divFraction);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	0119      	lsls	r1, r3, #4
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	430b      	orrs	r3, r1
 8002260:	4619      	mov	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]

}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000094 	.word	0x20000094

08002278 <I2C_Initilization>:

/*
 * Initializes user-defined variables for I2C struct
 */
void I2C_Initilization(I2C_Config_t *I2C_Config, I2C_TypeDef *i2cPeripheral)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	I2C1_handle.pI2Cx = i2cPeripheral;
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <I2C_Initilization+0x2c>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6013      	str	r3, [r2, #0]
	I2C1_handle.I2C_Config = *I2C_Config;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <I2C_Initilization+0x2c>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002292:	e883 0003 	stmia.w	r3, {r0, r1}
	I2C_Init(&I2C1_handle);
 8002296:	4803      	ldr	r0, [pc, #12]	; (80022a4 <I2C_Initilization+0x2c>)
 8002298:	f7fe fa0c 	bl	80006b4 <I2C_Init>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000158 	.word	0x20000158

080022a8 <USART_Init>:

/*
 * Initializes user-defined variables for USART struct
 */
void USART_Init (void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	USART2_handle.pUSARTx = USART2;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <USART_Init+0x8c>)
 80022ae:	4a22      	ldr	r2, [pc, #136]	; (8002338 <USART_Init+0x90>)
 80022b0:	601a      	str	r2, [r3, #0]
	USART2_handle.USART_Config.USART_baudRate = USART_BAUD_9600;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <USART_Init+0x8c>)
 80022b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022b8:	609a      	str	r2, [r3, #8]
	USART2_handle.USART_Config.USART_mode = USART_MODE_TXRX;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <USART_Init+0x8c>)
 80022bc:	2202      	movs	r2, #2
 80022be:	739a      	strb	r2, [r3, #14]
	USART2_handle.USART_Config.USART_parityControl = USART_PARITY_DISABLED;
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <USART_Init+0x8c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	711a      	strb	r2, [r3, #4]
	USART2_handle.USART_Config.USART_stopBits = USART_STOP;
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <USART_Init+0x8c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	731a      	strb	r2, [r3, #12]
	USART2_handle.USART_Config.USART_wordLength = USART_8_DATA_BITS;
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <USART_Init+0x8c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	735a      	strb	r2, [r3, #13]
	USART2_handle.rxBuffer = usart_fifo;
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <USART_Init+0x8c>)
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <USART_Init+0x94>)
 80022d6:	619a      	str	r2, [r3, #24]
	USART2_handle.rxLength = usart_rxLength -1;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <USART_Init+0x98>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <USART_Init+0x8c>)
 80022e2:	775a      	strb	r2, [r3, #29]
	USART2_handle.rxSize = usart_rxLength - 1;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <USART_Init+0x98>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <USART_Init+0x8c>)
 80022ee:	779a      	strb	r2, [r3, #30]
	USART2_handle.bitMask = usart_rxLength - 2;
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <USART_Init+0x98>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3b02      	subs	r3, #2
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <USART_Init+0x8c>)
 80022fa:	77da      	strb	r2, [r3, #31]
	USART2_handle.txIdx = 0;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <USART_Init+0x8c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2020 	strb.w	r2, [r3, #32]
	USART2_handle.rxIdx = 0;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <USART_Init+0x8c>)
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	USART2_handle.dmaTransfer = DMA_TX_DISABLE;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <USART_Init+0x8c>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	USART2_handle.dmaReception = DMA_RX_DISABLE;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <USART_Init+0x8c>)
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	USART2_handle.session = SET;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <USART_Init+0x8c>)
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	USART_Initization(&USART2_handle);
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <USART_Init+0x8c>)
 8002326:	f7ff fee9 	bl	80020fc <USART_Initization>

	USART_EnableRxInterrupts();
 800232a:	f000 fb71 	bl	8002a10 <USART_EnableRxInterrupts>
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000bc 	.word	0x200000bc
 8002338:	40004400 	.word	0x40004400
 800233c:	2000009c 	.word	0x2000009c
 8002340:	20000005 	.word	0x20000005

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
	HAL_Init();
 800234a:	f7fe fe2b 	bl	8000fa4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800234e:	f000 f835 	bl	80023bc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002352:	f000 f893 	bl	800247c <MX_GPIO_Init>

	/* Initialize I2C struct */
	I2C_Config_t i2c_config = {
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <main+0x68>)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800235e:	e883 0003 	stmia.w	r3, {r0, r1}
		I2C_AckControl: I2C_ACK_ENABLE,
		I2C_SCLSpeed: I2C_SCL_SPEED_SM,
		I2C_DeviceAddress: MCP9808_ADDR,
		I2C_FMDutyCycle: I2C_FM_DUTY_2
	};
    I2C_Initilization(&i2c_config, I2C1);
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <main+0x6c>)
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff86 	bl	8002278 <I2C_Initilization>

    /* Initialize USART struct */
    USART_Init();
 800236c:	f7ff ff9c 	bl	80022a8 <USART_Init>
//    DMA_Start_IT(&dma_usart_tx, (uint32_t) tx_buff, &usart.pUSARTx->DR);
//    DMA_Start_IT(&dma_usart_rx, &usart.pUSARTx->DR, (uint32_t) rx_buff);

    while(1)
    {
    	uint8_t readFifo = USART_READ_FIFO(USART2_handle.rxBuffer,
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <main+0x70>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <main+0x54>
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <main+0x70>)
 800237c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <main+0x54>
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <main+0x70>)
 8002386:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <main+0x70>)
 800238c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <main+0x54>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <main+0x56>
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
    									   USART2_handle.TxEndOfLineIdx,
										   USART2_handle.RxEndOfLineIdx);
    	if (readFifo)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0e6      	beq.n	8002370 <main+0x2c>
    	{
    		SerialRead(&USART2_handle, &I2C1_handle);
 80023a2:	4905      	ldr	r1, [pc, #20]	; (80023b8 <main+0x74>)
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <main+0x70>)
 80023a6:	f000 fb3a 	bl	8002a1e <SerialRead>
    {
 80023aa:	e7e1      	b.n	8002370 <main+0x2c>
 80023ac:	08003444 	.word	0x08003444
 80023b0:	40005400 	.word	0x40005400
 80023b4:	200000bc 	.word	0x200000bc
 80023b8:	20000158 	.word	0x20000158

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2230      	movs	r2, #48	; 0x30
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fc11 	bl	8002bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <SystemClock_Config+0xb8>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a22      	ldr	r2, [pc, #136]	; (8002474 <SystemClock_Config+0xb8>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <SystemClock_Config+0xb8>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <SystemClock_Config+0xbc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <SystemClock_Config+0xbc>)
 800240a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <SystemClock_Config+0xbc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800241c:	2302      	movs	r3, #2
 800241e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002424:	2310      	movs	r3, #16
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f8f1 	bl	8001618 <HAL_RCC_OscConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800243c:	f000 f8b6 	bl	80025ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002440:	230f      	movs	r3, #15
 8002442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fb4c 	bl	8001af8 <HAL_RCC_ClockConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002466:	f000 f8a1 	bl	80025ac <Error_Handler>
  }
}
 800246a:	bf00      	nop
 800246c:	3750      	adds	r7, #80	; 0x50
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();			// Push button (PC13)
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <MX_GPIO_Init+0x11c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <MX_GPIO_Init+0x11c>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <MX_GPIO_Init+0x11c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();			// LED (PA5)
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a3c      	ldr	r2, [pc, #240]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();			// I2C1
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a35      	ldr	r2, [pc, #212]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <MX_GPIO_Init+0x11c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2140      	movs	r1, #64	; 0x40
 80024da:	4830      	ldr	r0, [pc, #192]	; (800259c <MX_GPIO_Init+0x120>)
 80024dc:	f7ff f868 	bl	80015b0 <HAL_GPIO_WritePin>

	/* USART config */
	gpio.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
	gpio.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80024e4:	230c      	movs	r3, #12
 80024e6:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_PULLUP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
	gpio.Alternate = GPIO_AF7_USART2;
 80024ec:	2307      	movs	r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4619      	mov	r1, r3
 80024f6:	4829      	ldr	r0, [pc, #164]	; (800259c <MX_GPIO_Init+0x120>)
 80024f8:	f7fe fed8 	bl	80012ac <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024fc:	2026      	movs	r0, #38	; 0x26
 80024fe:	f7fe feba 	bl	8001276 <HAL_NVIC_EnableIRQ>

	/* LED/Push button config */

	// Configure GPIO pin : PC13 // PUSH BUTTON
	gpio.Pin = GPIO_PIN_13;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_IT_RISING;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <MX_GPIO_Init+0x124>)
 800250a:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	4619      	mov	r1, r3
 8002516:	4823      	ldr	r0, [pc, #140]	; (80025a4 <MX_GPIO_Init+0x128>)
 8002518:	f7fe fec8 	bl	80012ac <HAL_GPIO_Init>

	// Configure GPIO pin : PA5  // LED
	gpio.Pin = GPIO_PIN_5;
 800251c:	2320      	movs	r3, #32
 800251e:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio);
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	4619      	mov	r1, r3
 8002532:	481a      	ldr	r0, [pc, #104]	; (800259c <MX_GPIO_Init+0x120>)
 8002534:	f7fe feba 	bl	80012ac <HAL_GPIO_Init>

	// Configure I2C
	gpio.Mode = GPIO_MODE_AF_OD;
 8002538:	2312      	movs	r3, #18
 800253a:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
	gpio.Alternate = GPIO_AF4_I2C1;
 8002544:	2304      	movs	r3, #4
 8002546:	61fb      	str	r3, [r7, #28]


	// scl
	gpio.Pin = GPIO_PIN_6;
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	4815      	ldr	r0, [pc, #84]	; (80025a8 <MX_GPIO_Init+0x12c>)
 8002554:	f7fe feaa 	bl	80012ac <HAL_GPIO_Init>

	// sdata
	gpio.Pin = GPIO_PIN_7;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	4619      	mov	r1, r3
 8002562:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_GPIO_Init+0x12c>)
 8002564:	f7fe fea2 	bl	80012ac <HAL_GPIO_Init>

	/* EXTI GPIO init */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	2028      	movs	r0, #40	; 0x28
 800256e:	f7fe fe66 	bl	800123e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002572:	2028      	movs	r0, #40	; 0x28
 8002574:	f7fe fe7f 	bl	8001276 <HAL_NVIC_EnableIRQ>

	/* EXTI I2C Interrupts */
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002578:	201f      	movs	r0, #31
 800257a:	f7fe fe7c 	bl	8001276 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800257e:	2020      	movs	r0, #32
 8002580:	f7fe fe79 	bl	8001276 <HAL_NVIC_EnableIRQ>

//	/* EXTI DMA interrupt */ -- todo remove
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002584:	2011      	movs	r0, #17
 8002586:	f7fe fe76 	bl	8001276 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800258a:	2010      	movs	r0, #16
 800258c:	f7fe fe73 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000
 80025a0:	10110000 	.word	0x10110000
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020400 	.word	0x40020400

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <ProcessData>:
static uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
static uint8_t rxSize = BYTES_PER_TRANSACTION;
/*
 * @ProcessData: Converts raw bytes into readable data
 */
uint16_t ProcessData (uint8_t *rxBuffer) {
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	uint8_t startIndex = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	737b      	strb	r3, [r7, #13]
	//printf ("\nUpper byte: %d, Lower byte: %d\n", rxBuffer[startIndex], rxBuffer[startIndex+1]);
	uint16_t temperatureInDegrees;

	// process data
	uint8_t upperByte = rxBuffer[startIndex] & 0x1F; // mask out the 3 bits
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	733b      	strb	r3, [r7, #12]
	uint8_t signBit = upperByte & 0x10;
 80025d4:	7b3b      	ldrb	r3, [r7, #12]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	72fb      	strb	r3, [r7, #11]

	if (signBit)
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <ProcessData+0x54>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 80025e2:	7b3b      	ldrb	r3, [r7, #12]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	733b      	strb	r3, [r7, #12]
		temperatureInDegrees = 256 - (upperByte << 4 | rxBuffer[startIndex+1] >> 4);
 80025ea:	7b3b      	ldrb	r3, [r7, #12]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	7b7b      	ldrb	r3, [r7, #13]
 80025f2:	3301      	adds	r3, #1
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	440b      	add	r3, r1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	b29b      	uxth	r3, r3
 8002606:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800260a:	81fb      	strh	r3, [r7, #14]
 800260c:	e00d      	b.n	800262a <ProcessData+0x70>
	}
	else
	{
		temperatureInDegrees = upperByte << 4 | rxBuffer[startIndex+1] >> 4;
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	b21a      	sxth	r2, r3
 8002614:	7b7b      	ldrb	r3, [r7, #13]
 8002616:	3301      	adds	r3, #1
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	440b      	add	r3, r1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	b2db      	uxtb	r3, r3
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21b      	sxth	r3, r3
 8002628:	81fb      	strh	r3, [r7, #14]
	}
//	printf ("Temperature value: %d\n\n", temperatureInDegrees);
	return temperatureInDegrees;
 800262a:	89fb      	ldrh	r3, [r7, #14]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ReadTemperature_IT>:

/*
 * @ReadTemperatureInterrupt: Reads temperature values via I2C using interrupts
 */
uint16_t _ReadTemperature_IT(I2C_Handle_t *I2C_handle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	I2C_handle->txBuffer = txBuffer;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <_ReadTemperature_IT+0x8c>)
 8002644:	611a      	str	r2, [r3, #16]
	I2C_handle->pRxBuffer = rxBuffer;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <_ReadTemperature_IT+0x90>)
 800264a:	615a      	str	r2, [r3, #20]
	I2C_handle->rxBufferSize = rxSize;
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <_ReadTemperature_IT+0x94>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	765a      	strb	r2, [r3, #25]

	// Start I2C transaction
	while (HAL_I2C_StartInterrupt(I2C_TX_BUSY, txSize, rxSize) != I2C_READY);
 8002654:	bf00      	nop
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <_ReadTemperature_IT+0x98>)
 8002658:	7819      	ldrb	r1, [r3, #0]
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <_ReadTemperature_IT+0x94>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	2003      	movs	r0, #3
 8002662:	f7fe f959 	bl	8000918 <HAL_I2C_StartInterrupt>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d1f4      	bne.n	8002656 <_ReadTemperature_IT+0x1e>

	I2C_handle->I2C_State = I2C_INIT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	731a      	strb	r2, [r3, #12]

	// request the data from the sensor
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e011      	b.n	800269c <_ReadTemperature_IT+0x64>
	{
		I2C_handle->I2C_State = I2C_INIT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	731a      	strb	r2, [r3, #12]
		while (HAL_I2C_StartInterrupt(I2C_RX_BUSY, txSize, rxSize) != I2C_READY);
 800267e:	bf00      	nop
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_ReadTemperature_IT+0x98>)
 8002682:	7819      	ldrb	r1, [r3, #0]
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <_ReadTemperature_IT+0x94>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	2002      	movs	r0, #2
 800268c:	f7fe f944 	bl	8000918 <HAL_I2C_StartInterrupt>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d1f4      	bne.n	8002680 <_ReadTemperature_IT+0x48>
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e5b      	ldrb	r3, [r3, #25]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	dbe5      	blt.n	8002678 <_ReadTemperature_IT+0x40>
	}

	uint16_t temperature = ProcessData(I2C_handle->pRxBuffer);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff82 	bl	80025ba <ProcessData>
 80026b6:	4603      	mov	r3, r0
 80026b8:	817b      	strh	r3, [r7, #10]
	return temperature;
 80026ba:	897b      	ldrh	r3, [r7, #10]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000008 	.word	0x20000008
 80026c8:	200000a8 	.word	0x200000a8
 80026cc:	2000000a 	.word	0x2000000a
 80026d0:	20000009 	.word	0x20000009

080026d4 <_ReadTemperature>:

/*
 * @ReadTemperature: Read temperature via I2C using polling approach
 */
void _ReadTemperature(I2C_Handle_t *I2C_handle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	// todo - maybe use the following data straight from I2C_handle
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 80026dc:	2305      	movs	r3, #5
 80026de:	743b      	strb	r3, [r7, #16]
	uint8_t rxBuffer[BYTES_TO_READ];
	uint8_t startRxIndex = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]

//	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <_ReadTemperature+0x6c>)
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe faca 	bl	8000c88 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e00c      	b.n	8002714 <_ReadTemperature+0x40>
	{
		HAL_I2C_Master_Receive (I2C_handle, rxBuffer, BYTES_PER_TRANSACTION, startRxIndex);
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	f107 010c 	add.w	r1, r7, #12
 8002700:	2202      	movs	r2, #2
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fb01 	bl	8000d0a <HAL_I2C_Master_Receive>
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3301      	adds	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	7ffb      	ldrb	r3, [r7, #31]
 8002710:	3302      	adds	r3, #2
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	ddef      	ble.n	80026fa <_ReadTemperature+0x26>
	}

//	printf ("Printing raw bytes:\n");
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e007      	b.n	8002730 <_ReadTemperature+0x5c>
	{
		ProcessData(rxBuffer);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff48 	bl	80025ba <ProcessData>
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3302      	adds	r3, #2
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	ddf4      	ble.n	8002720 <_ReadTemperature+0x4c>
	}
}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000009 	.word	0x20000009

08002744 <GetTemperature>:

uint16_t GetTemperature(uint8_t interrupt, I2C_Handle_t *I2C_Handle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
	uint16_t temperature;

	if (interrupt == SET)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <GetTemperature+0x1e>
	{
		temperature = _ReadTemperature_IT(I2C_Handle);
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f7ff ff6e 	bl	8002638 <_ReadTemperature_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	81fb      	strh	r3, [r7, #14]
 8002760:	e002      	b.n	8002768 <GetTemperature+0x24>
	}
	else
	{
		_ReadTemperature(I2C_Handle);
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	f7ff ffb6 	bl	80026d4 <_ReadTemperature>
	}
	return temperature;
 8002768:	89fb      	ldrh	r3, [r7, #14]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_MspInit+0x4c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_MspInit+0x4c>)
 8002784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_MspInit+0x4c>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_MspInit+0x4c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_MspInit+0x4c>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_MspInit+0x4c>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler+0x4>

080027de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
//
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
//
  /* USER CODE END PendSV_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DMA1_Stream5_IRQHandler>:



void DMA1_Stream5_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_rx);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DMA1_Stream5_IRQHandler+0x10>)
 800281a:	f7fd fec9 	bl	80005b0 <DMA_InterruptHandler>
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200000f0 	.word	0x200000f0

08002828 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_tx);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <DMA1_Stream6_IRQHandler+0x10>)
 800282e:	f7fd febf 	bl	80005b0 <DMA_InterruptHandler>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000124 	.word	0x20000124

0800283c <SysTick_Handler>:
//}
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002840:	f7fe fc02 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x50>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x16>
		heap_end = &end;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <_sbrk+0x50>)
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <_sbrk+0x54>)
 800285c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_sbrk+0x50>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <_sbrk+0x50>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	466a      	mov	r2, sp
 800286e:	4293      	cmp	r3, r2
 8002870:	d907      	bls.n	8002882 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002872:	f000 f989 	bl	8002b88 <__errno>
 8002876:	4602      	mov	r2, r0
 8002878:	230c      	movs	r3, #12
 800287a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002880:	e006      	b.n	8002890 <_sbrk+0x48>
	}

	heap_end += incr;
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <_sbrk+0x50>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a03      	ldr	r2, [pc, #12]	; (8002898 <_sbrk+0x50>)
 800288c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200000ac 	.word	0x200000ac
 800289c:	20000178 	.word	0x20000178

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <SystemInit+0x28>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <SystemInit+0x28>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SystemInit+0x28>)
 80028b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ba:	609a      	str	r2, [r3, #8]
#endif
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <SendSerialData>:
 * @param: format: format of the TX data
 * @param: ...   : data to display
 * @return void
 */
void SendSerialData(USART_Handle_t *usart, const char *format, ...)
{
 80028cc:	b40e      	push	{r1, r2, r3}
 80028ce:	b5b0      	push	{r4, r5, r7, lr}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	466b      	mov	r3, sp
 80028d8:	461d      	mov	r5, r3
	char serialBuffer[strlen(format)];
 80028da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028dc:	f7fd fc8a 	bl	80001f4 <strlen>
 80028e0:	4603      	mov	r3, r0
 80028e2:	3b01      	subs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	4601      	mov	r1, r0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	00d4      	lsls	r4, r2, #3
 80028f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80028fa:	00cb      	lsls	r3, r1, #3
 80028fc:	4601      	mov	r1, r0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	00d4      	lsls	r4, r2, #3
 800290c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002910:	00cb      	lsls	r3, r1, #3
 8002912:	1dc3      	adds	r3, r0, #7
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	ebad 0d03 	sub.w	sp, sp, r3
 800291c:	466b      	mov	r3, sp
 800291e:	3300      	adds	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8002922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002926:	60bb      	str	r3, [r7, #8]
	vsprintf(serialBuffer, format, args);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f98a 	bl	8002c48 <vsiprintf>

	usart->txBuffer = serialBuffer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	615a      	str	r2, [r3, #20]
	usart->txLength = strlen(serialBuffer);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fc59 	bl	80001f4 <strlen>
 8002942:	4603      	mov	r3, r0
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	771a      	strb	r2, [r3, #28]

	USART_State expectedState = usart->session ? USART_RX_BUSY : USART_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SendSerialData+0x8c>
 8002954:	2302      	movs	r3, #2
 8002956:	e000      	b.n	800295a <SendSerialData+0x8e>
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
	while (USART_TransmitData() != expectedState);
 800295c:	bf00      	nop
 800295e:	f7ff fac1 	bl	8001ee4 <USART_TransmitData>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	4293      	cmp	r3, r2
 800296a:	d1f8      	bne.n	800295e <SendSerialData+0x92>
 800296c:	46ad      	mov	sp, r5

//	USART_DMA_Transmit(usart, sizeof(serialBuffer));
//	USART_DMA_Transmit(usartHandle, dmaHandle); //
	va_end(args);		// clean memory reserved for valist
//	usart->USART_State = USART_INIT;
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002978:	b003      	add	sp, #12
 800297a:	4770      	bx	lr

0800297c <ExecuteSerialData>:
 * @param: str1:  hardcoded string to compare the user input against
 * @param: I2C_Handle_t: pointer to I2C_Handle_t struct
 * @return false if "q" (quit) is entered, otherwise true
 */
bool ExecuteSerialData(USART_Handle_t *usart, const char *str1, I2C_Handle_t *I2C_Handle)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	if (!strcmp(str1, "temp"))
 8002988:	491a      	ldr	r1, [pc, #104]	; (80029f4 <ExecuteSerialData+0x78>)
 800298a:	68b8      	ldr	r0, [r7, #8]
 800298c:	f7fd fc28 	bl	80001e0 <strcmp>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <ExecuteSerialData+0x34>
	{
		uint16_t temp = GetTemperature(SET, I2C_Handle);
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff fed3 	bl	8002744 <GetTemperature>
 800299e:	4603      	mov	r3, r0
 80029a0:	82fb      	strh	r3, [r7, #22]
		SendSerialData(usart, "Current temperature: %d\n", temp);
 80029a2:	8afb      	ldrh	r3, [r7, #22]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4914      	ldr	r1, [pc, #80]	; (80029f8 <ExecuteSerialData+0x7c>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ff8f 	bl	80028cc <SendSerialData>
 80029ae:	e01c      	b.n	80029ea <ExecuteSerialData+0x6e>
	}
	else if (!strcmp(str1, "led"))
 80029b0:	4912      	ldr	r1, [pc, #72]	; (80029fc <ExecuteSerialData+0x80>)
 80029b2:	68b8      	ldr	r0, [r7, #8]
 80029b4:	f7fd fc14 	bl	80001e0 <strcmp>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <ExecuteSerialData+0x54>
	{
		SendSerialData(usart, "Toggling LED\n");
 80029be:	4910      	ldr	r1, [pc, #64]	; (8002a00 <ExecuteSerialData+0x84>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff83 	bl	80028cc <SendSerialData>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80029c6:	2120      	movs	r1, #32
 80029c8:	480e      	ldr	r0, [pc, #56]	; (8002a04 <ExecuteSerialData+0x88>)
 80029ca:	f7fe fe0a 	bl	80015e2 <HAL_GPIO_TogglePin>
 80029ce:	e00c      	b.n	80029ea <ExecuteSerialData+0x6e>
	}
	else if (!strcmp(str1, "q"))
 80029d0:	490d      	ldr	r1, [pc, #52]	; (8002a08 <ExecuteSerialData+0x8c>)
 80029d2:	68b8      	ldr	r0, [r7, #8]
 80029d4:	f7fd fc04 	bl	80001e0 <strcmp>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <ExecuteSerialData+0x6e>
	{
		SendSerialData(usart, "No longer accepting serial data...\n");
 80029de:	490b      	ldr	r1, [pc, #44]	; (8002a0c <ExecuteSerialData+0x90>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff ff73 	bl	80028cc <SendSerialData>
		return false;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <ExecuteSerialData+0x70>
	}
	return true;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	0800344c 	.word	0x0800344c
 80029f8:	08003454 	.word	0x08003454
 80029fc:	08003470 	.word	0x08003470
 8002a00:	08003474 	.word	0x08003474
 8002a04:	40020000 	.word	0x40020000
 8002a08:	08003484 	.word	0x08003484
 8002a0c:	08003488 	.word	0x08003488

08002a10 <USART_EnableRxInterrupts>:
		usart->USART_State = USART_INIT;
	}
}

void USART_EnableRxInterrupts()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	USART_RxData(USART_RX_BUSY);
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7ff fa85 	bl	8001f24 <USART_RxData>
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <SerialRead>:

/*
 * @SerialRead: reads the FIFO that contains the meaningful user input (containing \r)
 */
void SerialRead(USART_Handle_t *usart, I2C_Handle_t *I2C_Handle)
{
 8002a1e:	b5b0      	push	{r4, r5, r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	466b      	mov	r3, sp
 8002a2a:	461d      	mov	r5, r3
	char token[usart->rxSize];
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7f98      	ldrb	r0, [r3, #30]
 8002a30:	4603      	mov	r3, r0
 8002a32:	3b01      	subs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	b2c1      	uxtb	r1, r0
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	00d4      	lsls	r4, r2, #3
 8002a46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a4a:	00cb      	lsls	r3, r1, #3
 8002a4c:	b2c1      	uxtb	r1, r0
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	00d4      	lsls	r4, r2, #3
 8002a5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a60:	00cb      	lsls	r3, r1, #3
 8002a62:	4603      	mov	r3, r0
 8002a64:	3307      	adds	r3, #7
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a6e:	466b      	mov	r3, sp
 8002a70:	3300      	adds	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
	memset(token, 0, usart->rxSize);
 8002a74:	69b8      	ldr	r0, [r7, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7f9b      	ldrb	r3, [r3, #30]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f000 f8b8 	bl	8002bf2 <memset>

	// parse the data
	char *dataStart = usart->rxBuffer + usart->rxIdx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
	char *dataEnd = strstr(dataStart, "\r");
 8002a90:	210d      	movs	r1, #13
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f000 f8b5 	bl	8002c02 <strchr>
 8002a98:	6138      	str	r0, [r7, #16]
	uint8_t bytes;

	if (dataEnd == NULL) // wrap-around
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d125      	bne.n	8002aec <SerialRead+0xce>
	{
		char *lastChar = strchr(dataStart, '\0');
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7fd fba7 	bl	80001f4 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4413      	add	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
		bytes = lastChar - dataStart;
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	73fb      	strb	r3, [r7, #15]
		memcpy(token, dataStart, bytes);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6979      	ldr	r1, [r7, #20]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f88c 	bl	8002bdc <memcpy>
		dataEnd = strstr(usart->rxBuffer, "\r");
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	210d      	movs	r1, #13
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f899 	bl	8002c02 <strchr>
 8002ad0:	6138      	str	r0, [r7, #16]
		memcpy(token + bytes, usart->rxBuffer, dataEnd - usart->rxBuffer);
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	18d0      	adds	r0, r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6999      	ldr	r1, [r3, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6992      	ldr	r2, [r2, #24]
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f000 f879 	bl	8002bdc <memcpy>
 8002aea:	e009      	b.n	8002b00 <SerialRead+0xe2>
	}
	else
	{
		bytes = dataEnd - dataStart;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	73fb      	strb	r3, [r7, #15]
		memcpy(token, dataStart, bytes);
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6979      	ldr	r1, [r7, #20]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f86e 	bl	8002bdc <memcpy>
	}

	// execute the user input request
	ExecuteSerialData(usart, token, I2C_Handle);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff38 	bl	800297c <ExecuteSerialData>

	usart->RxEndOfLineIdx++;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002b12:	3301      	adds	r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	usart->rxIdx = usart->txIdx;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002b28:	46ad      	mov	sp, r5
}
 8002b2a:	bf00      	nop
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b3a:	e003      	b.n	8002b44 <LoopCopyDataInit>

08002b3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b42:	3104      	adds	r1, #4

08002b44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b4c:	d3f6      	bcc.n	8002b3c <CopyDataInit>
  ldr  r2, =_sbss
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b50:	e002      	b.n	8002b58 <LoopFillZerobss>

08002b52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b54:	f842 3b04 	str.w	r3, [r2], #4

08002b58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b5c:	d3f9      	bcc.n	8002b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b5e:	f7ff fe9f 	bl	80028a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f000 f817 	bl	8002b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7ff fbed 	bl	8002344 <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b6c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002b70:	08003508 	.word	0x08003508
  ldr  r0, =_sdata
 8002b74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b78:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002b7c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002b80:	20000178 	.word	0x20000178

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <__errno>:
 8002b88:	4b01      	ldr	r3, [pc, #4]	; (8002b90 <__errno+0x8>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000010 	.word	0x20000010

08002b94 <__libc_init_array>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	4e0d      	ldr	r6, [pc, #52]	; (8002bcc <__libc_init_array+0x38>)
 8002b98:	4c0d      	ldr	r4, [pc, #52]	; (8002bd0 <__libc_init_array+0x3c>)
 8002b9a:	1ba4      	subs	r4, r4, r6
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	42a5      	cmp	r5, r4
 8002ba2:	d109      	bne.n	8002bb8 <__libc_init_array+0x24>
 8002ba4:	4e0b      	ldr	r6, [pc, #44]	; (8002bd4 <__libc_init_array+0x40>)
 8002ba6:	4c0c      	ldr	r4, [pc, #48]	; (8002bd8 <__libc_init_array+0x44>)
 8002ba8:	f000 fc34 	bl	8003414 <_init>
 8002bac:	1ba4      	subs	r4, r4, r6
 8002bae:	10a4      	asrs	r4, r4, #2
 8002bb0:	2500      	movs	r5, #0
 8002bb2:	42a5      	cmp	r5, r4
 8002bb4:	d105      	bne.n	8002bc2 <__libc_init_array+0x2e>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bbc:	4798      	blx	r3
 8002bbe:	3501      	adds	r5, #1
 8002bc0:	e7ee      	b.n	8002ba0 <__libc_init_array+0xc>
 8002bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc6:	4798      	blx	r3
 8002bc8:	3501      	adds	r5, #1
 8002bca:	e7f2      	b.n	8002bb2 <__libc_init_array+0x1e>
 8002bcc:	08003500 	.word	0x08003500
 8002bd0:	08003500 	.word	0x08003500
 8002bd4:	08003500 	.word	0x08003500
 8002bd8:	08003504 	.word	0x08003504

08002bdc <memcpy>:
 8002bdc:	b510      	push	{r4, lr}
 8002bde:	1e43      	subs	r3, r0, #1
 8002be0:	440a      	add	r2, r1
 8002be2:	4291      	cmp	r1, r2
 8002be4:	d100      	bne.n	8002be8 <memcpy+0xc>
 8002be6:	bd10      	pop	{r4, pc}
 8002be8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bf0:	e7f7      	b.n	8002be2 <memcpy+0x6>

08002bf2 <memset>:
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d100      	bne.n	8002bfc <memset+0xa>
 8002bfa:	4770      	bx	lr
 8002bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8002c00:	e7f9      	b.n	8002bf6 <memset+0x4>

08002c02 <strchr>:
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	4603      	mov	r3, r0
 8002c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c0a:	b11a      	cbz	r2, 8002c14 <strchr+0x12>
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d1f9      	bne.n	8002c04 <strchr+0x2>
 8002c10:	4618      	mov	r0, r3
 8002c12:	4770      	bx	lr
 8002c14:	2900      	cmp	r1, #0
 8002c16:	bf18      	it	ne
 8002c18:	2300      	movne	r3, #0
 8002c1a:	e7f9      	b.n	8002c10 <strchr+0xe>

08002c1c <_vsiprintf_r>:
 8002c1c:	b500      	push	{lr}
 8002c1e:	b09b      	sub	sp, #108	; 0x6c
 8002c20:	9100      	str	r1, [sp, #0]
 8002c22:	9104      	str	r1, [sp, #16]
 8002c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c28:	9105      	str	r1, [sp, #20]
 8002c2a:	9102      	str	r1, [sp, #8]
 8002c2c:	4905      	ldr	r1, [pc, #20]	; (8002c44 <_vsiprintf_r+0x28>)
 8002c2e:	9103      	str	r1, [sp, #12]
 8002c30:	4669      	mov	r1, sp
 8002c32:	f000 f86d 	bl	8002d10 <_svfiprintf_r>
 8002c36:	9b00      	ldr	r3, [sp, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	b01b      	add	sp, #108	; 0x6c
 8002c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c42:	bf00      	nop
 8002c44:	ffff0208 	.word	0xffff0208

08002c48 <vsiprintf>:
 8002c48:	4613      	mov	r3, r2
 8002c4a:	460a      	mov	r2, r1
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	4802      	ldr	r0, [pc, #8]	; (8002c58 <vsiprintf+0x10>)
 8002c50:	6800      	ldr	r0, [r0, #0]
 8002c52:	f7ff bfe3 	b.w	8002c1c <_vsiprintf_r>
 8002c56:	bf00      	nop
 8002c58:	20000010 	.word	0x20000010

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	688e      	ldr	r6, [r1, #8]
 8002c62:	429e      	cmp	r6, r3
 8002c64:	4682      	mov	sl, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	d837      	bhi.n	8002cde <__ssputs_r+0x82>
 8002c6e:	898a      	ldrh	r2, [r1, #12]
 8002c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c74:	d031      	beq.n	8002cda <__ssputs_r+0x7e>
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	6909      	ldr	r1, [r1, #16]
 8002c7a:	1a6f      	subs	r7, r5, r1
 8002c7c:	6965      	ldr	r5, [r4, #20]
 8002c7e:	2302      	movs	r3, #2
 8002c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c84:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c88:	f109 0301 	add.w	r3, r9, #1
 8002c8c:	443b      	add	r3, r7
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	bf38      	it	cc
 8002c92:	461d      	movcc	r5, r3
 8002c94:	0553      	lsls	r3, r2, #21
 8002c96:	d530      	bpl.n	8002cfa <__ssputs_r+0x9e>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f000 fb21 	bl	80032e0 <_malloc_r>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	b950      	cbnz	r0, 8002cb8 <__ssputs_r+0x5c>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	f8ca 3000 	str.w	r3, [sl]
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	463a      	mov	r2, r7
 8002cba:	6921      	ldr	r1, [r4, #16]
 8002cbc:	f7ff ff8e 	bl	8002bdc <memcpy>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	6165      	str	r5, [r4, #20]
 8002cd0:	443e      	add	r6, r7
 8002cd2:	1bed      	subs	r5, r5, r7
 8002cd4:	6026      	str	r6, [r4, #0]
 8002cd6:	60a5      	str	r5, [r4, #8]
 8002cd8:	464e      	mov	r6, r9
 8002cda:	454e      	cmp	r6, r9
 8002cdc:	d900      	bls.n	8002ce0 <__ssputs_r+0x84>
 8002cde:	464e      	mov	r6, r9
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	6820      	ldr	r0, [r4, #0]
 8002ce6:	f000 fa93 	bl	8003210 <memmove>
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	1b9b      	subs	r3, r3, r6
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	441e      	add	r6, r3
 8002cf4:	6026      	str	r6, [r4, #0]
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e7dc      	b.n	8002cb4 <__ssputs_r+0x58>
 8002cfa:	462a      	mov	r2, r5
 8002cfc:	f000 fb4a 	bl	8003394 <_realloc_r>
 8002d00:	4606      	mov	r6, r0
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d1e2      	bne.n	8002ccc <__ssputs_r+0x70>
 8002d06:	6921      	ldr	r1, [r4, #16]
 8002d08:	4650      	mov	r0, sl
 8002d0a:	f000 fa9b 	bl	8003244 <_free_r>
 8002d0e:	e7c8      	b.n	8002ca2 <__ssputs_r+0x46>

08002d10 <_svfiprintf_r>:
 8002d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d14:	461d      	mov	r5, r3
 8002d16:	898b      	ldrh	r3, [r1, #12]
 8002d18:	061f      	lsls	r7, r3, #24
 8002d1a:	b09d      	sub	sp, #116	; 0x74
 8002d1c:	4680      	mov	r8, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	4616      	mov	r6, r2
 8002d22:	d50f      	bpl.n	8002d44 <_svfiprintf_r+0x34>
 8002d24:	690b      	ldr	r3, [r1, #16]
 8002d26:	b96b      	cbnz	r3, 8002d44 <_svfiprintf_r+0x34>
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	f000 fad9 	bl	80032e0 <_malloc_r>
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	6120      	str	r0, [r4, #16]
 8002d32:	b928      	cbnz	r0, 8002d40 <_svfiprintf_r+0x30>
 8002d34:	230c      	movs	r3, #12
 8002d36:	f8c8 3000 	str.w	r3, [r8]
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3e:	e0c8      	b.n	8002ed2 <_svfiprintf_r+0x1c2>
 8002d40:	2340      	movs	r3, #64	; 0x40
 8002d42:	6163      	str	r3, [r4, #20]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9309      	str	r3, [sp, #36]	; 0x24
 8002d48:	2320      	movs	r3, #32
 8002d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d4e:	2330      	movs	r3, #48	; 0x30
 8002d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d54:	9503      	str	r5, [sp, #12]
 8002d56:	f04f 0b01 	mov.w	fp, #1
 8002d5a:	4637      	mov	r7, r6
 8002d5c:	463d      	mov	r5, r7
 8002d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d62:	b10b      	cbz	r3, 8002d68 <_svfiprintf_r+0x58>
 8002d64:	2b25      	cmp	r3, #37	; 0x25
 8002d66:	d13e      	bne.n	8002de6 <_svfiprintf_r+0xd6>
 8002d68:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d6c:	d00b      	beq.n	8002d86 <_svfiprintf_r+0x76>
 8002d6e:	4653      	mov	r3, sl
 8002d70:	4632      	mov	r2, r6
 8002d72:	4621      	mov	r1, r4
 8002d74:	4640      	mov	r0, r8
 8002d76:	f7ff ff71 	bl	8002c5c <__ssputs_r>
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	f000 80a4 	beq.w	8002ec8 <_svfiprintf_r+0x1b8>
 8002d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d82:	4453      	add	r3, sl
 8002d84:	9309      	str	r3, [sp, #36]	; 0x24
 8002d86:	783b      	ldrb	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 809d 	beq.w	8002ec8 <_svfiprintf_r+0x1b8>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d98:	9304      	str	r3, [sp, #16]
 8002d9a:	9307      	str	r3, [sp, #28]
 8002d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002da0:	931a      	str	r3, [sp, #104]	; 0x68
 8002da2:	462f      	mov	r7, r5
 8002da4:	2205      	movs	r2, #5
 8002da6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002daa:	4850      	ldr	r0, [pc, #320]	; (8002eec <_svfiprintf_r+0x1dc>)
 8002dac:	f7fd fa30 	bl	8000210 <memchr>
 8002db0:	9b04      	ldr	r3, [sp, #16]
 8002db2:	b9d0      	cbnz	r0, 8002dea <_svfiprintf_r+0xda>
 8002db4:	06d9      	lsls	r1, r3, #27
 8002db6:	bf44      	itt	mi
 8002db8:	2220      	movmi	r2, #32
 8002dba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dbe:	071a      	lsls	r2, r3, #28
 8002dc0:	bf44      	itt	mi
 8002dc2:	222b      	movmi	r2, #43	; 0x2b
 8002dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dc8:	782a      	ldrb	r2, [r5, #0]
 8002dca:	2a2a      	cmp	r2, #42	; 0x2a
 8002dcc:	d015      	beq.n	8002dfa <_svfiprintf_r+0xea>
 8002dce:	9a07      	ldr	r2, [sp, #28]
 8002dd0:	462f      	mov	r7, r5
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	250a      	movs	r5, #10
 8002dd6:	4639      	mov	r1, r7
 8002dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ddc:	3b30      	subs	r3, #48	; 0x30
 8002dde:	2b09      	cmp	r3, #9
 8002de0:	d94d      	bls.n	8002e7e <_svfiprintf_r+0x16e>
 8002de2:	b1b8      	cbz	r0, 8002e14 <_svfiprintf_r+0x104>
 8002de4:	e00f      	b.n	8002e06 <_svfiprintf_r+0xf6>
 8002de6:	462f      	mov	r7, r5
 8002de8:	e7b8      	b.n	8002d5c <_svfiprintf_r+0x4c>
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <_svfiprintf_r+0x1dc>)
 8002dec:	1a80      	subs	r0, r0, r2
 8002dee:	fa0b f000 	lsl.w	r0, fp, r0
 8002df2:	4318      	orrs	r0, r3
 8002df4:	9004      	str	r0, [sp, #16]
 8002df6:	463d      	mov	r5, r7
 8002df8:	e7d3      	b.n	8002da2 <_svfiprintf_r+0x92>
 8002dfa:	9a03      	ldr	r2, [sp, #12]
 8002dfc:	1d11      	adds	r1, r2, #4
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	9103      	str	r1, [sp, #12]
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	db01      	blt.n	8002e0a <_svfiprintf_r+0xfa>
 8002e06:	9207      	str	r2, [sp, #28]
 8002e08:	e004      	b.n	8002e14 <_svfiprintf_r+0x104>
 8002e0a:	4252      	negs	r2, r2
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	9207      	str	r2, [sp, #28]
 8002e12:	9304      	str	r3, [sp, #16]
 8002e14:	783b      	ldrb	r3, [r7, #0]
 8002e16:	2b2e      	cmp	r3, #46	; 0x2e
 8002e18:	d10c      	bne.n	8002e34 <_svfiprintf_r+0x124>
 8002e1a:	787b      	ldrb	r3, [r7, #1]
 8002e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e1e:	d133      	bne.n	8002e88 <_svfiprintf_r+0x178>
 8002e20:	9b03      	ldr	r3, [sp, #12]
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	9203      	str	r2, [sp, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bfb8      	it	lt
 8002e2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e30:	3702      	adds	r7, #2
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	4d2e      	ldr	r5, [pc, #184]	; (8002ef0 <_svfiprintf_r+0x1e0>)
 8002e36:	7839      	ldrb	r1, [r7, #0]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f7fd f9e8 	bl	8000210 <memchr>
 8002e40:	b138      	cbz	r0, 8002e52 <_svfiprintf_r+0x142>
 8002e42:	2340      	movs	r3, #64	; 0x40
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	fa03 f000 	lsl.w	r0, r3, r0
 8002e4a:	9b04      	ldr	r3, [sp, #16]
 8002e4c:	4303      	orrs	r3, r0
 8002e4e:	3701      	adds	r7, #1
 8002e50:	9304      	str	r3, [sp, #16]
 8002e52:	7839      	ldrb	r1, [r7, #0]
 8002e54:	4827      	ldr	r0, [pc, #156]	; (8002ef4 <_svfiprintf_r+0x1e4>)
 8002e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e5a:	2206      	movs	r2, #6
 8002e5c:	1c7e      	adds	r6, r7, #1
 8002e5e:	f7fd f9d7 	bl	8000210 <memchr>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d038      	beq.n	8002ed8 <_svfiprintf_r+0x1c8>
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <_svfiprintf_r+0x1e8>)
 8002e68:	bb13      	cbnz	r3, 8002eb0 <_svfiprintf_r+0x1a0>
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	3307      	adds	r3, #7
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	3308      	adds	r3, #8
 8002e74:	9303      	str	r3, [sp, #12]
 8002e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e78:	444b      	add	r3, r9
 8002e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e7c:	e76d      	b.n	8002d5a <_svfiprintf_r+0x4a>
 8002e7e:	fb05 3202 	mla	r2, r5, r2, r3
 8002e82:	2001      	movs	r0, #1
 8002e84:	460f      	mov	r7, r1
 8002e86:	e7a6      	b.n	8002dd6 <_svfiprintf_r+0xc6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	3701      	adds	r7, #1
 8002e8c:	9305      	str	r3, [sp, #20]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	250a      	movs	r5, #10
 8002e92:	4638      	mov	r0, r7
 8002e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e98:	3a30      	subs	r2, #48	; 0x30
 8002e9a:	2a09      	cmp	r2, #9
 8002e9c:	d903      	bls.n	8002ea6 <_svfiprintf_r+0x196>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0c8      	beq.n	8002e34 <_svfiprintf_r+0x124>
 8002ea2:	9105      	str	r1, [sp, #20]
 8002ea4:	e7c6      	b.n	8002e34 <_svfiprintf_r+0x124>
 8002ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4607      	mov	r7, r0
 8002eae:	e7f0      	b.n	8002e92 <_svfiprintf_r+0x182>
 8002eb0:	ab03      	add	r3, sp, #12
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <_svfiprintf_r+0x1ec>)
 8002eb8:	a904      	add	r1, sp, #16
 8002eba:	4640      	mov	r0, r8
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002ec4:	4681      	mov	r9, r0
 8002ec6:	d1d6      	bne.n	8002e76 <_svfiprintf_r+0x166>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	065b      	lsls	r3, r3, #25
 8002ecc:	f53f af35 	bmi.w	8002d3a <_svfiprintf_r+0x2a>
 8002ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ed2:	b01d      	add	sp, #116	; 0x74
 8002ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed8:	ab03      	add	r3, sp, #12
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4622      	mov	r2, r4
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <_svfiprintf_r+0x1ec>)
 8002ee0:	a904      	add	r1, sp, #16
 8002ee2:	4640      	mov	r0, r8
 8002ee4:	f000 f882 	bl	8002fec <_printf_i>
 8002ee8:	e7ea      	b.n	8002ec0 <_svfiprintf_r+0x1b0>
 8002eea:	bf00      	nop
 8002eec:	080034c4 	.word	0x080034c4
 8002ef0:	080034ca 	.word	0x080034ca
 8002ef4:	080034ce 	.word	0x080034ce
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	08002c5d 	.word	0x08002c5d

08002f00 <_printf_common>:
 8002f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f04:	4691      	mov	r9, r2
 8002f06:	461f      	mov	r7, r3
 8002f08:	688a      	ldr	r2, [r1, #8]
 8002f0a:	690b      	ldr	r3, [r1, #16]
 8002f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bfb8      	it	lt
 8002f14:	4613      	movlt	r3, r2
 8002f16:	f8c9 3000 	str.w	r3, [r9]
 8002f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f1e:	4606      	mov	r6, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	b112      	cbz	r2, 8002f2a <_printf_common+0x2a>
 8002f24:	3301      	adds	r3, #1
 8002f26:	f8c9 3000 	str.w	r3, [r9]
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	0699      	lsls	r1, r3, #26
 8002f2e:	bf42      	ittt	mi
 8002f30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f34:	3302      	addmi	r3, #2
 8002f36:	f8c9 3000 	strmi.w	r3, [r9]
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	f015 0506 	ands.w	r5, r5, #6
 8002f40:	d107      	bne.n	8002f52 <_printf_common+0x52>
 8002f42:	f104 0a19 	add.w	sl, r4, #25
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	f8d9 2000 	ldr.w	r2, [r9]
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	42ab      	cmp	r3, r5
 8002f50:	dc28      	bgt.n	8002fa4 <_printf_common+0xa4>
 8002f52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	3300      	adds	r3, #0
 8002f5a:	bf18      	it	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	0692      	lsls	r2, r2, #26
 8002f60:	d42d      	bmi.n	8002fbe <_printf_common+0xbe>
 8002f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f66:	4639      	mov	r1, r7
 8002f68:	4630      	mov	r0, r6
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d020      	beq.n	8002fb2 <_printf_common+0xb2>
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	68e5      	ldr	r5, [r4, #12]
 8002f74:	f8d9 2000 	ldr.w	r2, [r9]
 8002f78:	f003 0306 	and.w	r3, r3, #6
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	bf08      	it	eq
 8002f80:	1aad      	subeq	r5, r5, r2
 8002f82:	68a3      	ldr	r3, [r4, #8]
 8002f84:	6922      	ldr	r2, [r4, #16]
 8002f86:	bf0c      	ite	eq
 8002f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f8c:	2500      	movne	r5, #0
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	bfc4      	itt	gt
 8002f92:	1a9b      	subgt	r3, r3, r2
 8002f94:	18ed      	addgt	r5, r5, r3
 8002f96:	f04f 0900 	mov.w	r9, #0
 8002f9a:	341a      	adds	r4, #26
 8002f9c:	454d      	cmp	r5, r9
 8002f9e:	d11a      	bne.n	8002fd6 <_printf_common+0xd6>
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e008      	b.n	8002fb6 <_printf_common+0xb6>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4652      	mov	r2, sl
 8002fa8:	4639      	mov	r1, r7
 8002faa:	4630      	mov	r0, r6
 8002fac:	47c0      	blx	r8
 8002fae:	3001      	adds	r0, #1
 8002fb0:	d103      	bne.n	8002fba <_printf_common+0xba>
 8002fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fba:	3501      	adds	r5, #1
 8002fbc:	e7c3      	b.n	8002f46 <_printf_common+0x46>
 8002fbe:	18e1      	adds	r1, r4, r3
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	2030      	movs	r0, #48	; 0x30
 8002fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fc8:	4422      	add	r2, r4
 8002fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	e7c5      	b.n	8002f62 <_printf_common+0x62>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	4622      	mov	r2, r4
 8002fda:	4639      	mov	r1, r7
 8002fdc:	4630      	mov	r0, r6
 8002fde:	47c0      	blx	r8
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d0e6      	beq.n	8002fb2 <_printf_common+0xb2>
 8002fe4:	f109 0901 	add.w	r9, r9, #1
 8002fe8:	e7d8      	b.n	8002f9c <_printf_common+0x9c>
	...

08002fec <_printf_i>:
 8002fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	7e09      	ldrb	r1, [r1, #24]
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	296e      	cmp	r1, #110	; 0x6e
 8002ffc:	4617      	mov	r7, r2
 8002ffe:	4606      	mov	r6, r0
 8003000:	4698      	mov	r8, r3
 8003002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003004:	f000 80b3 	beq.w	800316e <_printf_i+0x182>
 8003008:	d822      	bhi.n	8003050 <_printf_i+0x64>
 800300a:	2963      	cmp	r1, #99	; 0x63
 800300c:	d036      	beq.n	800307c <_printf_i+0x90>
 800300e:	d80a      	bhi.n	8003026 <_printf_i+0x3a>
 8003010:	2900      	cmp	r1, #0
 8003012:	f000 80b9 	beq.w	8003188 <_printf_i+0x19c>
 8003016:	2958      	cmp	r1, #88	; 0x58
 8003018:	f000 8083 	beq.w	8003122 <_printf_i+0x136>
 800301c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003024:	e032      	b.n	800308c <_printf_i+0xa0>
 8003026:	2964      	cmp	r1, #100	; 0x64
 8003028:	d001      	beq.n	800302e <_printf_i+0x42>
 800302a:	2969      	cmp	r1, #105	; 0x69
 800302c:	d1f6      	bne.n	800301c <_printf_i+0x30>
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	0605      	lsls	r5, r0, #24
 8003034:	f103 0104 	add.w	r1, r3, #4
 8003038:	d52a      	bpl.n	8003090 <_printf_i+0xa4>
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da03      	bge.n	800304a <_printf_i+0x5e>
 8003042:	222d      	movs	r2, #45	; 0x2d
 8003044:	425b      	negs	r3, r3
 8003046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800304a:	486f      	ldr	r0, [pc, #444]	; (8003208 <_printf_i+0x21c>)
 800304c:	220a      	movs	r2, #10
 800304e:	e039      	b.n	80030c4 <_printf_i+0xd8>
 8003050:	2973      	cmp	r1, #115	; 0x73
 8003052:	f000 809d 	beq.w	8003190 <_printf_i+0x1a4>
 8003056:	d808      	bhi.n	800306a <_printf_i+0x7e>
 8003058:	296f      	cmp	r1, #111	; 0x6f
 800305a:	d020      	beq.n	800309e <_printf_i+0xb2>
 800305c:	2970      	cmp	r1, #112	; 0x70
 800305e:	d1dd      	bne.n	800301c <_printf_i+0x30>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	f043 0320 	orr.w	r3, r3, #32
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	e003      	b.n	8003072 <_printf_i+0x86>
 800306a:	2975      	cmp	r1, #117	; 0x75
 800306c:	d017      	beq.n	800309e <_printf_i+0xb2>
 800306e:	2978      	cmp	r1, #120	; 0x78
 8003070:	d1d4      	bne.n	800301c <_printf_i+0x30>
 8003072:	2378      	movs	r3, #120	; 0x78
 8003074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003078:	4864      	ldr	r0, [pc, #400]	; (800320c <_printf_i+0x220>)
 800307a:	e055      	b.n	8003128 <_printf_i+0x13c>
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	1d19      	adds	r1, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6011      	str	r1, [r2, #0]
 8003084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800308c:	2301      	movs	r3, #1
 800308e:	e08c      	b.n	80031aa <_printf_i+0x1be>
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6011      	str	r1, [r2, #0]
 8003094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003098:	bf18      	it	ne
 800309a:	b21b      	sxthne	r3, r3
 800309c:	e7cf      	b.n	800303e <_printf_i+0x52>
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	6825      	ldr	r5, [r4, #0]
 80030a2:	1d18      	adds	r0, r3, #4
 80030a4:	6010      	str	r0, [r2, #0]
 80030a6:	0628      	lsls	r0, r5, #24
 80030a8:	d501      	bpl.n	80030ae <_printf_i+0xc2>
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	e002      	b.n	80030b4 <_printf_i+0xc8>
 80030ae:	0668      	lsls	r0, r5, #25
 80030b0:	d5fb      	bpl.n	80030aa <_printf_i+0xbe>
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	4854      	ldr	r0, [pc, #336]	; (8003208 <_printf_i+0x21c>)
 80030b6:	296f      	cmp	r1, #111	; 0x6f
 80030b8:	bf14      	ite	ne
 80030ba:	220a      	movne	r2, #10
 80030bc:	2208      	moveq	r2, #8
 80030be:	2100      	movs	r1, #0
 80030c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030c4:	6865      	ldr	r5, [r4, #4]
 80030c6:	60a5      	str	r5, [r4, #8]
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	f2c0 8095 	blt.w	80031f8 <_printf_i+0x20c>
 80030ce:	6821      	ldr	r1, [r4, #0]
 80030d0:	f021 0104 	bic.w	r1, r1, #4
 80030d4:	6021      	str	r1, [r4, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d13d      	bne.n	8003156 <_printf_i+0x16a>
 80030da:	2d00      	cmp	r5, #0
 80030dc:	f040 808e 	bne.w	80031fc <_printf_i+0x210>
 80030e0:	4665      	mov	r5, ip
 80030e2:	2a08      	cmp	r2, #8
 80030e4:	d10b      	bne.n	80030fe <_printf_i+0x112>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	07db      	lsls	r3, r3, #31
 80030ea:	d508      	bpl.n	80030fe <_printf_i+0x112>
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	6862      	ldr	r2, [r4, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	bfde      	ittt	le
 80030f4:	2330      	movle	r3, #48	; 0x30
 80030f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030fe:	ebac 0305 	sub.w	r3, ip, r5
 8003102:	6123      	str	r3, [r4, #16]
 8003104:	f8cd 8000 	str.w	r8, [sp]
 8003108:	463b      	mov	r3, r7
 800310a:	aa03      	add	r2, sp, #12
 800310c:	4621      	mov	r1, r4
 800310e:	4630      	mov	r0, r6
 8003110:	f7ff fef6 	bl	8002f00 <_printf_common>
 8003114:	3001      	adds	r0, #1
 8003116:	d14d      	bne.n	80031b4 <_printf_i+0x1c8>
 8003118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800311c:	b005      	add	sp, #20
 800311e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003122:	4839      	ldr	r0, [pc, #228]	; (8003208 <_printf_i+0x21c>)
 8003124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003128:	6813      	ldr	r3, [r2, #0]
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	1d1d      	adds	r5, r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6015      	str	r5, [r2, #0]
 8003132:	060a      	lsls	r2, r1, #24
 8003134:	d50b      	bpl.n	800314e <_printf_i+0x162>
 8003136:	07ca      	lsls	r2, r1, #31
 8003138:	bf44      	itt	mi
 800313a:	f041 0120 	orrmi.w	r1, r1, #32
 800313e:	6021      	strmi	r1, [r4, #0]
 8003140:	b91b      	cbnz	r3, 800314a <_printf_i+0x15e>
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	f022 0220 	bic.w	r2, r2, #32
 8003148:	6022      	str	r2, [r4, #0]
 800314a:	2210      	movs	r2, #16
 800314c:	e7b7      	b.n	80030be <_printf_i+0xd2>
 800314e:	064d      	lsls	r5, r1, #25
 8003150:	bf48      	it	mi
 8003152:	b29b      	uxthmi	r3, r3
 8003154:	e7ef      	b.n	8003136 <_printf_i+0x14a>
 8003156:	4665      	mov	r5, ip
 8003158:	fbb3 f1f2 	udiv	r1, r3, r2
 800315c:	fb02 3311 	mls	r3, r2, r1, r3
 8003160:	5cc3      	ldrb	r3, [r0, r3]
 8003162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003166:	460b      	mov	r3, r1
 8003168:	2900      	cmp	r1, #0
 800316a:	d1f5      	bne.n	8003158 <_printf_i+0x16c>
 800316c:	e7b9      	b.n	80030e2 <_printf_i+0xf6>
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	6825      	ldr	r5, [r4, #0]
 8003172:	6961      	ldr	r1, [r4, #20]
 8003174:	1d18      	adds	r0, r3, #4
 8003176:	6010      	str	r0, [r2, #0]
 8003178:	0628      	lsls	r0, r5, #24
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	d501      	bpl.n	8003182 <_printf_i+0x196>
 800317e:	6019      	str	r1, [r3, #0]
 8003180:	e002      	b.n	8003188 <_printf_i+0x19c>
 8003182:	066a      	lsls	r2, r5, #25
 8003184:	d5fb      	bpl.n	800317e <_printf_i+0x192>
 8003186:	8019      	strh	r1, [r3, #0]
 8003188:	2300      	movs	r3, #0
 800318a:	6123      	str	r3, [r4, #16]
 800318c:	4665      	mov	r5, ip
 800318e:	e7b9      	b.n	8003104 <_printf_i+0x118>
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	1d19      	adds	r1, r3, #4
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	681d      	ldr	r5, [r3, #0]
 8003198:	6862      	ldr	r2, [r4, #4]
 800319a:	2100      	movs	r1, #0
 800319c:	4628      	mov	r0, r5
 800319e:	f7fd f837 	bl	8000210 <memchr>
 80031a2:	b108      	cbz	r0, 80031a8 <_printf_i+0x1bc>
 80031a4:	1b40      	subs	r0, r0, r5
 80031a6:	6060      	str	r0, [r4, #4]
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	2300      	movs	r3, #0
 80031ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031b2:	e7a7      	b.n	8003104 <_printf_i+0x118>
 80031b4:	6923      	ldr	r3, [r4, #16]
 80031b6:	462a      	mov	r2, r5
 80031b8:	4639      	mov	r1, r7
 80031ba:	4630      	mov	r0, r6
 80031bc:	47c0      	blx	r8
 80031be:	3001      	adds	r0, #1
 80031c0:	d0aa      	beq.n	8003118 <_printf_i+0x12c>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	079b      	lsls	r3, r3, #30
 80031c6:	d413      	bmi.n	80031f0 <_printf_i+0x204>
 80031c8:	68e0      	ldr	r0, [r4, #12]
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	4298      	cmp	r0, r3
 80031ce:	bfb8      	it	lt
 80031d0:	4618      	movlt	r0, r3
 80031d2:	e7a3      	b.n	800311c <_printf_i+0x130>
 80031d4:	2301      	movs	r3, #1
 80031d6:	464a      	mov	r2, r9
 80031d8:	4639      	mov	r1, r7
 80031da:	4630      	mov	r0, r6
 80031dc:	47c0      	blx	r8
 80031de:	3001      	adds	r0, #1
 80031e0:	d09a      	beq.n	8003118 <_printf_i+0x12c>
 80031e2:	3501      	adds	r5, #1
 80031e4:	68e3      	ldr	r3, [r4, #12]
 80031e6:	9a03      	ldr	r2, [sp, #12]
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	42ab      	cmp	r3, r5
 80031ec:	dcf2      	bgt.n	80031d4 <_printf_i+0x1e8>
 80031ee:	e7eb      	b.n	80031c8 <_printf_i+0x1dc>
 80031f0:	2500      	movs	r5, #0
 80031f2:	f104 0919 	add.w	r9, r4, #25
 80031f6:	e7f5      	b.n	80031e4 <_printf_i+0x1f8>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ac      	bne.n	8003156 <_printf_i+0x16a>
 80031fc:	7803      	ldrb	r3, [r0, #0]
 80031fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003206:	e76c      	b.n	80030e2 <_printf_i+0xf6>
 8003208:	080034d5 	.word	0x080034d5
 800320c:	080034e6 	.word	0x080034e6

08003210 <memmove>:
 8003210:	4288      	cmp	r0, r1
 8003212:	b510      	push	{r4, lr}
 8003214:	eb01 0302 	add.w	r3, r1, r2
 8003218:	d807      	bhi.n	800322a <memmove+0x1a>
 800321a:	1e42      	subs	r2, r0, #1
 800321c:	4299      	cmp	r1, r3
 800321e:	d00a      	beq.n	8003236 <memmove+0x26>
 8003220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003224:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003228:	e7f8      	b.n	800321c <memmove+0xc>
 800322a:	4283      	cmp	r3, r0
 800322c:	d9f5      	bls.n	800321a <memmove+0xa>
 800322e:	1881      	adds	r1, r0, r2
 8003230:	1ad2      	subs	r2, r2, r3
 8003232:	42d3      	cmn	r3, r2
 8003234:	d100      	bne.n	8003238 <memmove+0x28>
 8003236:	bd10      	pop	{r4, pc}
 8003238:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800323c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003240:	e7f7      	b.n	8003232 <memmove+0x22>
	...

08003244 <_free_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	2900      	cmp	r1, #0
 800324a:	d045      	beq.n	80032d8 <_free_r+0x94>
 800324c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003250:	1f0c      	subs	r4, r1, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bfb8      	it	lt
 8003256:	18e4      	addlt	r4, r4, r3
 8003258:	f000 f8d2 	bl	8003400 <__malloc_lock>
 800325c:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <_free_r+0x98>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	4610      	mov	r0, r2
 8003262:	b933      	cbnz	r3, 8003272 <_free_r+0x2e>
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	6014      	str	r4, [r2, #0]
 8003268:	4628      	mov	r0, r5
 800326a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800326e:	f000 b8c8 	b.w	8003402 <__malloc_unlock>
 8003272:	42a3      	cmp	r3, r4
 8003274:	d90c      	bls.n	8003290 <_free_r+0x4c>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	1862      	adds	r2, r4, r1
 800327a:	4293      	cmp	r3, r2
 800327c:	bf04      	itt	eq
 800327e:	681a      	ldreq	r2, [r3, #0]
 8003280:	685b      	ldreq	r3, [r3, #4]
 8003282:	6063      	str	r3, [r4, #4]
 8003284:	bf04      	itt	eq
 8003286:	1852      	addeq	r2, r2, r1
 8003288:	6022      	streq	r2, [r4, #0]
 800328a:	6004      	str	r4, [r0, #0]
 800328c:	e7ec      	b.n	8003268 <_free_r+0x24>
 800328e:	4613      	mov	r3, r2
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	b10a      	cbz	r2, 8003298 <_free_r+0x54>
 8003294:	42a2      	cmp	r2, r4
 8003296:	d9fa      	bls.n	800328e <_free_r+0x4a>
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	1858      	adds	r0, r3, r1
 800329c:	42a0      	cmp	r0, r4
 800329e:	d10b      	bne.n	80032b8 <_free_r+0x74>
 80032a0:	6820      	ldr	r0, [r4, #0]
 80032a2:	4401      	add	r1, r0
 80032a4:	1858      	adds	r0, r3, r1
 80032a6:	4282      	cmp	r2, r0
 80032a8:	6019      	str	r1, [r3, #0]
 80032aa:	d1dd      	bne.n	8003268 <_free_r+0x24>
 80032ac:	6810      	ldr	r0, [r2, #0]
 80032ae:	6852      	ldr	r2, [r2, #4]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	4401      	add	r1, r0
 80032b4:	6019      	str	r1, [r3, #0]
 80032b6:	e7d7      	b.n	8003268 <_free_r+0x24>
 80032b8:	d902      	bls.n	80032c0 <_free_r+0x7c>
 80032ba:	230c      	movs	r3, #12
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	e7d3      	b.n	8003268 <_free_r+0x24>
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	1821      	adds	r1, r4, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	bf04      	itt	eq
 80032c8:	6811      	ldreq	r1, [r2, #0]
 80032ca:	6852      	ldreq	r2, [r2, #4]
 80032cc:	6062      	str	r2, [r4, #4]
 80032ce:	bf04      	itt	eq
 80032d0:	1809      	addeq	r1, r1, r0
 80032d2:	6021      	streq	r1, [r4, #0]
 80032d4:	605c      	str	r4, [r3, #4]
 80032d6:	e7c7      	b.n	8003268 <_free_r+0x24>
 80032d8:	bd38      	pop	{r3, r4, r5, pc}
 80032da:	bf00      	nop
 80032dc:	200000b0 	.word	0x200000b0

080032e0 <_malloc_r>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	1ccd      	adds	r5, r1, #3
 80032e4:	f025 0503 	bic.w	r5, r5, #3
 80032e8:	3508      	adds	r5, #8
 80032ea:	2d0c      	cmp	r5, #12
 80032ec:	bf38      	it	cc
 80032ee:	250c      	movcc	r5, #12
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	4606      	mov	r6, r0
 80032f4:	db01      	blt.n	80032fa <_malloc_r+0x1a>
 80032f6:	42a9      	cmp	r1, r5
 80032f8:	d903      	bls.n	8003302 <_malloc_r+0x22>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6033      	str	r3, [r6, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	f000 f87d 	bl	8003400 <__malloc_lock>
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <_malloc_r+0xac>)
 8003308:	6814      	ldr	r4, [r2, #0]
 800330a:	4621      	mov	r1, r4
 800330c:	b991      	cbnz	r1, 8003334 <_malloc_r+0x54>
 800330e:	4c20      	ldr	r4, [pc, #128]	; (8003390 <_malloc_r+0xb0>)
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	b91b      	cbnz	r3, 800331c <_malloc_r+0x3c>
 8003314:	4630      	mov	r0, r6
 8003316:	f000 f863 	bl	80033e0 <_sbrk_r>
 800331a:	6020      	str	r0, [r4, #0]
 800331c:	4629      	mov	r1, r5
 800331e:	4630      	mov	r0, r6
 8003320:	f000 f85e 	bl	80033e0 <_sbrk_r>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d124      	bne.n	8003372 <_malloc_r+0x92>
 8003328:	230c      	movs	r3, #12
 800332a:	6033      	str	r3, [r6, #0]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f868 	bl	8003402 <__malloc_unlock>
 8003332:	e7e4      	b.n	80032fe <_malloc_r+0x1e>
 8003334:	680b      	ldr	r3, [r1, #0]
 8003336:	1b5b      	subs	r3, r3, r5
 8003338:	d418      	bmi.n	800336c <_malloc_r+0x8c>
 800333a:	2b0b      	cmp	r3, #11
 800333c:	d90f      	bls.n	800335e <_malloc_r+0x7e>
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	50cd      	str	r5, [r1, r3]
 8003342:	18cc      	adds	r4, r1, r3
 8003344:	4630      	mov	r0, r6
 8003346:	f000 f85c 	bl	8003402 <__malloc_unlock>
 800334a:	f104 000b 	add.w	r0, r4, #11
 800334e:	1d23      	adds	r3, r4, #4
 8003350:	f020 0007 	bic.w	r0, r0, #7
 8003354:	1ac3      	subs	r3, r0, r3
 8003356:	d0d3      	beq.n	8003300 <_malloc_r+0x20>
 8003358:	425a      	negs	r2, r3
 800335a:	50e2      	str	r2, [r4, r3]
 800335c:	e7d0      	b.n	8003300 <_malloc_r+0x20>
 800335e:	428c      	cmp	r4, r1
 8003360:	684b      	ldr	r3, [r1, #4]
 8003362:	bf16      	itet	ne
 8003364:	6063      	strne	r3, [r4, #4]
 8003366:	6013      	streq	r3, [r2, #0]
 8003368:	460c      	movne	r4, r1
 800336a:	e7eb      	b.n	8003344 <_malloc_r+0x64>
 800336c:	460c      	mov	r4, r1
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	e7cc      	b.n	800330c <_malloc_r+0x2c>
 8003372:	1cc4      	adds	r4, r0, #3
 8003374:	f024 0403 	bic.w	r4, r4, #3
 8003378:	42a0      	cmp	r0, r4
 800337a:	d005      	beq.n	8003388 <_malloc_r+0xa8>
 800337c:	1a21      	subs	r1, r4, r0
 800337e:	4630      	mov	r0, r6
 8003380:	f000 f82e 	bl	80033e0 <_sbrk_r>
 8003384:	3001      	adds	r0, #1
 8003386:	d0cf      	beq.n	8003328 <_malloc_r+0x48>
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	e7db      	b.n	8003344 <_malloc_r+0x64>
 800338c:	200000b0 	.word	0x200000b0
 8003390:	200000b4 	.word	0x200000b4

08003394 <_realloc_r>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	4607      	mov	r7, r0
 8003398:	4614      	mov	r4, r2
 800339a:	460e      	mov	r6, r1
 800339c:	b921      	cbnz	r1, 80033a8 <_realloc_r+0x14>
 800339e:	4611      	mov	r1, r2
 80033a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033a4:	f7ff bf9c 	b.w	80032e0 <_malloc_r>
 80033a8:	b922      	cbnz	r2, 80033b4 <_realloc_r+0x20>
 80033aa:	f7ff ff4b 	bl	8003244 <_free_r>
 80033ae:	4625      	mov	r5, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b4:	f000 f826 	bl	8003404 <_malloc_usable_size_r>
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d20f      	bcs.n	80033dc <_realloc_r+0x48>
 80033bc:	4621      	mov	r1, r4
 80033be:	4638      	mov	r0, r7
 80033c0:	f7ff ff8e 	bl	80032e0 <_malloc_r>
 80033c4:	4605      	mov	r5, r0
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d0f2      	beq.n	80033b0 <_realloc_r+0x1c>
 80033ca:	4631      	mov	r1, r6
 80033cc:	4622      	mov	r2, r4
 80033ce:	f7ff fc05 	bl	8002bdc <memcpy>
 80033d2:	4631      	mov	r1, r6
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ff35 	bl	8003244 <_free_r>
 80033da:	e7e9      	b.n	80033b0 <_realloc_r+0x1c>
 80033dc:	4635      	mov	r5, r6
 80033de:	e7e7      	b.n	80033b0 <_realloc_r+0x1c>

080033e0 <_sbrk_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4c06      	ldr	r4, [pc, #24]	; (80033fc <_sbrk_r+0x1c>)
 80033e4:	2300      	movs	r3, #0
 80033e6:	4605      	mov	r5, r0
 80033e8:	4608      	mov	r0, r1
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	f7ff fa2c 	bl	8002848 <_sbrk>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d102      	bne.n	80033fa <_sbrk_r+0x1a>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	b103      	cbz	r3, 80033fa <_sbrk_r+0x1a>
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	20000174 	.word	0x20000174

08003400 <__malloc_lock>:
 8003400:	4770      	bx	lr

08003402 <__malloc_unlock>:
 8003402:	4770      	bx	lr

08003404 <_malloc_usable_size_r>:
 8003404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003408:	1f18      	subs	r0, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfbc      	itt	lt
 800340e:	580b      	ldrlt	r3, [r1, r0]
 8003410:	18c0      	addlt	r0, r0, r3
 8003412:	4770      	bx	lr

08003414 <_init>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr

08003420 <_fini>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr
