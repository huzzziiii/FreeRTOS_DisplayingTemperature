
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051cc  080051cc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080051d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000080  08005254  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005254  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb59  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f4  00000000  00000000  0002fc09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e8  00000000  00000000  00031f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181be  00000000  00000000  000331e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1eb  00000000  00000000  0004b39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008aa14  00000000  00000000  00056589  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000e1018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d14 	.word	0x08004d14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004d14 	.word	0x08004d14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <DMA_InterruptHandler>:

/*
 * @brief: interrupt handler for DMA
 */
void DMA_InterruptHandler(DMA_Handle_t *dmaHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/* half transfer interrupt handling */
	if (dmaHandle->DMA_Stream->CR & DMA_IT_HT)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d010      	beq.n	80005c8 <DMA_InterruptHandler+0x38>
	{
		// disable interrupts
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_HT);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f022 0208 	bic.w	r2, r2, #8
 80005b4:	601a      	str	r2, [r3, #0]

		// invoke calback for processing
		if (dmaHandle->HalfXferCplCallback != NULL)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d033      	beq.n	8000626 <DMA_InterruptHandler+0x96>
		{
			dmaHandle->HalfXferCplCallback(dmaHandle);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	4798      	blx	r3
		if (dmaHandle->XferErrorCallback != NULL)
		{
			dmaHandle->XferErrorCallback(dmaHandle);
		}
	}
}
 80005c6:	e02e      	b.n	8000626 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TC)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d010      	beq.n	80005f8 <DMA_InterruptHandler+0x68>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TC);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f022 0210 	bic.w	r2, r2, #16
 80005e4:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferCplCallback != NULL)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d01b      	beq.n	8000626 <DMA_InterruptHandler+0x96>
			dmaHandle->XferCplCallback(dmaHandle);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	4798      	blx	r3
}
 80005f6:	e016      	b.n	8000626 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TE)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00f      	beq.n	8000626 <DMA_InterruptHandler+0x96>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TE);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	f022 0204 	bic.w	r2, r2, #4
 8000614:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferErrorCallback != NULL)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <DMA_InterruptHandler+0x96>
			dmaHandle->XferErrorCallback(dmaHandle);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <I2C_PeripheralClkControl>:
/* Function definitions -----------------------------------------------------*/

/*
 * @I2C_PeripheralClkControl: Enables the peripheral clock for a respective I2C interface
 */
void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <I2C_PeripheralClkControl+0x54>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 8000646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 800064c:	e014      	b.n	8000678 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <I2C_PeripheralClkControl+0x5c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 800065c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000662:	e009      	b.n	8000678 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <I2C_PeripheralClkControl+0x60>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d105      	bne.n	8000678 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a05      	ldr	r2, [pc, #20]	; (8000688 <I2C_PeripheralClkControl+0x58>)
 8000672:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40005400 	.word	0x40005400
 8000688:	40023800 	.word	0x40023800
 800068c:	40005800 	.word	0x40005800
 8000690:	40005c00 	.word	0x40005c00

08000694 <I2C_Init>:

/*
 * @I2C_Init: Populates I2C struct
 */
void I2C_Init(I2C_Handle_t *I2C_handle) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	// initializing static pointer
	I2C_handle_p = I2C_handle;
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <I2C_Init+0xe4>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffc2 	bl	8000630 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a5b      	ldrb	r3, [r3, #9]
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4619      	mov	r1, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7a1b      	ldrb	r3, [r3, #8]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006e6:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <I2C_Init+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <I2C_Init+0xec>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	0c9b      	lsrs	r3, r3, #18
 80006f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006f8:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6859      	ldr	r1, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <I2C_Init+0xf0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d10f      	bne.n	8000734 <I2C_Init+0xa0>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <I2C_Init+0xe8>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	69d9      	ldr	r1, [r3, #28]
 800072a:	897a      	ldrh	r2, [r7, #10]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	430a      	orrs	r2, r1
 8000732:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <I2C_Init+0xf0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d80f      	bhi.n	800075e <I2C_Init+0xca>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a19      	ldr	r1, [r3, #32]
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <I2C_Init+0xe8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <I2C_Init+0xec>)
 800074a:	fba2 2303 	umull	r2, r3, r2, r3
 800074e:	0c9b      	lsrs	r3, r3, #18
 8000750:	3301      	adds	r3, #1
 8000752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 0201 	orr.w	r2, r2, #1
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000009c 	.word	0x2000009c
 800077c:	20000018 	.word	0x20000018
 8000780:	431bde83 	.word	0x431bde83
 8000784:	000186a0 	.word	0x000186a0

08000788 <I2C_GenerateStopCondition>:

void I2C_GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
}

static void I2C_GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <I2C_WriteSlaveAddress>:
}

/*
 * @I2C_WriteSlaveAddress: Writes slave address to DR
 */
static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7a1b      	ldrb	r3, [r3, #8]
 80007b8:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <I2C_WriteSlaveAddress+0x28>
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	f023 0301 	bic.w	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	e003      	b.n	80007d8 <I2C_WriteSlaveAddress+0x30>
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	611a      	str	r2, [r3, #16]
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <I2C_ClearADDRFlag>:

/*
 * @I2C_ClearADDRFlag: Reads SR1 and SR2 registers to clear ADDR flag
 * During RXing: when 2 bytes are to be read, reset the ACK and set the POS bit
 */
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <I2C_ClearADDRFlag+0x50>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7b1b      	ldrb	r3, [r3, #12]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b02      	cmp	r3, #2
 8000802:	d113      	bne.n	800082c <I2C_ClearADDRFlag+0x3c>
	{
		if (I2C_handle_p->rxBufferLength == 2)
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <I2C_ClearADDRFlag+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	7edb      	ldrb	r3, [r3, #27]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b02      	cmp	r3, #2
 800080e:	d10d      	bne.n	800082c <I2C_ClearADDRFlag+0x3c>
		{
			I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <I2C_ClearADDRFlag+0x50>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f813 	bl	8000844 <I2C_ControlAcking>
			I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <I2C_ClearADDRFlag+0x50>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800082a:	601a      	str	r2, [r3, #0]
		}
	}

	dummyRead = pI2Cx->SR1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	60fb      	str	r3, [r7, #12]
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000009c 	.word	0x2000009c

08000844 <I2C_ControlAcking>:

/*
 * @I2C_ControlAcking: enables/disables the ACK bit for I2C
 */
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	if (enable)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000862:	e005      	b.n	8000870 <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <I2C1_EV_IRQHandler>:

/*
 * I2C1_EV_IRQHandler: Interrupt handler for I2C
 */
void I2C1_EV_IRQHandler (void)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 8000882:	4b6d      	ldr	r3, [pc, #436]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	0a5b      	lsrs	r3, r3, #9
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 8000894:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	0a9b      	lsrs	r3, r3, #10
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;			// stores register values

	if (eventInterrupt)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80c1 	beq.w	8000a30 <I2C1_EV_IRQHandler+0x1b4>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 80008ae:	4b62      	ldr	r3, [pc, #392]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	717b      	strb	r3, [r7, #5]
		if (temp)
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d018      	beq.n	80008f6 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 80008c4:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d106      	bne.n	80008de <I2C1_EV_IRQHandler+0x62>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 80008d0:	4b59      	ldr	r3, [pc, #356]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff66 	bl	80007a8 <I2C_WriteSlaveAddress>
 80008dc:	e00b      	b.n	80008f6 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80008de:	4b56      	ldr	r3, [pc, #344]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7b1b      	ldrb	r3, [r3, #12]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d105      	bne.n	80008f6 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff59 	bl	80007a8 <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	085b      	lsrs	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <I2C1_EV_IRQHandler+0x9e>
		{
			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 800090e:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff6b 	bl	80007f0 <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d022      	beq.n	8000966 <I2C1_EV_IRQHandler+0xea>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 8000920:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	09db      	lsrs	r3, r3, #7
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d007      	beq.n	8000948 <I2C1_EV_IRQHandler+0xcc>
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b03      	cmp	r3, #3
 8000942:	d101      	bne.n	8000948 <I2C1_EV_IRQHandler+0xcc>
			{
				I2C_TXE_Interrupt();
 8000944:	f000 f8f8 	bl	8000b38 <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	099b      	lsrs	r3, r3, #6
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <I2C1_EV_IRQHandler+0xea>
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000978:	797b      	ldrb	r3, [r7, #5]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d058      	beq.n	8000a30 <I2C1_EV_IRQHandler+0x1b4>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)					// TXE=1, BTF=1
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	7b1b      	ldrb	r3, [r3, #12]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b03      	cmp	r3, #3
 8000988:	d10d      	bne.n	80009a6 <I2C1_EV_IRQHandler+0x12a>
			{
				if (!I2C_handle_p->txBufferLength)						// if there are no more TX bytes to be sent
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	7e9b      	ldrb	r3, [r3, #26]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d14c      	bne.n	8000a30 <I2C1_EV_IRQHandler+0x1b4>
				{
					I2C_GenerateStopCondition(I2C_handle_p);
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fef4 	bl	8000788 <I2C_GenerateStopCondition>
					I2C_StopTransmission();
 80009a0:	f000 f8ec 	bl	8000b7c <I2C_StopTransmission>
					I2C_StopTransmission();
				}
			}
		}
	}
}
 80009a4:	e044      	b.n	8000a30 <I2C1_EV_IRQHandler+0x1b4>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	7b1b      	ldrb	r3, [r3, #12]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d13e      	bne.n	8000a30 <I2C1_EV_IRQHandler+0x1b4>
				if (I2C_handle_p->rxBufferLength == 2)
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	7edb      	ldrb	r3, [r3, #27]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d138      	bne.n	8000a30 <I2C1_EV_IRQHandler+0x1b4>
					I2C_GenerateStopCondition(I2C_handle_p);
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fee0 	bl	8000788 <I2C_GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read second last byte
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6918      	ldr	r0, [r3, #16]
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6959      	ldr	r1, [r3, #20]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	7e1a      	ldrb	r2, [r3, #24]
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	1c54      	adds	r4, r2, #1
 80009e0:	b2e4      	uxtb	r4, r4
 80009e2:	761c      	strb	r4, [r3, #24]
 80009e4:	4613      	mov	r3, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	b2c2      	uxtb	r2, r0
 80009ea:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	7eda      	ldrb	r2, [r3, #27]
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	3a01      	subs	r2, #1
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read last byte
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6918      	ldr	r0, [r3, #16]
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6959      	ldr	r1, [r3, #20]
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	7e1a      	ldrb	r2, [r3, #24]
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	1c54      	adds	r4, r2, #1
 8000a12:	b2e4      	uxtb	r4, r4
 8000a14:	761c      	strb	r4, [r3, #24]
 8000a16:	4613      	mov	r3, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	b2c2      	uxtb	r2, r0
 8000a1c:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <I2C1_EV_IRQHandler+0x1bc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	7eda      	ldrb	r2, [r3, #27]
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	3a01      	subs	r2, #1
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8000a2c:	f000 f8a6 	bl	8000b7c <I2C_StopTransmission>
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	2000009c 	.word	0x2000009c

08000a3c <I2C_HandleInterruptEvents>:

/*
 * @I2C_HandleInterruptEvents: Called upon getting an error interrupt - resets the bit and generate stop condition
 */
void I2C_HandleInterruptEvents (uint16_t errorRegister, I2C_ErrorEvents errorEvent)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	717b      	strb	r3, [r7, #5]
	I2C_handle_p->pI2Cx->SR1 &= ~(errorRegister);
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <I2C_HandleInterruptEvents+0x3c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	88f9      	ldrh	r1, [r7, #6]
 8000a56:	43c9      	mvns	r1, r1
 8000a58:	400a      	ands	r2, r1
 8000a5a:	615a      	str	r2, [r3, #20]

	if (errorEvent == I2C_ERROR_AF)
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d106      	bne.n	8000a70 <I2C_HandleInterruptEvents+0x34>
	{
//		printf ("Received ACK failure...\n");
		I2C_StopTransmission();
 8000a62:	f000 f88b 	bl	8000b7c <I2C_StopTransmission>
		I2C_GenerateStopCondition(I2C_handle_p);
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <I2C_HandleInterruptEvents+0x3c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe8c 	bl	8000788 <I2C_GenerateStopCondition>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000009c 	.word	0x2000009c

08000a7c <I2C1_ER_IRQHandler>:

/*
 * @I2C1_ER_IRQHandler: Interrupt handler for I2C errors
 */
void I2C1_ER_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
//	printf ("ERROR IRQ handler...\n");
	I2C_handle_p->I2C_State = I2C_ERROR;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2204      	movs	r2, #4
 8000a88:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
	if (errorInterrupt)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d044      	beq.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
	{
		if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF)
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d005      	beq.n	8000abe <I2C1_ER_IRQHandler+0x42>
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_AF);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ab8:	f7ff ffc0 	bl	8000a3c <I2C_HandleInterruptEvents>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
		}
	}
}
 8000abc:	e036      	b.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_OVR)
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <I2C1_ER_IRQHandler+0x5e>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_OVR);
 8000ace:	2101      	movs	r1, #1
 8000ad0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ad4:	f7ff ffb2 	bl	8000a3c <I2C_HandleInterruptEvents>
}
 8000ad8:	e028      	b.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_PECERR)
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <I2C1_ER_IRQHandler+0x7a>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_PECERR);
 8000aea:	2102      	movs	r1, #2
 8000aec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000af0:	f7ff ffa4 	bl	8000a3c <I2C_HandleInterruptEvents>
}
 8000af4:	e01a      	b.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TIMEOUT)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <I2C1_ER_IRQHandler+0x96>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_TIMEOUT);
 8000b06:	2103      	movs	r1, #3
 8000b08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b0c:	f7ff ff96 	bl	8000a3c <I2C_HandleInterruptEvents>
}
 8000b10:	e00c      	b.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <I2C1_ER_IRQHandler+0xb8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d004      	beq.n	8000b2c <I2C1_ER_IRQHandler+0xb0>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
 8000b22:	2104      	movs	r1, #4
 8000b24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b28:	f7ff ff88 	bl	8000a3c <I2C_HandleInterruptEvents>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000009c 	.word	0x2000009c

08000b38 <I2C_TXE_Interrupt>:
/*
 * @I2C_TXE_Interrupt: Writes the respective byte to the DR
 * data register = empty = TXE
 */
void I2C_TXE_Interrupt (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <I2C_TXE_Interrupt+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	7e9b      	ldrb	r3, [r3, #26]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d011      	beq.n	8000b6c <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <I2C_TXE_Interrupt+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1c51      	adds	r1, r2, #1
 8000b52:	b2c9      	uxtb	r1, r1
 8000b54:	7019      	strb	r1, [r3, #0]
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <I2C_TXE_Interrupt+0x40>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <I2C_TXE_Interrupt+0x40>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	7e9a      	ldrb	r2, [r3, #26]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	3a01      	subs	r2, #1
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	769a      	strb	r2, [r3, #26]
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000009c 	.word	0x2000009c

08000b7c <I2C_StopTransmission>:

/*
 * @I2C_StopTransmission: Disables I2C control bits and sets I2C struct to initial values
 */
static void I2C_StopTransmission(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
//	printf ("Stopping transmission...\n\n");

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <I2C_StopTransmission+0x3c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b8c:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <I2C_StopTransmission+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b9a:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <I2C_StopTransmission+0x3c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	731a      	strb	r2, [r3, #12]
//	I2C_handle_p->rxBufferLength = BYTES_PER_TRANSACTION;

	I2C_handle_p->rxStartIndex = 0;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <I2C_StopTransmission+0x3c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	761a      	strb	r2, [r3, #24]
//	I2C_handle_p->txBufferLength = I2C
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	2000009c 	.word	0x2000009c

08000bbc <concatData>:


};

unsigned long long concatData(uint8_t *arr, uint8_t size)
{
 8000bbc:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	70fb      	strb	r3, [r7, #3]
	long long unsigned value = 0;
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	f04f 0400 	mov.w	r4, #0
 8000bd2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (uint8_t i = 0; i < size; i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e01e      	b.n	8000c1a <concatData+0x5e>
	{
		value <<= 8;
 8000bdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	f04f 0400 	mov.w	r4, #0
 8000be8:	0214      	lsls	r4, r2, #8
 8000bea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8000bee:	020b      	lsls	r3, r1, #8
 8000bf0:	e9c7 3404 	strd	r3, r4, [r7, #16]
		value |= arr[i];
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	fa5f fb83 	uxtb.w	fp, r3
 8000c00:	f04f 0c00 	mov.w	ip, #0
 8000c04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c08:	ea4b 0301 	orr.w	r3, fp, r1
 8000c0c:	ea4c 0402 	orr.w	r4, ip, r2
 8000c10:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (uint8_t i = 0; i < size; i++)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	3301      	adds	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3dc      	bcc.n	8000bdc <concatData+0x20>
	}
	return value;
 8000c22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	4621      	mov	r1, r4
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000c32:	4770      	bx	lr

08000c34 <nRF24_GPIO_Init>:

void nRF24_GPIO_Init(GPIO_InitTypeDef *gpioPort)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	// SCK, MISO, MOSI
	gpioPort->Mode = GPIO_MODE_AF_PP;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
	gpioPort->Pin = SPI_SCLK_PIN | SPI_MOSI_PIN | SPI_MISO_PIN;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000c48:	601a      	str	r2, [r3, #0]
	gpioPort->Alternate = GPIO_AF5_SPI2;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	611a      	str	r2, [r3, #16]
	gpioPort->Pull = GPIO_PULLDOWN;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2202      	movs	r2, #2
 8000c54:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SPI_SCLK_PORT, gpioPort);
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <nRF24_GPIO_Init+0x84>)
 8000c5a:	f000 ff55 	bl	8001b08 <HAL_GPIO_Init>

	// CE and SCN
	gpioPort->Pin = rNRF24_CE_PIN | rNRF24_CSN_PIN;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c64:	601a      	str	r2, [r3, #0]
	gpioPort->Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	605a      	str	r2, [r3, #4]
	gpioPort->Pull = GPIO_NOPULL;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
	gpioPort->Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(nRF24_GPIO_PORT, gpioPort);
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <nRF24_GPIO_Init+0x88>)
 8000c7c:	f000 ff44 	bl	8001b08 <HAL_GPIO_Init>

	RESET_CE();
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <nRF24_GPIO_Init+0x88>)
 8000c88:	f001 f8d8 	bl	8001e3c <HAL_GPIO_WritePin>
	SET_CSN();
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <nRF24_GPIO_Init+0x88>)
 8000c92:	f001 f8d3 	bl	8001e3c <HAL_GPIO_WritePin>

	// IRQ
	gpioPort->Pin = nRF24_IRQ_PIN;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2220      	movs	r2, #32
 8000c9a:	601a      	str	r2, [r3, #0]
	gpioPort->Mode = GPIO_MODE_IT_FALLING;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <nRF24_GPIO_Init+0x8c>)
 8000ca0:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(nRF24_GPIO_PORT, gpioPort);
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <nRF24_GPIO_Init+0x88>)
 8000ca6:	f000 ff2f 	bl	8001b08 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000caa:	2017      	movs	r0, #23
 8000cac:	f000 ff11 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	10210000 	.word	0x10210000

08000cc4 <nRF24_WriteRegisterX>:

NRF_STATUS nRF24_WriteRegisterX(nrfl2401 *nrf, uint8_t reg, uint8_t *data, const uint8_t txSize, char *text)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	72fb      	strb	r3, [r7, #11]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	72bb      	strb	r3, [r7, #10]
	uint8_t txBuffer[10] = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	811a      	strh	r2, [r3, #8]
	uint8_t rxBuffer[10] = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	811a      	strh	r2, [r3, #8]
//	uint8_t spiTxSize = txSize;
	uint8_t spiTxSize = txSize + 1;
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

//	txBuffer[0] = reg <= nRF24_CMD_W_REG ? nRF24_CMD_W_REG | (reg & nRF24_R_W_MASK), spiTxSize++ : reg;

	if (reg <= nRF24_CMD_W_REG)
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	2b20      	cmp	r3, #32
 8000cfc:	d80a      	bhi.n	8000d14 <nRF24_WriteRegisterX+0x50>
	{
		txBuffer[0] = nRF24_CMD_W_REG | (reg & nRF24_R_W_MASK);
 8000cfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	773b      	strb	r3, [r7, #28]
 8000d12:	e001      	b.n	8000d18 <nRF24_WriteRegisterX+0x54>
//		spiTxSize++;
	}
	else {
		txBuffer[0] = reg;
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	773b      	strb	r3, [r7, #28]
	}

	// populate the buffer with the data that needs to be sent
	for (uint8_t i = 0; i < txSize; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d1e:	e011      	b.n	8000d44 <nRF24_WriteRegisterX+0x80>
	{
		txBuffer[i+1] = data[i];
 8000d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	441a      	add	r2, r3
 8000d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d34:	440b      	add	r3, r1
 8000d36:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < txSize; i++)
 8000d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d48:	7abb      	ldrb	r3, [r7, #10]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3e8      	bcc.n	8000d20 <nRF24_WriteRegisterX+0x5c>
	}

	nRF24_SendCommand(nrf, txBuffer, rxBuffer, spiTxSize);
 8000d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d52:	f107 0210 	add.w	r2, r7, #16
 8000d56:	f107 011c 	add.w	r1, r7, #28
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f80e 	bl	8000d7c <nRF24_SendCommand>

//	OutputToSerial(txBuffer, spiTxSize, text);
	OutputToSerial(txBuffer, rxBuffer, spiTxSize, text);
 8000d60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000d64:	f107 0110 	add.w	r1, r7, #16
 8000d68:	f107 001c 	add.w	r0, r7, #28
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	f000 f87f 	bl	8000e70 <OutputToSerial>


	return NRF_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <nRF24_SendCommand>:

	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, readBuffer, "Reading Status Register");
}

void nRF24_SendCommand(nrfl2401 *nrf, uint8_t *txBuffer, uint8_t *rxBuffer, uint8_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	70fb      	strb	r3, [r7, #3]
	RESET_CSN();
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2140      	movs	r1, #64	; 0x40
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <nRF24_SendCommand+0x48>)
 8000d90:	f001 f854 	bl	8001e3c <HAL_GPIO_WritePin>

//	HAL_SPI_TransmitReceive_IT(nrf->config.spiHandle, txBuffer, rxBuffer, size);
	HAL_StatusTypeDef transactionStatus = HAL_SPI_TransmitReceive(nrf->config.spiHandle, txBuffer, rxBuffer, size, 1000);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6858      	ldr	r0, [r3, #4]
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	4613      	mov	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	f001 fd12 	bl	80027d0 <HAL_SPI_TransmitReceive>
 8000dac:	4603      	mov	r3, r0
 8000dae:	75fb      	strb	r3, [r7, #23]

	SET_CSN();
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <nRF24_SendCommand+0x48>)
 8000db6:	f001 f841 	bl	8001e3c <HAL_GPIO_WritePin>

	// maybe return ... - todo!
//	return transactionStatus;
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <nRF24_ReadRegister>:

void nRF24_ReadRegister(nrfl2401 *nrf, uint8_t reg, const uint8_t rxSize)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	70bb      	strb	r3, [r7, #2]
//	uint8_t txBuffer[1] = {0};
//	uint8_t rxBuffer[rxSize];

	pTxData[0] = reg < nRF24_CMD_W_REG ? (nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK)) : reg;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b1f      	cmp	r3, #31
 8000ddc:	d804      	bhi.n	8000de8 <nRF24_ReadRegister+0x20>
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	e000      	b.n	8000dea <nRF24_ReadRegister+0x22>
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <nRF24_ReadRegister+0x3c>)
 8000dec:	7013      	strb	r3, [r2, #0]
	nRF24_SendCommand(nrf, pTxData, pRxData, rxSize);
 8000dee:	78bb      	ldrb	r3, [r7, #2]
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <nRF24_ReadRegister+0x40>)
 8000df2:	4904      	ldr	r1, [pc, #16]	; (8000e04 <nRF24_ReadRegister+0x3c>)
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffc1 	bl	8000d7c <nRF24_SendCommand>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	200000ac 	.word	0x200000ac

08000e0c <nRF24_ReadRegisterX>:

void nRF24_ReadRegisterX(nrfl2401 *nrf, uint8_t reg, const uint8_t rxSize, uint8_t *rxBuffer, char *text)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	72fb      	strb	r3, [r7, #11]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	72bb      	strb	r3, [r7, #10]
//	txBuffer[0] = reg < nRF24_CMD_W_REG ? (nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK)) : reg;
	uint8_t txBuffer[10] = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	811a      	strh	r2, [r3, #8]
	uint8_t spiRxSize = rxSize;
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	77fb      	strb	r3, [r7, #31]

	if (reg <= nRF24_CMD_W_REG)
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	2b20      	cmp	r3, #32
 8000e32:	d808      	bhi.n	8000e46 <nRF24_ReadRegisterX+0x3a>
	{
		txBuffer[0] = nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK);
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	753b      	strb	r3, [r7, #20]
		spiRxSize++;
 8000e3e:	7ffb      	ldrb	r3, [r7, #31]
 8000e40:	3301      	adds	r3, #1
 8000e42:	77fb      	strb	r3, [r7, #31]
 8000e44:	e001      	b.n	8000e4a <nRF24_ReadRegisterX+0x3e>
	}
	else
	{
		txBuffer[0] = reg;
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	753b      	strb	r3, [r7, #20]
	}

	nRF24_SendCommand(nrf, txBuffer, rxBuffer, spiRxSize);
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	f107 0114 	add.w	r1, r7, #20
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff ff92 	bl	8000d7c <nRF24_SendCommand>

	OutputToSerial(txBuffer, rxBuffer, spiRxSize, text);
 8000e58:	7ffa      	ldrb	r2, [r7, #31]
 8000e5a:	f107 0014 	add.w	r0, r7, #20
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	f000 f805 	bl	8000e70 <OutputToSerial>
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <OutputToSerial>:
#define PRI_UINT64_C_Val(value) ((unsigned long) (value>>32)), ((unsigned long)value)
#define PRI_UINT64 "%lx%lx"
#define LONG_TO_STR(STR, LONG_VAL) (sprintf(STR, "%lx%lx", PRI_UINT64_C_Val(LONG_VAL)))

void OutputToSerial(uint8_t *writeBuffer, uint8_t *readBuffer, uint8_t size, char *text)
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	b0cb      	sub	sp, #300	; 0x12c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	f107 040c 	add.w	r4, r7, #12
 8000e7a:	6020      	str	r0, [r4, #0]
 8000e7c:	f107 0008 	add.w	r0, r7, #8
 8000e80:	6001      	str	r1, [r0, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	463a      	mov	r2, r7
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	char strData[100] = {0}, rxStrData[100] = {0};
 8000e8e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e92:	2264      	movs	r2, #100	; 0x64
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fe29 	bl	8003aee <memset>
 8000e9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ea0:	2264      	movs	r2, #100	; 0x64
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fe22 	bl	8003aee <memset>
	long long unsigned txStr = concatData(writeBuffer, size);
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f7ff fe81 	bl	8000bbc <concatData>
 8000eba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ebe:	e9c3 0100 	strd	r0, r1, [r3]
	long long unsigned rxStr = concatData(readBuffer, size);
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4611      	mov	r1, r2
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	f7ff fe75 	bl	8000bbc <concatData>
 8000ed2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ed6:	e9c3 0100 	strd	r0, r1, [r3]
	LONG_TO_STR(strData, txStr);
 8000eda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ede:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	f04f 0400 	mov.w	r4, #0
 8000eea:	0013      	movs	r3, r2
 8000eec:	2400      	movs	r4, #0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ef4:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000ef8:	4928      	ldr	r1, [pc, #160]	; (8000f9c <OutputToSerial+0x12c>)
 8000efa:	f002 fe7d 	bl	8003bf8 <siprintf>
	LONG_TO_STR(rxStrData, rxStr);
 8000efe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f02:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	f04f 0400 	mov.w	r4, #0
 8000f0e:	0013      	movs	r3, r2
 8000f10:	2400      	movs	r4, #0
 8000f12:	461a      	mov	r2, r3
 8000f14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000f18:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000f1c:	491f      	ldr	r1, [pc, #124]	; (8000f9c <OutputToSerial+0x12c>)
 8000f1e:	f002 fe6b 	bl	8003bf8 <siprintf>

	char outputMsg[60] = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4618      	mov	r0, r3
 8000f28:	233c      	movs	r3, #60	; 0x3c
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f002 fdde 	bl	8003aee <memset>
	strcpy(outputMsg, text);
 8000f32:	463b      	mov	r3, r7
 8000f34:	f107 0214 	add.w	r2, r7, #20
 8000f38:	6819      	ldr	r1, [r3, #0]
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f002 fe7c 	bl	8003c38 <strcpy>
	strcat(outputMsg, ":          0x%s ----------- 0x%s\n");
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f94b 	bl	80001e0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4413      	add	r3, r2
 8000f54:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <OutputToSerial+0x130>)
 8000f56:	4614      	mov	r4, r2
 8000f58:	469c      	mov	ip, r3
 8000f5a:	f104 0e20 	add.w	lr, r4, #32
 8000f5e:	4665      	mov	r5, ip
 8000f60:	4626      	mov	r6, r4
 8000f62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f64:	6028      	str	r0, [r5, #0]
 8000f66:	6069      	str	r1, [r5, #4]
 8000f68:	60aa      	str	r2, [r5, #8]
 8000f6a:	60eb      	str	r3, [r5, #12]
 8000f6c:	3410      	adds	r4, #16
 8000f6e:	f10c 0c10 	add.w	ip, ip, #16
 8000f72:	4574      	cmp	r4, lr
 8000f74:	d1f3      	bne.n	8000f5e <OutputToSerial+0xee>
 8000f76:	4662      	mov	r2, ip
 8000f78:	4623      	mov	r3, r4
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	8013      	strh	r3, [r2, #0]

//	char temp[30] = {0}; // todo - remove !!
//	strcpy(temp, outputMsg);

	printf (outputMsg, strData, rxStrData);
 8000f7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f82:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fdb8 	bl	8003b00 <iprintf>
//	SendSerialData(&USART2_handle, outputMsg, strData, rxStrData);
}
 8000f90:	bf00      	nop
 8000f92:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	08004d58 	.word	0x08004d58
 8000fa0:	08004d60 	.word	0x08004d60

08000fa4 <nRF24_PrintDetails>:

void nRF24_PrintDetails(nrfl2401 *nrf)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
	printf ("\nPRINTING details --------\n");
 8000fac:	4826      	ldr	r0, [pc, #152]	; (8001048 <nRF24_PrintDetails+0xa4>)
 8000fae:	f002 fe1b 	bl	8003be8 <puts>
	uint8_t readBuffer[10] = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	811a      	strh	r2, [r3, #8]
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, readBuffer, "Config");
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <nRF24_PrintDetails+0xa8>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2100      	movs	r1, #0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff1d 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RX_ADDR_P0_REG, nrf->config.addressWidth, readBuffer, "RX_ADDR_P0");
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <nRF24_PrintDetails+0xac>)
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	210a      	movs	r1, #10
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff11 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_TX_ADDR_REG, nrf->config.addressWidth, readBuffer, "TX_ADDR_REG");
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000ff0:	f107 010c 	add.w	r1, r7, #12
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <nRF24_PrintDetails+0xb0>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff05 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "RF_Setup");
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <nRF24_PrintDetails+0xb4>)
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4613      	mov	r3, r2
 800100c:	2201      	movs	r2, #1
 800100e:	2106      	movs	r1, #6
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fefb 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_SETUP_AW_REG, (uint8_t) 1, readBuffer, "ADDRESS WIDTH");
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <nRF24_PrintDetails+0xb8>)
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	2201      	movs	r2, #1
 8001022:	2103      	movs	r1, #3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fef1 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_OBSERVE_TX_REG, (uint8_t) 1, readBuffer, "OBSERVE_TX");
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <nRF24_PrintDetails+0xbc>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fee7 	bl	8000e0c <nRF24_ReadRegisterX>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08004d84 	.word	0x08004d84
 800104c:	08004da0 	.word	0x08004da0
 8001050:	08004da8 	.word	0x08004da8
 8001054:	08004db4 	.word	0x08004db4
 8001058:	08004dc0 	.word	0x08004dc0
 800105c:	08004dcc 	.word	0x08004dcc
 8001060:	08004ddc 	.word	0x08004ddc

08001064 <ReadStatusRegister>:


NRF_STATUS ReadStatusRegister(nrfl2401 *nrf, FlagStatus verifyInitState)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	nRF24_ReadRegister(nrf, nRF24_CMD_NOP, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	21ff      	movs	r1, #255	; 0xff
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fea7 	bl	8000dc8 <nRF24_ReadRegister>
	if (verifyInitState == SET)
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d105      	bne.n	800108c <ReadStatusRegister+0x28>
	{
		if (pRxData[0] != nRF24_DEFAULT_STATUS_REG)
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <ReadStatusRegister+0x34>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0e      	cmp	r3, #14
 8001086:	d001      	beq.n	800108c <ReadStatusRegister+0x28>
		{
			return NRF_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <ReadStatusRegister+0x2a>
		}
	}
	return NRF_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000ac 	.word	0x200000ac

0800109c <nRF24_SetTxAddress>:
{
	nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, &data, size, "Status register");
}

void nRF24_SetTxAddress(nrfl2401 *nrf, const uint8_t size)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_TX_ADDR_REG, nrf->config.txAddress, size, "TX address");
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	78f9      	ldrb	r1, [r7, #3]
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <nRF24_SetTxAddress+0x28>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	460b      	mov	r3, r1
 80010b4:	2110      	movs	r1, #16
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fe04 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08004df8 	.word	0x08004df8

080010c8 <nRF24_SetRxAddress>:

void nRF24_SetRxAddress(nrfl2401 *nrf, uint8_t size)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	char printStr[10] = "RX_ADDR_P0";
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <nRF24_SetRxAddress+0x60>)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	ca07      	ldmia	r2, {r0, r1, r2}
 80010dc:	c303      	stmia	r3!, {r0, r1}
 80010de:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	e015      	b.n	8001112 <nRF24_SetRxAddress+0x4a>
	{
//		nRF24_WriteRegister(nrf, nRF24_RX_ADDR[i], nrf->config.txAddressesList[i], size);
		nRF24_WriteRegisterX(nrf, nRF24_RX_ADDR[i], nrf->config.txAddressesList[i], size, printStr);
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <nRF24_SetRxAddress+0x64>)
 80010ea:	5cd0      	ldrb	r0, [r2, r3]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f0:	7dfa      	ldrb	r2, [r7, #23]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	78f9      	ldrb	r1, [r7, #3]
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	460b      	mov	r3, r1
 8001104:	4601      	mov	r1, r0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fddc 	bl	8000cc4 <nRF24_WriteRegisterX>
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	3301      	adds	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3e3      	bcc.n	80010e6 <nRF24_SetRxAddress+0x1e>
	}
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08004da8 	.word	0x08004da8
 800112c:	20000000 	.word	0x20000000

08001130 <nRF24_EnableRxDataPipes>:

void nRF24_EnableRxDataPipes(nrfl2401 *nrf, const uint8_t size)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_EN_RXADDR_REG, nrf->config.enableRxDataPipes, size, "RX_DATA_PIPE0");
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	78f9      	ldrb	r1, [r7, #3]
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <nRF24_EnableRxDataPipes+0x28>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	460b      	mov	r3, r1
 8001148:	2102      	movs	r1, #2
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fdba 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	08004e04 	.word	0x08004e04

0800115c <nRF24_SetAddressFieldWidth>:

void nRF24_SetAddressFieldWidth(nrfl2401 *nrf, const uint8_t size)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af02      	add	r7, sp, #8
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_SETUP_AW_REG, &nrf->config.addressFieldWidth, size, "Address field width");
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800116e:	78f9      	ldrb	r1, [r7, #3]
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <nRF24_SetAddressFieldWidth+0x2c>)
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	460b      	mov	r3, r1
 8001176:	2103      	movs	r1, #3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fda3 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08004e14 	.word	0x08004e14

0800118c <nRF24_SetDataRate>:
{
	nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, nrf->config.rfSetup, size, "Setup RF");
}

NRF_STATUS nRF24_SetDataRate(nrfl2401 *nrf)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	811a      	strh	r2, [r3, #8]
	uint8_t setValue;

	// reading RF setup register
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "Read RF Setup");
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <nRF24_SetDataRate+0x70>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	2106      	movs	r1, #6
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe2c 	bl	8000e0c <nRF24_ReadRegisterX>

	setValue = readBuffer[1] | nrf->config.dataRate;
 80011b4:	7b7a      	ldrb	r2, [r7, #13]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e1b      	ldrb	r3, [r3, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	// setting data rate
	nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, &setValue, (uint8_t) 1, "Set data rate");
 80011c0:	f107 020b 	add.w	r2, r7, #11
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <nRF24_SetDataRate+0x74>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2106      	movs	r1, #6
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fd79 	bl	8000cc4 <nRF24_WriteRegisterX>

	// verifying set data
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "Verifying RF Setup");
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <nRF24_SetDataRate+0x78>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	2201      	movs	r2, #1
 80011de:	2106      	movs	r1, #6
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fe13 	bl	8000e0c <nRF24_ReadRegisterX>
	if (readBuffer[1] != setValue)
 80011e6:	7b7a      	ldrb	r2, [r7, #13]
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d001      	beq.n	80011f2 <nRF24_SetDataRate+0x66>
	{
		return NRF_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <nRF24_SetDataRate+0x68>
	}
	return NRF_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08004e34 	.word	0x08004e34
 8001200:	08004e44 	.word	0x08004e44
 8001204:	08004e54 	.word	0x08004e54

08001208 <nRF24_DisableIRQ>:
		HAL_Delay(2000);
	}
}

void nRF24_DisableIRQ(nrfl2401 *nrf)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
	uint8_t registerRead[10] = {0};
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	811a      	strh	r2, [r3, #8]
	uint8_t write = nRF24_DISABLE_MAX_RT | nRF24_DISABLE_TX_DS | nRF24_DISABLE_RX_DR;
 800121c:	2370      	movs	r3, #112	; 0x70
 800121e:	75fb      	strb	r3, [r7, #23]
	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, registerRead, "Reading Status Reg");
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <nRF24_DisableIRQ+0x50>)
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	2201      	movs	r2, #1
 800122c:	2107      	movs	r1, #7
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fdec 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | write}, (uint8_t) 1, "Disabling IRQs");
 8001234:	7a7a      	ldrb	r2, [r7, #9]
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	4313      	orrs	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	753b      	strb	r3, [r7, #20]
 800123e:	f107 0214 	add.w	r2, r7, #20
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <nRF24_DisableIRQ+0x54>)
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2107      	movs	r1, #7
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fd3a 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08004e80 	.word	0x08004e80
 800125c:	08004e94 	.word	0x08004e94

08001260 <nRF24_FlushTX>:

void nRF24_FlushTX(nrfl2401 *nrf)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisterX(nrf, nRF24_CMD_FLUSH_TX, (uint8_t[]) {nRF24_CMD_NOP}, (uint8_t) 2, "Flush TX FIFO");
 8001268:	23ff      	movs	r3, #255	; 0xff
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	f107 020c 	add.w	r2, r7, #12
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <nRF24_FlushTX+0x28>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2302      	movs	r3, #2
 8001276:	21e1      	movs	r1, #225	; 0xe1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fd23 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08004ea4 	.word	0x08004ea4

0800128c <nRF24_Reset>:

void nRF24_Reset(nrfl2401 *nrf)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
//	nRF24_SetConfigureRegister(nrf, nRF24_PWR_UP, PWR_UP);

//	nRF24_WriteRegister(nrf, nRF24_CONFIG_REG, 0x08, (uint8_t) 2);

//	uint8_t rxBuffer[2] = {0};
	uint8_t registerRead[2] = {0};
 8001294:	2300      	movs	r3, #0
 8001296:	813b      	strh	r3, [r7, #8]


//	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, rxBuffer, "Reading Default Config Register");	// 0x0011 1111
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, registerRead, "Reading Default Config");	// 0x0011 1111
 8001298:	f107 0208 	add.w	r2, r7, #8
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <nRF24_Reset+0x100>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	2201      	movs	r2, #1
 80012a4:	2100      	movs	r1, #0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fdb0 	bl	8000e0c <nRF24_ReadRegisterX>

	if (registerRead[1] != DEFAULT_CONFIG_REG)
 80012ac:	7a7b      	ldrb	r3, [r7, #9]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d00a      	beq.n	80012c8 <nRF24_Reset+0x3c>
	{
		nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t[]) {DEFAULT_CONFIG_REG}, (uint8_t) 1, "Setting CONFIG");
 80012b2:	2308      	movs	r3, #8
 80012b4:	733b      	strb	r3, [r7, #12]
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <nRF24_Reset+0x104>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	2100      	movs	r1, #0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fcfe 	bl	8000cc4 <nRF24_WriteRegisterX>
	}

	// read status register
	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, registerRead, "Reading Default Status");	// 0x0011 1111
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <nRF24_Reset+0x108>)
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	2107      	movs	r1, #7
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fd98 	bl	8000e0c <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_STATUS_REG)
 80012dc:	7a7b      	ldrb	r3, [r7, #9]
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d038      	beq.n	8001354 <nRF24_Reset+0xc8>
	{
		if (registerRead[1] & nRF24_DISABLE_MAX_RT)
 80012e2:	7a7b      	ldrb	r3, [r7, #9]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00d      	beq.n	8001308 <nRF24_Reset+0x7c>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_MAX_RT}, (uint8_t) 1, "Disabling MAX_RT");
 80012ec:	7a7b      	ldrb	r3, [r7, #9]
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	743b      	strb	r3, [r7, #16]
 80012f6:	f107 0210 	add.w	r2, r7, #16
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <nRF24_Reset+0x10c>)
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	2107      	movs	r1, #7
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fcde 	bl	8000cc4 <nRF24_WriteRegisterX>
		}

		if (registerRead[1] & nRF24_DISABLE_TX_FULL)
 8001308:	7a7b      	ldrb	r3, [r7, #9]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00d      	beq.n	800132e <nRF24_Reset+0xa2>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_TX_FULL}, (uint8_t) 1, "Disabing TX_FULL");
 8001312:	7a7b      	ldrb	r3, [r7, #9]
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	753b      	strb	r3, [r7, #20]
 800131c:	f107 0214 	add.w	r2, r7, #20
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <nRF24_Reset+0x110>)
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	2107      	movs	r1, #7
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fccb 	bl	8000cc4 <nRF24_WriteRegisterX>
		}

		if (registerRead[1] & nRF24_DISABLE_TX_DS)
 800132e:	7a7b      	ldrb	r3, [r7, #9]
 8001330:	f003 0320 	and.w	r3, r3, #32
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00d      	beq.n	8001354 <nRF24_Reset+0xc8>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_TX_DS}, (uint8_t) 1, "Disabing TX_DR");
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	b2db      	uxtb	r3, r3
 8001340:	763b      	strb	r3, [r7, #24]
 8001342:	f107 0218 	add.w	r2, r7, #24
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <nRF24_Reset+0x114>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	2107      	movs	r1, #7
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fcb8 	bl	8000cc4 <nRF24_WriteRegisterX>
		}
	}

	// read RF setup register
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, registerRead, "Reading Default RF setup");
 8001354:	f107 0208 	add.w	r2, r7, #8
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <nRF24_Reset+0x118>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	2201      	movs	r2, #1
 8001360:	2106      	movs	r1, #6
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd52 	bl	8000e0c <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_RF_SETUP_REG)
 8001368:	7a7b      	ldrb	r3, [r7, #9]
 800136a:	2b0e      	cmp	r3, #14
 800136c:	d00a      	beq.n	8001384 <nRF24_Reset+0xf8>
	{
		nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t[]) {DEFAULT_RF_SETUP_REG}, (uint8_t) 1, "Setting default RF_SETUP");
 800136e:	230e      	movs	r3, #14
 8001370:	773b      	strb	r3, [r7, #28]
 8001372:	f107 021c 	add.w	r2, r7, #28
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <nRF24_Reset+0x11c>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2106      	movs	r1, #6
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fca0 	bl	8000cc4 <nRF24_WriteRegisterX>
	}

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08004eb4 	.word	0x08004eb4
 8001390:	08004ecc 	.word	0x08004ecc
 8001394:	08004edc 	.word	0x08004edc
 8001398:	08004ef4 	.word	0x08004ef4
 800139c:	08004f08 	.word	0x08004f08
 80013a0:	08004f1c 	.word	0x08004f1c
 80013a4:	08004f2c 	.word	0x08004f2c
 80013a8:	08004f48 	.word	0x08004f48

080013ac <nRF24_PowerUp>:

void nRF24_PowerUp(nrfl2401 *nrf)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t[]) {nRF24_SET_PWR_UP}, (uint8_t) 1, "Enabling PWR_UP");
 80013b4:	2302      	movs	r3, #2
 80013b6:	723b      	strb	r3, [r7, #8]
 80013b8:	f107 0208 	add.w	r2, r7, #8
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <nRF24_PowerUp+0x48>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fc7d 	bl	8000cc4 <nRF24_WriteRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, (uint8_t[10]) {}, "Verifying PWR_UP");
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	811a      	strh	r2, [r3, #8]
 80013d6:	f107 020c 	add.w	r2, r7, #12
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <nRF24_PowerUp+0x4c>)
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	2201      	movs	r2, #1
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fd11 	bl	8000e0c <nRF24_ReadRegisterX>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	08004f64 	.word	0x08004f64
 80013f8:	08004f74 	.word	0x08004f74

080013fc <nRF24_Initialization>:



NRF_STATUS nRF24_Initialization(nrfl2401 *nrf)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(nRF24_GPIO_PORT, rNRF24_CE_PIN, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(nRF24_GPIO_PORT, rNRF24_CSN_PIN, GPIO_PIN_RESET);
//	SET_CE();
//	RESET_CSN();

	nRF24_Reset(nrf);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff41 	bl	800128c <nRF24_Reset>

//	// set PRIM_RX low
//	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);

	// switch to TX mode
	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f994 	bl	800173c <nRF24_SetConfigureRegister>

	// set TX address
	nRF24_SetTxAddress(nrf, nrf->config.addressWidth);		// used only for PTX device
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fe3d 	bl	800109c <nRF24_SetTxAddress>

	// enable RX data pipes
	nRF24_EnableRxDataPipes(nrf, (uint8_t) 1); 				// enabling data pipe 0 to receive the ACK
 8001422:	2101      	movs	r1, #1
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe83 	bl	8001130 <nRF24_EnableRxDataPipes>

	// Disable auto ACK for a respective data pipe if it needs to be
	nRF24_DisableAutoAck(nrf);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f93c 	bl	80016a8 <nRF24_DisableAutoAck>

	// set address field width
	nRF24_SetAddressFieldWidth(nrf, (uint8_t) 1);
 8001430:	2101      	movs	r1, #1
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe92 	bl	800115c <nRF24_SetAddressFieldWidth>

	// Data rate
	nRF24_SetDataRate(nrf);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fea7 	bl	800118c <nRF24_SetDataRate>

	// set channel
	nRF24_SetChannel(nrf);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f81a 	bl	8001478 <nRF24_SetChannel>

	// RF setup
//	nRF24_SetupRF(nrf, (uint8_t) 1);

	nRF24_SetRxAddress(nrf, nrf->config.addressWidth);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe3b 	bl	80010c8 <nRF24_SetRxAddress>

	nRF24_SetPayloadWidth(nrf, (uint8_t) 1);		// todo - no need in PTX2
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f835 	bl	80014c4 <nRF24_SetPayloadWidth>
//	}
//
//	nRF24_SetConfigureRegister(nrf, nRF24_PWR_UP, PWR_UP);

//	SET_CE();
	ReadStatusRegister(nrf, RESET);
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fe01 	bl	8001064 <ReadStatusRegister>

	nRF24_FlushTX(nrf);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fefc 	bl	8001260 <nRF24_FlushTX>


	nRF24_PowerUp(nrf);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff9f 	bl	80013ac <nRF24_PowerUp>

//	nRF24_PowerUp(nrf);


//	while(1);
}
 800146e:	bf00      	nop
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <nRF24_SetChannel>:
	}
	return NRF_OK;
}

void nRF24_SetChannel(nrfl2401 *nrf)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	811a      	strh	r2, [r3, #8]

	nRF24_WriteRegisterX(nrf, nRF24_RF_CH_REG, &nrf->config.rfChannel, (uint8_t) 1, "Setting channel");
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f103 0210 	add.w	r2, r3, #16
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <nRF24_SetChannel+0x44>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	2105      	movs	r1, #5
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fc12 	bl	8000cc4 <nRF24_WriteRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RF_CH_REG, (uint8_t) 1, readBuffer, "Reading RF_CH");
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <nRF24_SetChannel+0x48>)
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	2201      	movs	r2, #1
 80014ac:	2105      	movs	r1, #5
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fcac 	bl	8000e0c <nRF24_ReadRegisterX>

//	if (nRF24_VerifyRegister(actual, expected))
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08004f88 	.word	0x08004f88
 80014c0:	08004f98 	.word	0x08004f98

080014c4 <nRF24_SetPayloadWidth>:

void nRF24_SetPayloadWidth(nrfl2401 *nrf, uint8_t size)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e010      	b.n	80014f8 <nRF24_SetPayloadWidth+0x34>
	{
//		nRF24_WriteRegister(nrf, nRF24_RX_PAYLOAD[i], nrf->config.rxPayloadWidths[i], size);

		nRF24_WriteRegisterX(nrf, nRF24_RX_PAYLOAD[i], &nrf->config.rxPayloadWidths[i], size, "Payload width");
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <nRF24_SetPayloadWidth+0x48>)
 80014da:	5cd1      	ldrb	r1, [r2, r3]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	441a      	add	r2, r3
 80014e4:	78f8      	ldrb	r0, [r7, #3]
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <nRF24_SetPayloadWidth+0x4c>)
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4603      	mov	r3, r0
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fbe9 	bl	8000cc4 <nRF24_WriteRegisterX>
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3e8      	bcc.n	80014d6 <nRF24_SetPayloadWidth+0x12>

	}
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000008 	.word	0x20000008
 8001510:	08004fa8 	.word	0x08004fa8

08001514 <nRF24_IRQHandler>:
	}
	return false;
}

void nRF24_IRQHandler(nrfl2401 *nrfRadio)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	811a      	strh	r2, [r3, #8]
	printf ("\nIRQ handler...\n");
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <nRF24_IRQHandler+0x50>)
 800152a:	f002 fb5d 	bl	8003be8 <puts>
//	SendSerialData(&USART2_handle, "\n>>> IRQ handler triggered on PTX...\n", "");

	nRF24_ReadRegisterX(nrfRadio, nRF24_STATUS_REG, (uint8_t) 1, readBuffer, "\n[IRQ_HANDLER]");
 800152e:	f107 020c 	add.w	r2, r7, #12
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <nRF24_IRQHandler+0x54>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4613      	mov	r3, r2
 8001538:	2201      	movs	r2, #1
 800153a:	2107      	movs	r1, #7
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fc65 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadFifo(nrfRadio);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f814 	bl	8001570 <nRF24_ReadFifo>

	// TODO - check if TX FIFO is full - if it is, call nRF24_TransmitPayload()

	// disable IRQ bits
	nRF24_DisableIRQ(nrfRadio);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fe5d 	bl	8001208 <nRF24_DisableIRQ>

	// clear pending bit
	__HAL_GPIO_EXTI_CLEAR_IT(nRF24_IRQ_PIN);
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <nRF24_IRQHandler+0x58>)
 8001550:	2220      	movs	r2, #32
 8001552:	615a      	str	r2, [r3, #20]

	nrfRadio->state = NRF_TX_OK;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08004fd0 	.word	0x08004fd0
 8001568:	08004fe0 	.word	0x08004fe0
 800156c:	40013c00 	.word	0x40013c00

08001570 <nRF24_ReadFifo>:

void nRF24_ReadFifo(nrfl2401 *nrf)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
	printf ("Reading FIFO...\n");
 8001578:	4810      	ldr	r0, [pc, #64]	; (80015bc <nRF24_ReadFifo+0x4c>)
 800157a:	f002 fb35 	bl	8003be8 <puts>
	uint8_t readBuffer[10] = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	811a      	strh	r2, [r3, #8]
	nRF24_ReadRegisterX(nrf, nRF24_FIFO_STATUS_REG, (uint8_t) 1, readBuffer, "Reading FIFO status");
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <nRF24_ReadFifo+0x50>)
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	2201      	movs	r2, #1
 8001596:	2117      	movs	r1, #23
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fc37 	bl	8000e0c <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_CMD_R_PAYLOAD, (uint8_t) 2, readBuffer, "Reading FIFO");
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <nRF24_ReadFifo+0x54>)
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	2202      	movs	r2, #2
 80015aa:	2161      	movs	r1, #97	; 0x61
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fc2d 	bl	8000e0c <nRF24_ReadRegisterX>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08004ff0 	.word	0x08004ff0
 80015c0:	08005000 	.word	0x08005000
 80015c4:	08005014 	.word	0x08005014

080015c8 <nRF24_TransmitPayload>:
//
//	nRF24_ReadRegisterX(nrf, nRF24_CMD_R_PAYLOAD, (uint8_t) 2, readBuffer, "Reading FIFO");	// 0x0011 1111
}

NRF_STATUS nRF24_TransmitPayload(nrfl2401 *nrf, uint8_t *data)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	printf ("\nSending payload data %c...\n", *data);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	482e      	ldr	r0, [pc, #184]	; (8001694 <nRF24_TransmitPayload+0xcc>)
 80015da:	f002 fa91 	bl	8003b00 <iprintf>

//	// switch to TX mode
//	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);

	nrf->state = NRF_TX_BUSY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<1; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e03a      	b.n	8001660 <nRF24_TransmitPayload+0x98>
		char txt[20] = "\nTX payload_";
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <nRF24_TransmitPayload+0xd0>)
 80015ec:	f107 0408 	add.w	r4, r7, #8
 80015f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f2:	c407      	stmia	r4!, {r0, r1, r2}
 80015f4:	7023      	strb	r3, [r4, #0]
 80015f6:	f107 0315 	add.w	r3, r7, #21
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f8c3 2003 	str.w	r2, [r3, #3]
		sprintf (txt, strcat(txt, "%d"), i);
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fdea 	bl	80001e0 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4413      	add	r3, r2
 8001616:	4a21      	ldr	r2, [pc, #132]	; (800169c <nRF24_TransmitPayload+0xd4>)
 8001618:	8811      	ldrh	r1, [r2, #0]
 800161a:	7892      	ldrb	r2, [r2, #2]
 800161c:	8019      	strh	r1, [r3, #0]
 800161e:	709a      	strb	r2, [r3, #2]
 8001620:	f107 0108 	add.w	r1, r7, #8
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fae4 	bl	8003bf8 <siprintf>

		nRF24_WriteRegisterX(nrf, nRF24_CMD_W_PAYLOAD, &data[i], (nrf->config.rxPayloadWidths[0]), txt);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	441a      	add	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	7819      	ldrb	r1, [r3, #0]
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	460b      	mov	r3, r1
 8001644:	21a0      	movs	r1, #160	; 0xa0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fb3c 	bl	8000cc4 <nRF24_WriteRegisterX>

		nRF24_PrintDetails(&nrfRadio);
 800164c:	4814      	ldr	r0, [pc, #80]	; (80016a0 <nRF24_TransmitPayload+0xd8>)
 800164e:	f7ff fca9 	bl	8000fa4 <nRF24_PrintDetails>

		HAL_Delay(400);
 8001652:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001656:	f000 f923 	bl	80018a0 <HAL_Delay>
	for (int i=0; i<1; i++) {
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	ddc1      	ble.n	80015ea <nRF24_TransmitPayload+0x22>
	}
	SET_CE();
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <nRF24_TransmitPayload+0xdc>)
 800166e:	f000 fbe5 	bl	8001e3c <HAL_GPIO_WritePin>

//	HAL_Delay(10);
	while(nrf->state == NRF_TX_BUSY); // THIS AND the following line should be in the callback I guess
 8001672:	bf00      	nop
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0fb      	beq.n	8001674 <nRF24_TransmitPayload+0xac>

	RESET_CE();
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <nRF24_TransmitPayload+0xdc>)
 8001684:	f000 fbda 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	08005038 	.word	0x08005038
 8001698:	0800505c 	.word	0x0800505c
 800169c:	08005058 	.word	0x08005058
 80016a0:	200001ec 	.word	0x200001ec
 80016a4:	40020800 	.word	0x40020800

080016a8 <nRF24_DisableAutoAck>:

void nRF24_DisableAutoAck(nrfl2401 *nrf)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
	uint8_t regState;
	uint8_t rxBuffer[2] = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	81bb      	strh	r3, [r7, #12]

	if (nrf->config.disableAutoAck[0] > 0)		// the first element represents the size of data pipes who's ACK is to be disabled
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d02c      	beq.n	8001718 <nRF24_DisableAutoAck+0x70>
	{
		nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, 2, rxBuffer, "Reading EN_AA");	// 0x0011 1111
 80016be:	f107 020c 	add.w	r2, r7, #12
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <nRF24_DisableAutoAck+0x8c>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	2202      	movs	r2, #2
 80016ca:	2101      	movs	r1, #1
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fb9d 	bl	8000e0c <nRF24_ReadRegisterX>

		for (uint8_t i = 1; i <= nrf->config.disableAutoAck[0]; i++)
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e010      	b.n	80016fa <nRF24_DisableAutoAck+0x52>
		{
			regState = (rxBuffer[1] & ~(nrf->config.disableAutoAck[i]));
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68d9      	ldr	r1, [r3, #12]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	440b      	add	r3, r1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	73bb      	strb	r3, [r7, #14]
		for (uint8_t i = 1; i <= nrf->config.disableAutoAck[0]; i++)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	3301      	adds	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	429a      	cmp	r2, r3
 8001704:	d9e8      	bls.n	80016d8 <nRF24_DisableAutoAck+0x30>
		}

		nRF24_WriteRegisterX(nrf, nRF24_EN_AA_REG, &regState, (uint8_t) 1, "Disable ACK");
 8001706:	f107 020e 	add.w	r2, r7, #14
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <nRF24_DisableAutoAck+0x90>)
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fad6 	bl	8000cc4 <nRF24_WriteRegisterX>
	}
	nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, 2, rxBuffer, "Reading EN_AA");	// 0x0011 1111
 8001718:	f107 020c 	add.w	r2, r7, #12
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <nRF24_DisableAutoAck+0x8c>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	2202      	movs	r2, #2
 8001724:	2101      	movs	r1, #1
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fb70 	bl	8000e0c <nRF24_ReadRegisterX>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	08005070 	.word	0x08005070
 8001738:	08005080 	.word	0x08005080

0800173c <nRF24_SetConfigureRegister>:

void nRF24_SetConfigureRegister(nrfl2401 *nrf, NRF_ConfigRegBits configRegBit, NRF_FLAG setFlag)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
 8001748:	4613      	mov	r3, r2
 800174a:	70bb      	strb	r3, [r7, #2]
	uint8_t regState;
	uint8_t rxBuffer[2] = {0};
 800174c:	2300      	movs	r3, #0
 800174e:	81bb      	strh	r3, [r7, #12]

	// read the initial state of config register
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, rxBuffer, "Read Config register");
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <nRF24_SetConfigureRegister+0x78>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	2201      	movs	r2, #1
 800175c:	2100      	movs	r1, #0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fb54 	bl	8000e0c <nRF24_ReadRegisterX>

	// set the flag that's being passed
	regState = (setFlag == BIT_SET) ? (rxBuffer[1] | 1 << configRegBit) : (rxBuffer[1] & ~(1 << configRegBit));
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10a      	bne.n	8001780 <nRF24_SetConfigureRegister+0x44>
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	b25a      	sxtb	r2, r3
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e00b      	b.n	8001798 <nRF24_SetConfigureRegister+0x5c>
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	b25a      	sxtb	r2, r3
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	b25b      	sxtb	r3, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4013      	ands	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]

//	nRF24_WriteRegister(nrf, nRF24_CONFIG_REG, regState, (uint8_t) 2);
	nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, &regState, (uint8_t) 1, "Write Config register");
 800179a:	f107 020f 	add.w	r2, r7, #15
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <nRF24_SetConfigureRegister+0x7c>)
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	2100      	movs	r1, #0
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fa8c 	bl	8000cc4 <nRF24_WriteRegisterX>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800508c 	.word	0x0800508c
 80017b8:	080050a4 	.word	0x080050a4

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_Init+0x40>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_Init+0x40>)
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_Init+0x40>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f94d 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f808 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f001 ff9e 	bl	8003730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x54>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x58>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f965 	bl	8001aee <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	f000 f92d 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_InitTick+0x5c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000018 	.word	0x20000018
 8001858:	20000014 	.word	0x20000014
 800185c:	20000010 	.word	0x20000010

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000014 	.word	0x20000014
 8001884:	2000014c 	.word	0x2000014c

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000014c 	.word	0x2000014c

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_Delay+0x40>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000014 	.word	0x20000014

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	; (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff3e 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff31 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e159      	b.n	8001dd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8148 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d00b      	beq.n	8001b62 <HAL_GPIO_Init+0x5a>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b56:	2b11      	cmp	r3, #17
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0xfc>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b12      	cmp	r3, #18
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a2 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <HAL_GPIO_Init+0x2e4>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a55      	ldr	r2, [pc, #340]	; (8001dec <HAL_GPIO_Init+0x2e4>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_GPIO_Init+0x2e4>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x202>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_GPIO_Init+0x2f0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1fe>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_GPIO_Init+0x2f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_GPIO_Init+0x2f8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1f6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_GPIO_Init+0x2fc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1f2>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4e:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f aea2 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	3724      	adds	r7, #36	; 0x24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	401a      	ands	r2, r3
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d104      	bne.n	8001e92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e25b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d075      	beq.n	8001fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec2:	4ba3      	ldr	r3, [pc, #652]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4ba0      	ldr	r3, [pc, #640]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d112      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05b      	beq.n	8001fac <HAL_RCC_OscConfig+0x108>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d157      	bne.n	8001fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e236      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x74>
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a90      	ldr	r2, [pc, #576]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a83      	ldr	r2, [pc, #524]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a80      	ldr	r2, [pc, #512]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fc94 	bl	8001888 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fc90 	bl	8001888 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1fb      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc80 	bl	8001888 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fc7c 	bl	8001888 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1e7      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe8>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b62      	ldr	r3, [pc, #392]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1bb      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4952      	ldr	r1, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_OscConfig+0x2b0>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff fc35 	bl	8001888 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc31 	bl	8001888 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e19c      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4940      	ldr	r1, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x2b0>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fc14 	bl	8001888 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fc10 	bl	8001888 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e17b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d030      	beq.n	80020f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x2b4>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff fbf4 	bl	8001888 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fbf0 	bl	8001888 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e15b      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x200>
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x2b4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fbdd 	bl	8001888 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff fbd9 	bl	8001888 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e144      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a0 	beq.w	800223e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d121      	bne.n	800217e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_RCC_OscConfig+0x2b8>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7ff fb9f 	bl	8001888 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e011      	b.n	8002172 <HAL_RCC_OscConfig+0x2ce>
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
 800215c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7ff fb92 	bl	8001888 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0fd      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x4d4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <HAL_RCC_OscConfig+0x2f0>
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a7c      	ldr	r2, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x32a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x312>
 800219c:	4b77      	ldr	r3, [pc, #476]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a76      	ldr	r2, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a73      	ldr	r2, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x32a>
 80021b6:	4b71      	ldr	r3, [pc, #452]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a70      	ldr	r2, [pc, #448]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a6d      	ldr	r2, [pc, #436]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7ff fb57 	bl	8001888 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff fb53 	bl	8001888 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0bc      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x33a>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff fb41 	bl	8001888 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fb3d 	bl	8001888 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0a6      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b56      	ldr	r3, [pc, #344]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8092 	beq.w	800236c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d05c      	beq.n	800230e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d141      	bne.n	80022e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff fb11 	bl	8001888 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff fb0d 	bl	8001888 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e078      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	061b      	lsls	r3, r3, #24
 80022ac:	4933      	ldr	r1, [pc, #204]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fae6 	bl	8001888 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff fae2 	bl	8001888 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04d      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x41c>
 80022de:	e045      	b.n	800236c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x4dc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff facf 	bl	8001888 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff facb 	bl	8001888 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x44a>
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e029      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_RCC_OscConfig+0x4d8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	429a      	cmp	r2, r3
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d115      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d10d      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000
 800237c:	40023800 	.word	0x40023800
 8002380:	42470060 	.word	0x42470060

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0cc      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d90c      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d044      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d119      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d003      	beq.n	8002442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	2b03      	cmp	r3, #3
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e067      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4934      	ldr	r1, [pc, #208]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7ff fa08 	bl	8001888 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7ff fa04 	bl	8001888 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e04f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d20c      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4601      	mov	r1, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	fa21 f303 	lsr.w	r3, r1, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f968 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00
 8002540:	40023800 	.word	0x40023800
 8002544:	08005114 	.word	0x08005114
 8002548:	20000018 	.word	0x20000018
 800254c:	20000010 	.word	0x20000010

08002550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002566:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d007      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x32>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d008      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x38>
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 808d 	bne.w	8002696 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800257e:	60bb      	str	r3, [r7, #8]
       break;
 8002580:	e08c      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002584:	60bb      	str	r3, [r7, #8]
      break;
 8002586:	e089      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002588:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002590:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d023      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	ea03 0501 	and.w	r5, r3, r1
 80025b4:	ea04 0602 	and.w	r6, r4, r2
 80025b8:	4a3d      	ldr	r2, [pc, #244]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ba:	fb02 f106 	mul.w	r1, r2, r6
 80025be:	2200      	movs	r2, #0
 80025c0:	fb02 f205 	mul.w	r2, r2, r5
 80025c4:	440a      	add	r2, r1
 80025c6:	493a      	ldr	r1, [pc, #232]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80025c8:	fba5 0101 	umull	r0, r1, r5, r1
 80025cc:	1853      	adds	r3, r2, r1
 80025ce:	4619      	mov	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	f7fd fe59 	bl	8000290 <__aeabi_uldivmod>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e049      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	ea03 0501 	and.w	r5, r3, r1
 80025fc:	ea04 0602 	and.w	r6, r4, r2
 8002600:	4629      	mov	r1, r5
 8002602:	4632      	mov	r2, r6
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	0154      	lsls	r4, r2, #5
 800260e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002612:	014b      	lsls	r3, r1, #5
 8002614:	4619      	mov	r1, r3
 8002616:	4622      	mov	r2, r4
 8002618:	1b49      	subs	r1, r1, r5
 800261a:	eb62 0206 	sbc.w	r2, r2, r6
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	0194      	lsls	r4, r2, #6
 8002628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800262c:	018b      	lsls	r3, r1, #6
 800262e:	1a5b      	subs	r3, r3, r1
 8002630:	eb64 0402 	sbc.w	r4, r4, r2
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	00e2      	lsls	r2, r4, #3
 800263e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002642:	00d9      	lsls	r1, r3, #3
 8002644:	460b      	mov	r3, r1
 8002646:	4614      	mov	r4, r2
 8002648:	195b      	adds	r3, r3, r5
 800264a:	eb44 0406 	adc.w	r4, r4, r6
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	02a2      	lsls	r2, r4, #10
 8002658:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800265c:	0299      	lsls	r1, r3, #10
 800265e:	460b      	mov	r3, r1
 8002660:	4614      	mov	r4, r2
 8002662:	4618      	mov	r0, r3
 8002664:	4621      	mov	r1, r4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f04f 0400 	mov.w	r4, #0
 800266c:	461a      	mov	r2, r3
 800266e:	4623      	mov	r3, r4
 8002670:	f7fd fe0e 	bl	8000290 <__aeabi_uldivmod>
 8002674:	4603      	mov	r3, r0
 8002676:	460c      	mov	r4, r1
 8002678:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	3301      	adds	r3, #1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	60bb      	str	r3, [r7, #8]
      break;
 8002694:	e002      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8002698:	60bb      	str	r3, [r7, #8]
      break;
 800269a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269c:	68bb      	ldr	r3, [r7, #8]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	00f42400 	.word	0x00f42400
 80026b0:	017d7840 	.word	0x017d7840

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000018 	.word	0x20000018

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d4:	4601      	mov	r1, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0b5b      	lsrs	r3, r3, #13
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08005124 	.word	0x08005124

080026f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e056      	b.n	80027b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f84b 	bl	80027bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	ea42 0103 	orr.w	r1, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0104 	and.w	r1, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e18a      	b.n	8002b0c <HAL_SPI_TransmitReceive+0x33c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fe:	f7ff f843 	bl	8001888 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00f      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d107      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x68>
 8002830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800283e:	e15b      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x82>
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002858:	e14e      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	d178      	bne.n	80029be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_TransmitReceive+0x10a>
 80028d4:	8b7b      	ldrh	r3, [r7, #26]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d166      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fe:	e053      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11b      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x176>
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d113      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	b292      	uxth	r2, r2
 800296a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	1c9a      	adds	r2, r3, #2
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002984:	2301      	movs	r3, #1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002988:	f7fe ff7e 	bl	8001888 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002994:	429a      	cmp	r2, r3
 8002996:	d807      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299e:	d003      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029a6:	e0a7      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1a6      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1a1      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x130>
 80029bc:	e07c      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x1fc>
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d16b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f2:	e057      	b.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11c      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d017      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d114      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d119      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d014      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a7e:	f7fe ff03 	bl	8001888 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d803      	bhi.n	8002a96 <HAL_SPI_TransmitReceive+0x2c6>
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d102      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x2cc>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aa2:	e029      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1a2      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d19d      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f993 	bl	8002de8 <SPI_EndRxTxTransaction>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ad4:	e010      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e000      	b.n	8002af8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10f      	bne.n	8002b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
    return;
 8002b56:	e0ba      	b.n	8002cce <HAL_SPI_IRQHandler+0x1ba>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_SPI_IRQHandler+0x66>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	09db      	lsrs	r3, r3, #7
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
    return;
 8002b78:	e0a9      	b.n	8002cce <HAL_SPI_IRQHandler+0x1ba>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_SPI_IRQHandler+0x8c>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8097 	beq.w	8002cce <HAL_SPI_IRQHandler+0x1ba>
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8090 	beq.w	8002cce <HAL_SPI_IRQHandler+0x1ba>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d023      	beq.n	8002c02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d011      	beq.n	8002bea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	e00b      	b.n	8002c02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
        return;
 8002c00:	e065      	b.n	8002cce <HAL_SPI_IRQHandler+0x1ba>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d014      	beq.n	8002c38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00c      	beq.n	8002c5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0208 	orr.w	r2, r3, #8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d032      	beq.n	8002ccc <HAL_SPI_IRQHandler+0x1b8>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_SPI_IRQHandler+0x17e>
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d018      	beq.n	8002cc4 <HAL_SPI_IRQHandler+0x1b0>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0203 	bic.w	r2, r2, #3
 8002ca0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_SPI_IRQHandler+0x19e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_SPI_IRQHandler+0x1c0>)
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50
//          {
//            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
//          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <HAL_SPI_IRQHandler+0x1c0>)
 8002cc0:	651a      	str	r2, [r3, #80]	; 0x50
        if (hspi->hdmatx != NULL)
 8002cc2:	e002      	b.n	8002cca <HAL_SPI_IRQHandler+0x1b6>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f807 	bl	8002cd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
  }
}
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	08002ced 	.word	0x08002ced

08002cd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */

}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ffe6 	bl	8002cd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d24:	e04c      	b.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2c:	d048      	beq.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fdab 	bl	8001888 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d902      	bls.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13d      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5c:	d111      	bne.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d66:	d004      	beq.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d107      	bne.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8a:	d10f      	bne.n	8002dac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002daa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e00f      	b.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d1a3      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <SPI_EndRxTxTransaction+0x7c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <SPI_EndRxTxTransaction+0x80>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0d5b      	lsrs	r3, r3, #21
 8002e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e12:	d112      	bne.n	8002e3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff ff78 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e00f      	b.n	8002e5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d0f2      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x52>
 8002e54:	e000      	b.n	8002e58 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e56:	bf00      	nop
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000018 	.word	0x20000018
 8002e68:	165e9f81 	.word	0x165e9f81

08002e6c <GetPCLK>:
static USART_Handle_t *ptrUSARTx;
bool endLine = false;


uint32_t GetPCLK(USART_TypeDef *pUSARTx)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	uint32_t pclk;
	if (pUSARTx == USART1 || USART6)
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7ff fc2a 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8002e78:	60f8      	str	r0, [r7, #12]
	}
	else if (pUSARTx == USART2)
	{
		pclk = HAL_RCC_GetPCLK1Freq();
	}
	return pclk;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <USART_EnablePeripheralClk>:

/*
 * @USART_EnablePeripheralClk: Enables USARTx clock
 */
static void USART_EnablePeripheralClk(USART_TypeDef *pUSARTx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	if (pUSARTx == USART1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <USART_EnablePeripheralClk+0x54>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d106      	bne.n	8002ea2 <USART_EnablePeripheralClk+0x1e>
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART1EN;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pUSARTx == USART6)
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
	}
}
 8002ea0:	e014      	b.n	8002ecc <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <USART_EnablePeripheralClk+0x5c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d106      	bne.n	8002eb8 <USART_EnablePeripheralClk+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002eb6:	e009      	b.n	8002ecc <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART6)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <USART_EnablePeripheralClk+0x60>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d105      	bne.n	8002ecc <USART_EnablePeripheralClk+0x48>
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4a05      	ldr	r2, [pc, #20]	; (8002edc <USART_EnablePeripheralClk+0x58>)
 8002ec6:	f043 0320 	orr.w	r3, r3, #32
 8002eca:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40011400 	.word	0x40011400

08002ee8 <USART_RxData>:
	}
	return ptrUSARTx->USART_State;
}

USART_State USART_RxData(USART_State desiredState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
	if (ptrUSARTx->USART_State != desiredState && ptrUSARTx->USART_State != USART_READY)
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <USART_RxData+0x50>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	7c1b      	ldrb	r3, [r3, #16]
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d012      	beq.n	8002f24 <USART_RxData+0x3c>
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <USART_RxData+0x50>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	7c1b      	ldrb	r3, [r3, #16]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d00d      	beq.n	8002f24 <USART_RxData+0x3c>
	{
		ptrUSARTx->USART_State = desiredState;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <USART_RxData+0x50>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	79fa      	ldrb	r2, [r7, #7]
 8002f0e:	741a      	strb	r2, [r3, #16]

		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE | USART_CR1_RE);
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <USART_RxData+0x50>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <USART_RxData+0x50>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8002f22:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <USART_RxData+0x50>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	7c1b      	ldrb	r3, [r3, #16]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	200000b8 	.word	0x200000b8

08002f3c <USART2_IRQHandler>:

/*
 * @USART2_IRQHandler: IRQ handler for servicing USART2 interrupts
 */
void USART2_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	endLine = false;
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <USART2_IRQHandler+0x128>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]

	// Transmit buffer empty
	if (ptrUSARTx->pUSARTx->SR & USART_SR_TXE)
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d019      	beq.n	8002f8a <USART2_IRQHandler+0x4e>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	7c1b      	ldrb	r3, [r3, #16]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d114      	bne.n	8002f8a <USART2_IRQHandler+0x4e>
		{
			// TXE
			if (ptrUSARTx->txLength)		// if there is stuff to send...
 8002f60:	4b41      	ldr	r3, [pc, #260]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	7f1b      	ldrb	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00f      	beq.n	8002f8a <USART2_IRQHandler+0x4e>
			{
				ptrUSARTx->pUSARTx->DR = *ptrUSARTx->txBuffer++; // send to serial
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	6953      	ldr	r3, [r2, #20]
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	6151      	str	r1, [r2, #20]
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
				ptrUSARTx->txLength--;
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	7f1a      	ldrb	r2, [r3, #28]
 8002f84:	3a01      	subs	r2, #1
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	771a      	strb	r2, [r3, #28]
			}
		}
	}

	// RXNE
	if (ptrUSARTx->pUSARTx->SR & USART_SR_RXNE)
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d020      	beq.n	8002fdc <USART2_IRQHandler+0xa0>
	{
		ptrUSARTx->rxBuffer[ptrUSARTx->txIdx] = ptrUSARTx->pUSARTx->DR;
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	b2ca      	uxtb	r2, r1
 8002fb4:	701a      	strb	r2, [r3, #0]

		if(ptrUSARTx->rxBuffer[ptrUSARTx->txIdx++] == '\r')
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6999      	ldr	r1, [r3, #24]
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002fc4:	1c50      	adds	r0, r2, #1
 8002fc6:	b2c0      	uxtb	r0, r0
 8002fc8:	f883 0020 	strb.w	r0, [r3, #32]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b0d      	cmp	r3, #13
 8002fd4:	d102      	bne.n	8002fdc <USART2_IRQHandler+0xa0>
		{
			endLine = true;
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <USART2_IRQHandler+0x128>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (ptrUSARTx->pUSARTx->SR & USART_SR_TC) // transmission complete
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01f      	beq.n	800302c <USART2_IRQHandler+0xf0>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	7c1b      	ldrb	r3, [r3, #16]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d107      	bne.n	8003006 <USART2_IRQHandler+0xca>
		{
			if (!ptrUSARTx->txLength)		 // if no more bytes to send
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <USART2_IRQHandler+0x12c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	7f1b      	ldrb	r3, [r3, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8003000:	f000 f834 	bl	800306c <USART_CloseTransmission>
 8003004:	e012      	b.n	800302c <USART2_IRQHandler+0xf0>
			}
		}
		else if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <USART2_IRQHandler+0x12c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	7c1b      	ldrb	r3, [r3, #16]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d10d      	bne.n	800302c <USART2_IRQHandler+0xf0>
		{
			if (endLine)
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <USART2_IRQHandler+0x128>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8003018:	f000 f828 	bl	800306c <USART_CloseTransmission>
				ptrUSARTx->TxEndOfLineIdx++;
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <USART2_IRQHandler+0x12c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003024:	3201      	adds	r2, #1
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
	}
	ptrUSARTx->txIdx &= ptrUSARTx->bitMask;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <USART2_IRQHandler+0x12c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <USART2_IRQHandler+0x12c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7fda      	ldrb	r2, [r3, #31]
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <USART2_IRQHandler+0x12c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	400a      	ands	r2, r1
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f883 2020 	strb.w	r2, [r3, #32]
	ptrUSARTx->rxIdx &= ptrUSARTx->bitMask;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <USART2_IRQHandler+0x12c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <USART2_IRQHandler+0x12c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	7fda      	ldrb	r2, [r3, #31]
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <USART2_IRQHandler+0x12c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200000bc 	.word	0x200000bc
 8003068:	200000b8 	.word	0x200000b8

0800306c <USART_CloseTransmission>:

static void USART_CloseTransmission()
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <USART_CloseTransmission+0x50>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	7c1b      	ldrb	r3, [r3, #16]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d00e      	beq.n	8003098 <USART_CloseTransmission+0x2c>
		//USART_ApplicationCallback(ptrUSARTx);
//		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE);
//		ptrUSARTx->rxLength = ptrUSARTx->rxSize;	// restoring the original RX size
//		ptrUSARTx->rxBufferIdx = 0;
	}
	else if (ptrUSARTx->USART_State == USART_TX_BUSY)
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <USART_CloseTransmission+0x50>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	7c1b      	ldrb	r3, [r3, #16]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d109      	bne.n	8003098 <USART_CloseTransmission+0x2c>
	{
		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <USART_CloseTransmission+0x50>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <USART_CloseTransmission+0x50>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003096:	60da      	str	r2, [r3, #12]
	}
	ptrUSARTx->USART_State = ptrUSARTx->session ? USART_RX_BUSY : USART_READY;
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <USART_CloseTransmission+0x50>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <USART_CloseTransmission+0x3c>
 80030a4:	2202      	movs	r2, #2
 80030a6:	e000      	b.n	80030aa <USART_CloseTransmission+0x3e>
 80030a8:	2201      	movs	r2, #1
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <USART_CloseTransmission+0x50>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	741a      	strb	r2, [r3, #16]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200000b8 	.word	0x200000b8

080030c0 <USART_Initization>:

/*
 * @USART_Init: Populates USART struct
 */
void USART_Initization(USART_Handle_t *pUSART)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	ptrUSARTx = pUSART;
 80030c8:	4a5b      	ldr	r2, [pc, #364]	; (8003238 <USART_Initization+0x178>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]

	// initializing peripheral clock
	USART_EnablePeripheralClk(pUSART->pUSARTx);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fed6 	bl	8002e84 <USART_EnablePeripheralClk>

	// enable UE bit
	pUSART->pUSARTx->CR1 |= USART_CR1_UE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e6:	60da      	str	r2, [r3, #12]

	// word length
	pUSART->pUSARTx->CR1 |= pUSART->USART_Config.USART_wordLength << USART_CR1_M_Pos;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7b5b      	ldrb	r3, [r3, #13]
 80030f2:	031b      	lsls	r3, r3, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]

	// parity control
	if (pUSART->USART_Config.USART_parityControl)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	791b      	ldrb	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <USART_Initization+0x56>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_PS;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	60da      	str	r2, [r3, #12]
	}

	// USART mode
	if (pUSART->USART_Config.USART_mode == USART_MODE_TX)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7b9b      	ldrb	r3, [r3, #14]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <USART_Initization+0x70>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0208 	orr.w	r2, r2, #8
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e018      	b.n	8003162 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_RX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7b9b      	ldrb	r3, [r3, #14]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <USART_Initization+0x8a>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_RE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0204 	orr.w	r2, r2, #4
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	e00b      	b.n	8003162 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_TXRX)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7b9b      	ldrb	r3, [r3, #14]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d107      	bne.n	8003162 <USART_Initization+0xa2>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 020c 	orr.w	r2, r2, #12
 8003160:	60da      	str	r2, [r3, #12]
	}

	if (pUSART->dmaTransfer == DMA_TX_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <USART_Initization+0xbc>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317a:	615a      	str	r2, [r3, #20]
	}

	if (pUSART->dmaReception == DMA_RX_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <USART_Initization+0xd6>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003194:	615a      	str	r2, [r3, #20]
	}
	// STOP bit
	pUSART->pUSARTx->CR2 |= pUSART->USART_Config.USART_stopBits << USART_CR2_STOP_Pos;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7b1b      	ldrb	r3, [r3, #12]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	4619      	mov	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	611a      	str	r2, [r3, #16]

	// Hardware control
						// todo ....!

	// configuring baud rate
	uint8_t oversamplingValue = 16, divisor = 100;
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	2364      	movs	r3, #100	; 0x64
 80031b2:	77bb      	strb	r3, [r7, #30]
	uint32_t tempUsartDiv, tempFraction;

	uint8_t over8 = pUSART->pUSARTx->CR1 & USART_CR1_OVER8; 	// by default, over8=0 = 16x oversampling
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2300      	movs	r3, #0
 80031bc:	777b      	strb	r3, [r7, #29]
	tempUsartDiv = (GetPCLK(pUSART->pUSARTx) * divisor) / (8 * (2 - over8) * pUSART->USART_Config.USART_baudRate);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe52 	bl	8002e6c <GetPCLK>
 80031c8:	4602      	mov	r2, r0
 80031ca:	7fbb      	ldrb	r3, [r7, #30]
 80031cc:	fb03 f202 	mul.w	r2, r3, r2
 80031d0:	7f7b      	ldrb	r3, [r7, #29]
 80031d2:	f1c3 0302 	rsb	r3, r3, #2
 80031d6:	4619      	mov	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	fb03 f301 	mul.w	r3, r3, r1
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	61bb      	str	r3, [r7, #24]

	uint8_t divMantissa = tempUsartDiv / divisor;
 80031e8:	7fbb      	ldrb	r3, [r7, #30]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	75fb      	strb	r3, [r7, #23]
	tempFraction = (tempUsartDiv - divMantissa * divisor) * oversamplingValue;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	7fba      	ldrb	r2, [r7, #30]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	7ffa      	ldrb	r2, [r7, #31]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	613b      	str	r3, [r7, #16]

	uint8_t divFraction = (tempFraction + 50)/divisor;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800320e:	7fbb      	ldrb	r3, [r7, #30]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	73fb      	strb	r3, [r7, #15]

	// writing to BRR register
	pUSART->pUSARTx->BRR |= (divMantissa << USART_BRR_DIV_Mantissa_Pos | divFraction);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	0119      	lsls	r1, r3, #4
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	430b      	orrs	r3, r1
 8003224:	4619      	mov	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]

}
 800322e:	bf00      	nop
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200000b8 	.word	0x200000b8

0800323c <I2C_Initilization>:

/*
 * Initializes user-defined variables for I2C struct
 */
void I2C_Initilization(I2C_Config_t *I2C_Config, I2C_TypeDef *i2cPeripheral)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	I2C1_handle.pI2Cx = i2cPeripheral;
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <I2C_Initilization+0x2c>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6013      	str	r3, [r2, #0]
	I2C1_handle.I2C_Config = *I2C_Config;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <I2C_Initilization+0x2c>)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003256:	e883 0003 	stmia.w	r3, {r0, r1}
	I2C_Init(&I2C1_handle);
 800325a:	4803      	ldr	r0, [pc, #12]	; (8003268 <I2C_Initilization+0x2c>)
 800325c:	f7fd fa1a 	bl	8000694 <I2C_Init>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200000c0 	.word	0x200000c0

0800326c <USART_Init>:

/*
 * Initializes user-defined variables for USART struct
 */
void USART_Init (void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	USART2_handle.pUSARTx = USART2;
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <USART_Init+0x8c>)
 8003272:	4a22      	ldr	r2, [pc, #136]	; (80032fc <USART_Init+0x90>)
 8003274:	601a      	str	r2, [r3, #0]
	USART2_handle.USART_Config.USART_baudRate = USART_BAUD_9600;
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <USART_Init+0x8c>)
 8003278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800327c:	609a      	str	r2, [r3, #8]
	USART2_handle.USART_Config.USART_mode = USART_MODE_TXRX;
 800327e:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <USART_Init+0x8c>)
 8003280:	2202      	movs	r2, #2
 8003282:	739a      	strb	r2, [r3, #14]
	USART2_handle.USART_Config.USART_parityControl = USART_PARITY_DISABLED;
 8003284:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <USART_Init+0x8c>)
 8003286:	2200      	movs	r2, #0
 8003288:	711a      	strb	r2, [r3, #4]
	USART2_handle.USART_Config.USART_stopBits = USART_STOP;
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <USART_Init+0x8c>)
 800328c:	2200      	movs	r2, #0
 800328e:	731a      	strb	r2, [r3, #12]
	USART2_handle.USART_Config.USART_wordLength = USART_8_DATA_BITS;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <USART_Init+0x8c>)
 8003292:	2200      	movs	r2, #0
 8003294:	735a      	strb	r2, [r3, #13]
	USART2_handle.rxBuffer = usart_fifo;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <USART_Init+0x8c>)
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <USART_Init+0x94>)
 800329a:	619a      	str	r2, [r3, #24]
	USART2_handle.rxLength = usart_rxLength -1;
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <USART_Init+0x98>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <USART_Init+0x8c>)
 80032a6:	775a      	strb	r2, [r3, #29]
	USART2_handle.rxSize = usart_rxLength - 1;
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <USART_Init+0x98>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <USART_Init+0x8c>)
 80032b2:	779a      	strb	r2, [r3, #30]
	USART2_handle.bitMask = usart_rxLength - 2;
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <USART_Init+0x98>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	3b02      	subs	r3, #2
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <USART_Init+0x8c>)
 80032be:	77da      	strb	r2, [r3, #31]
	USART2_handle.txIdx = 0;
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <USART_Init+0x8c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]
	USART2_handle.rxIdx = 0;
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <USART_Init+0x8c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	USART2_handle.dmaTransfer = DMA_TX_DISABLE;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <USART_Init+0x8c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	USART2_handle.dmaReception = DMA_RX_DISABLE;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <USART_Init+0x8c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	USART2_handle.session = SET;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <USART_Init+0x8c>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	USART_Initization(&USART2_handle);
 80032e8:	4803      	ldr	r0, [pc, #12]	; (80032f8 <USART_Init+0x8c>)
 80032ea:	f7ff fee9 	bl	80030c0 <USART_Initization>

	USART_EnableRxInterrupts();
 80032ee:	f000 fb97 	bl	8003a20 <USART_EnableRxInterrupts>
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000150 	.word	0x20000150
 80032fc:	40004400 	.word	0x40004400
 8003300:	20000134 	.word	0x20000134
 8003304:	20000015 	.word	0x20000015

08003308 <SPI_Init>:

void SPI_Init(SPI_InitTypeDef *SPI_Config, SPI_TypeDef *SPIx)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	SPI_handle.Instance = SPIx;
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <SPI_Init+0x54>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6013      	str	r3, [r2, #0]
	SPI_handle.Init = *SPI_Config;
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <SPI_Init+0x54>)
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	1d1c      	adds	r4, r3, #4
 800331e:	4615      	mov	r5, r2
 8003320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800332c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	__HAL_RCC_SPI2_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <SPI_Init+0x58>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <SPI_Init+0x58>)
 800333a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <SPI_Init+0x58>)
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
	HAL_SPI_Init(&SPI_handle);
 800334c:	4803      	ldr	r0, [pc, #12]	; (800335c <SPI_Init+0x54>)
 800334e:	f7ff f9d1 	bl	80026f4 <HAL_SPI_Init>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bdb0      	pop	{r4, r5, r7, pc}
 800335a:	bf00      	nop
 800335c:	200000dc 	.word	0x200000dc
 8003360:	40023800 	.word	0x40023800

08003364 <nRF24_Init>:

void nRF24_Init(nrfl2401_Config *radioConfig)
{
 8003364:	b5b0      	push	{r4, r5, r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	nrfRadio.config = *radioConfig;
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <nRF24_Init+0x34>)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	1d1c      	adds	r4, r3, #4
 8003372:	4615      	mov	r5, r2
 8003374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003380:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003384:	e884 0003 	stmia.w	r4, {r0, r1}
	nRF24_Initialization(&nrfRadio);
 8003388:	4803      	ldr	r0, [pc, #12]	; (8003398 <nRF24_Init+0x34>)
 800338a:	f7fe f837 	bl	80013fc <nRF24_Initialization>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bdb0      	pop	{r4, r5, r7, pc}
 8003396:	bf00      	nop
 8003398:	200001ec 	.word	0x200001ec

0800339c <main>:
#define PRI_UINT64_C_Val(value) ((unsigned long) (value>>32)), ((unsigned long)value)
#define PRI_UINT64 "%lx%lx"


int main(void)
{
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b0a8      	sub	sp, #160	; 0xa0
 80033a0:	af00      	add	r7, sp, #0
	printf ("--- welcome ---\n");
 80033a2:	484c      	ldr	r0, [pc, #304]	; (80034d4 <main+0x138>)
 80033a4:	f000 fc20 	bl	8003be8 <puts>

	//uint64_t arr = PRI_UINT64_C_Val(0x05000030abcd1234);
	HAL_Init();
 80033a8:	f7fe fa08 	bl	80017bc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80033ac:	f000 f8a6 	bl	80034fc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80033b0:	f000 f904 	bl	80035bc <MX_GPIO_Init>

	/* Initialize I2C struct */
	I2C_Config_t i2c_config = {
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <main+0x13c>)
 80033b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033be:	e883 0003 	stmia.w	r3, {r0, r1}
		I2C_AckControl: I2C_ACK_ENABLE,
		I2C_SCLSpeed: I2C_SCL_SPEED_SM,
		I2C_DeviceAddress: MCP9808_ADDR,
		I2C_FMDutyCycle: I2C_FM_DUTY_2
	};
    I2C_Initilization(&i2c_config, I2C1);
 80033c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033c6:	4945      	ldr	r1, [pc, #276]	; (80034dc <main+0x140>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff37 	bl	800323c <I2C_Initilization>

    /* Initialize USART struct */
    USART_Init();
 80033ce:	f7ff ff4d 	bl	800326c <USART_Init>

    /* Initialize SPI struct */
    SPI_InitTypeDef spi_config = {
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <main+0x144>)
 80033d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80033d8:	461d      	mov	r5, r3
 80033da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			FirstBit: SPI_FIRSTBIT_MSB,
			TIMode: SPI_TIMODE_DISABLE,
			CRCCalculation: SPI_CRCCALCULATION_DISABLE,
			CRCPolynomial: 7
    };
    SPI_Init(&spi_config, SPI2);
 80033ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033ee:	493d      	ldr	r1, [pc, #244]	; (80034e4 <main+0x148>)
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff89 	bl	8003308 <SPI_Init>

//    DMA_Start_IT(&dma_usart_tx, (uint32_t) tx_buff, &usart.pUSARTx->DR);
//    DMA_Start_IT(&dma_usart_rx, &usart.pUSARTx->DR, (uint32_t) rx_buff);


    uint8_t primaryTxAddresses[5] = {0xd7, 0xd7, 0xd7, 0xd7, 0xd7};
 80033f6:	4a3c      	ldr	r2, [pc, #240]	; (80034e8 <main+0x14c>)
 80033f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003400:	6018      	str	r0, [r3, #0]
 8003402:	3304      	adds	r3, #4
 8003404:	7019      	strb	r1, [r3, #0]

    uint8_t primaryTx[1][5] = { {0xd7, 0xd7, 0xd7, 0xd7, 0xd7} };
 8003406:	4a39      	ldr	r2, [pc, #228]	; (80034ec <main+0x150>)
 8003408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800340c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003410:	6018      	str	r0, [r3, #0]
 8003412:	3304      	adds	r3, #4
 8003414:	7019      	strb	r1, [r3, #0]

    uint8_t rxPayloadWidths[ptxDevicesUsed] = {1};						// payload widths for respective data pipes
 8003416:	2301      	movs	r3, #1
 8003418:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    nrfl2401_Config radioConfig = {
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	2238      	movs	r2, #56	; 0x38
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fb63 	bl	8003aee <memset>
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <main+0x154>)
 800342a:	607b      	str	r3, [r7, #4]
			enableRxDataPipes: (& (uint8_t ) {DATA_PIPE_0}),
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    nrfl2401_Config radioConfig = {
 8003432:	f107 0387 	add.w	r3, r7, #135	; 0x87
 8003436:	60bb      	str	r3, [r7, #8]
			addressFieldWidth: nRF24_FIVE_BYTES,
			addressWidth: 5,
			rfChannel: 0,
			dataRate: nRF24_RF_DR_HIGH(nRF24_SPEED_2MBPS),
			rxPayloadWidths: rxPayloadWidths,
			disableAutoAck: ((uint8_t []) {1, DATA_PIPE_0}), // by default, auto ACK is enabled for all the data pipes - note: the first element represents the size, and from second onwards is data pipes
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <main+0x158>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    nrfl2401_Config radioConfig = {
 8003440:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	2308      	movs	r3, #8
 8003448:	763b      	strb	r3, [r7, #24]
 800344a:	2305      	movs	r3, #5
 800344c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003450:	2303      	movs	r3, #3
 8003452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
			txAddress: primaryTxAddresses,
			txAddressesList: primaryTx,

    		spiHandle: &SPI_handle
    };
    nRF24_Init(&radioConfig);
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff77 	bl	8003364 <nRF24_Init>

//    nRF24_ReadPayload(&nrfRadio);

    nRF24_TransmitPayload(&nrfRadio, (uint8_t []) {'E'});
 8003476:	2345      	movs	r3, #69	; 0x45
 8003478:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800347c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003480:	4619      	mov	r1, r3
 8003482:	481d      	ldr	r0, [pc, #116]	; (80034f8 <main+0x15c>)
 8003484:	f7fe f8a0 	bl	80015c8 <nRF24_TransmitPayload>

    nRF24_TransmitPayload(&nrfRadio, (uint8_t []) {15});
 8003488:	230f      	movs	r3, #15
 800348a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800348e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003492:	4619      	mov	r1, r3
 8003494:	4818      	ldr	r0, [pc, #96]	; (80034f8 <main+0x15c>)
 8003496:	f7fe f897 	bl	80015c8 <nRF24_TransmitPayload>

    nRF24_TransmitPayload(&nrfRadio, (uint8_t []) {'A'});
 800349a:	2341      	movs	r3, #65	; 0x41
 800349c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80034a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034a4:	4619      	mov	r1, r3
 80034a6:	4814      	ldr	r0, [pc, #80]	; (80034f8 <main+0x15c>)
 80034a8:	f7fe f88e 	bl	80015c8 <nRF24_TransmitPayload>

    nRF24_TransmitPayload(&nrfRadio, (uint8_t []) {'D'});
 80034ac:	2344      	movs	r3, #68	; 0x44
 80034ae:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 80034b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034b6:	4619      	mov	r1, r3
 80034b8:	480f      	ldr	r0, [pc, #60]	; (80034f8 <main+0x15c>)
 80034ba:	f7fe f885 	bl	80015c8 <nRF24_TransmitPayload>

    nRF24_TransmitPayload(&nrfRadio, (uint8_t []) {'1'});
 80034be:	2331      	movs	r3, #49	; 0x31
 80034c0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 80034c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034c8:	4619      	mov	r1, r3
 80034ca:	480b      	ldr	r0, [pc, #44]	; (80034f8 <main+0x15c>)
 80034cc:	f7fe f87c 	bl	80015c8 <nRF24_TransmitPayload>



//    ContinueReadingStatusReg(&nrfRadio);
    while(1);
 80034d0:	e7fe      	b.n	80034d0 <main+0x134>
 80034d2:	bf00      	nop
 80034d4:	080050bc 	.word	0x080050bc
 80034d8:	080050cc 	.word	0x080050cc
 80034dc:	40005400 	.word	0x40005400
 80034e0:	080050d4 	.word	0x080050d4
 80034e4:	40003800 	.word	0x40003800
 80034e8:	08005100 	.word	0x08005100
 80034ec:	08005108 	.word	0x08005108
 80034f0:	200000dc 	.word	0x200000dc
 80034f4:	08005110 	.word	0x08005110
 80034f8:	200001ec 	.word	0x200001ec

080034fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b094      	sub	sp, #80	; 0x50
 8003500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003502:	f107 0320 	add.w	r3, r7, #32
 8003506:	2230      	movs	r2, #48	; 0x30
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 faef 	bl	8003aee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <SystemClock_Config+0xb8>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <SystemClock_Config+0xb8>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <SystemClock_Config+0xb8>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800353c:	2300      	movs	r3, #0
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <SystemClock_Config+0xbc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <SystemClock_Config+0xbc>)
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <SystemClock_Config+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800355c:	2302      	movs	r3, #2
 800355e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003564:	2310      	movs	r3, #16
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800356c:	f107 0320 	add.w	r3, r7, #32
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fc97 	bl	8001ea4 <HAL_RCC_OscConfig>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800357c:	f000 f8d0 	bl	8003720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003580:	230f      	movs	r3, #15
 8003582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fef2 	bl	8002384 <HAL_RCC_ClockConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80035a6:	f000 f8bb 	bl	8003720 <Error_Handler>
  }
}
 80035aa:	bf00      	nop
 80035ac:	3750      	adds	r7, #80	; 0x50
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000

080035bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();			// Push button (PC13)
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b51      	ldr	r3, [pc, #324]	; (800370c <MX_GPIO_Init+0x150>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a50      	ldr	r2, [pc, #320]	; (800370c <MX_GPIO_Init+0x150>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b4e      	ldr	r3, [pc, #312]	; (800370c <MX_GPIO_Init+0x150>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();			// LED (PA5)
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <MX_GPIO_Init+0x150>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a49      	ldr	r2, [pc, #292]	; (800370c <MX_GPIO_Init+0x150>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <MX_GPIO_Init+0x150>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();			// I2C1
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <MX_GPIO_Init+0x150>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a42      	ldr	r2, [pc, #264]	; (800370c <MX_GPIO_Init+0x150>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b40      	ldr	r3, [pc, #256]	; (800370c <MX_GPIO_Init+0x150>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();			// SPI2
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <MX_GPIO_Init+0x150>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <MX_GPIO_Init+0x150>)
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <MX_GPIO_Init+0x150>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]

	/* LED/Push button config */

	// Configure GPIO pin : PC13 [PUSH BUTTON]
	gpio.Pin = GPIO_PIN_13;
 8003632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003636:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_IT_FALLING;
 8003638:	4b35      	ldr	r3, [pc, #212]	; (8003710 <MX_GPIO_Init+0x154>)
 800363a:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpio);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	4833      	ldr	r0, [pc, #204]	; (8003714 <MX_GPIO_Init+0x158>)
 8003648:	f7fe fa5e 	bl	8001b08 <HAL_GPIO_Init>

	// Configure GPIO pin : PA5  		// LED
	gpio.Pin = GPIO_PIN_5;
 800364c:	2320      	movs	r3, #32
 800364e:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	2301      	movs	r3, #1
 8003652:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &gpio);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	482d      	ldr	r0, [pc, #180]	; (8003718 <MX_GPIO_Init+0x15c>)
 8003664:	f7fe fa50 	bl	8001b08 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003668:	2120      	movs	r1, #32
 800366a:	482b      	ldr	r0, [pc, #172]	; (8003718 <MX_GPIO_Init+0x15c>)
 800366c:	f7fe fbff 	bl	8001e6e <HAL_GPIO_TogglePin>

	/* Configure SPI */
	nRF24_GPIO_Init(&gpio);
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fadd 	bl	8000c34 <nRF24_GPIO_Init>
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2140      	movs	r1, #64	; 0x40
 800367e:	4826      	ldr	r0, [pc, #152]	; (8003718 <MX_GPIO_Init+0x15c>)
 8003680:	f7fe fbdc 	bl	8001e3c <HAL_GPIO_WritePin>

	/* USART config */
	gpio.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003688:	230c      	movs	r3, #12
 800368a:	617b      	str	r3, [r7, #20]
	gpio.Pull = GPIO_PULLUP;				// idle state is HIGH
 800368c:	2301      	movs	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
	gpio.Alternate = GPIO_AF7_USART2;
 8003690:	2307      	movs	r3, #7
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio);
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4619      	mov	r1, r3
 800369a:	481f      	ldr	r0, [pc, #124]	; (8003718 <MX_GPIO_Init+0x15c>)
 800369c:	f7fe fa34 	bl	8001b08 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036a0:	2026      	movs	r0, #38	; 0x26
 80036a2:	f7fe fa16 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

	/* Configure I2C */
	gpio.Mode = GPIO_MODE_AF_OD;
 80036a6:	2312      	movs	r3, #18
 80036a8:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ae:	2302      	movs	r3, #2
 80036b0:	623b      	str	r3, [r7, #32]
	gpio.Alternate = GPIO_AF4_I2C1;
 80036b2:	2304      	movs	r3, #4
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

	// scl
	gpio.Pin = GPIO_PIN_6;
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4816      	ldr	r0, [pc, #88]	; (800371c <MX_GPIO_Init+0x160>)
 80036c2:	f7fe fa21 	bl	8001b08 <HAL_GPIO_Init>

	// sdata
	gpio.Pin = GPIO_PIN_7;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4812      	ldr	r0, [pc, #72]	; (800371c <MX_GPIO_Init+0x160>)
 80036d2:	f7fe fa19 	bl	8001b08 <HAL_GPIO_Init>

	/* EXTI GPIO init */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	2028      	movs	r0, #40	; 0x28
 80036dc:	f7fe f9dd 	bl	8001a9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036e0:	2028      	movs	r0, #40	; 0x28
 80036e2:	f7fe f9f6 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

	/* I2C Interrupts */
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036e6:	201f      	movs	r0, #31
 80036e8:	f7fe f9f3 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036ec:	2020      	movs	r0, #32
 80036ee:	f7fe f9f0 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

	/* SPI Interrupt */
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80036f2:	2024      	movs	r0, #36	; 0x24
 80036f4:	f7fe f9ed 	bl	8001ad2 <HAL_NVIC_EnableIRQ>


//	/* EXTI DMA interrupt */ -- todo remove
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80036f8:	2011      	movs	r0, #17
 80036fa:	f7fe f9ea 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80036fe:	2010      	movs	r0, #16
 8003700:	f7fe f9e7 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
}
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	10210000 	.word	0x10210000
 8003714:	40020800 	.word	0x40020800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400

08003720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_MspInit+0x4c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_MspInit+0x4c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_MspInit+0x4c>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_MspInit+0x4c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <MemManage_Handler+0x4>

0800379a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <BusFault_Handler+0x4>

080037a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <UsageFault_Handler+0x4>

080037a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
//
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
//
  /* USER CODE END PendSV_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <DMA1_Stream5_IRQHandler>:



void DMA1_Stream5_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_rx);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <DMA1_Stream5_IRQHandler+0x10>)
 80037d6:	f7fc fedb 	bl	8000590 <DMA_InterruptHandler>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000184 	.word	0x20000184

080037e4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_tx);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <DMA1_Stream6_IRQHandler+0x10>)
 80037ea:	f7fc fed1 	bl	8000590 <DMA_InterruptHandler>
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200001b8 	.word	0x200001b8

080037f8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(nrfRadio.config.spiHandle);
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <SPI2_IRQHandler+0x14>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff f987 	bl	8002b14 <HAL_SPI_IRQHandler>
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200001ec 	.word	0x200001ec

08003810 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	nRF24_IRQHandler(&nrfRadio);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <EXTI9_5_IRQHandler+0x10>)
 8003816:	f7fd fe7d 	bl	8001514 <nRF24_IRQHandler>
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200001ec 	.word	0x200001ec

08003824 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13))
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <EXTI15_10_IRQHandler+0x38>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <EXTI15_10_IRQHandler+0x2e>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <EXTI15_10_IRQHandler+0x38>)
 8003838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800383c:	615a      	str	r2, [r3, #20]
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800383e:	2120      	movs	r1, #32
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <EXTI15_10_IRQHandler+0x3c>)
 8003842:	f7fe fae3 	bl	8001e0c <HAL_GPIO_ReadPin>
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800384a:	2120      	movs	r1, #32
 800384c:	4804      	ldr	r0, [pc, #16]	; (8003860 <EXTI15_10_IRQHandler+0x3c>)
 800384e:	f7fe fb0e 	bl	8001e6e <HAL_GPIO_TogglePin>
	}
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40013c00 	.word	0x40013c00
 8003860:	40020000 	.word	0x40020000

08003864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003868:	f7fd fffa 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <ITM_SendChar+0x48>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <ITM_SendChar+0x48>)
 8003880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <ITM_SendChar+0x4c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <ITM_SendChar+0x4c>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003892:	bf00      	nop
 8003894:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f8      	beq.n	8003894 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80038a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	6013      	str	r3, [r2, #0]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000edfc 	.word	0xe000edfc
 80038bc:	e0000e00 	.word	0xe0000e00

080038c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e00a      	b.n	80038e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038d2:	f3af 8000 	nop.w
 80038d6:	4601      	mov	r1, r0
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	60ba      	str	r2, [r7, #8]
 80038de:	b2ca      	uxtb	r2, r1
 80038e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dbf0      	blt.n	80038d2 <_read+0x12>
	}

return len;
 80038f0:	687b      	ldr	r3, [r7, #4]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e009      	b.n	8003920 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	60ba      	str	r2, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ffab 	bl	8003870 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3301      	adds	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	dbf1      	blt.n	800390c <_write+0x12>
	}
	return len;
 8003928:	687b      	ldr	r3, [r7, #4]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_close>:

int _close(int file)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
	return -1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800395a:	605a      	str	r2, [r3, #4]
	return 0;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_isatty>:

int _isatty(int file)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	return 1;
 8003972:	2301      	movs	r3, #1
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	return 0;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <_sbrk+0x50>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <_sbrk+0x16>
		heap_end = &end;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <_sbrk+0x50>)
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <_sbrk+0x54>)
 80039b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <_sbrk+0x50>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <_sbrk+0x50>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	466a      	mov	r2, sp
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d907      	bls.n	80039d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80039c6:	f000 f85d 	bl	8003a84 <__errno>
 80039ca:	4602      	mov	r2, r0
 80039cc:	230c      	movs	r3, #12
 80039ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039d4:	e006      	b.n	80039e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <_sbrk+0x50>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	4a03      	ldr	r2, [pc, #12]	; (80039ec <_sbrk+0x50>)
 80039e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000140 	.word	0x20000140
 80039f0:	20000230 	.word	0x20000230

080039f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <SystemInit+0x28>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <SystemInit+0x28>)
 8003a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <SystemInit+0x28>)
 8003a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <USART_EnableRxInterrupts>:
		usart->USART_State = USART_INIT;
	}
}

void USART_EnableRxInterrupts()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	USART_RxData(USART_RX_BUSY);
 8003a24:	2002      	movs	r0, #2
 8003a26:	f7ff fa5f 	bl	8002ee8 <USART_RxData>
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a36:	e003      	b.n	8003a40 <LoopCopyDataInit>

08003a38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a3e:	3104      	adds	r1, #4

08003a40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a40:	480b      	ldr	r0, [pc, #44]	; (8003a70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a48:	d3f6      	bcc.n	8003a38 <CopyDataInit>
  ldr  r2, =_sbss
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a4c:	e002      	b.n	8003a54 <LoopFillZerobss>

08003a4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a50:	f842 3b04 	str.w	r3, [r2], #4

08003a54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a58:	d3f9      	bcc.n	8003a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a5a:	f7ff ffcb 	bl	80039f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a5e:	f000 f817 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a62:	f7ff fc9b 	bl	800339c <main>
  bx  lr    
 8003a66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a68:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003a6c:	080051d4 	.word	0x080051d4
  ldr  r0, =_sdata
 8003a70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a74:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003a78:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003a7c:	2000022c 	.word	0x2000022c

08003a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC_IRQHandler>
	...

08003a84 <__errno>:
 8003a84:	4b01      	ldr	r3, [pc, #4]	; (8003a8c <__errno+0x8>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2000001c 	.word	0x2000001c

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4e0d      	ldr	r6, [pc, #52]	; (8003ac8 <__libc_init_array+0x38>)
 8003a94:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a96:	1ba4      	subs	r4, r4, r6
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	42a5      	cmp	r5, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	4e0b      	ldr	r6, [pc, #44]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa2:	4c0c      	ldr	r4, [pc, #48]	; (8003ad4 <__libc_init_array+0x44>)
 8003aa4:	f001 f936 	bl	8004d14 <_init>
 8003aa8:	1ba4      	subs	r4, r4, r6
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	2500      	movs	r5, #0
 8003aae:	42a5      	cmp	r5, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ab8:	4798      	blx	r3
 8003aba:	3501      	adds	r5, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac2:	4798      	blx	r3
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	080051cc 	.word	0x080051cc
 8003acc:	080051cc 	.word	0x080051cc
 8003ad0:	080051cc 	.word	0x080051cc
 8003ad4:	080051d0 	.word	0x080051d0

08003ad8 <memcpy>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	1e43      	subs	r3, r0, #1
 8003adc:	440a      	add	r2, r1
 8003ade:	4291      	cmp	r1, r2
 8003ae0:	d100      	bne.n	8003ae4 <memcpy+0xc>
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aec:	e7f7      	b.n	8003ade <memcpy+0x6>

08003aee <memset>:
 8003aee:	4402      	add	r2, r0
 8003af0:	4603      	mov	r3, r0
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d100      	bne.n	8003af8 <memset+0xa>
 8003af6:	4770      	bx	lr
 8003af8:	f803 1b01 	strb.w	r1, [r3], #1
 8003afc:	e7f9      	b.n	8003af2 <memset+0x4>
	...

08003b00 <iprintf>:
 8003b00:	b40f      	push	{r0, r1, r2, r3}
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <iprintf+0x2c>)
 8003b04:	b513      	push	{r0, r1, r4, lr}
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	b124      	cbz	r4, 8003b14 <iprintf+0x14>
 8003b0a:	69a3      	ldr	r3, [r4, #24]
 8003b0c:	b913      	cbnz	r3, 8003b14 <iprintf+0x14>
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 fa4a 	bl	8003fa8 <__sinit>
 8003b14:	ab05      	add	r3, sp, #20
 8003b16:	9a04      	ldr	r2, [sp, #16]
 8003b18:	68a1      	ldr	r1, [r4, #8]
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f000 fd55 	bl	80045cc <_vfiprintf_r>
 8003b22:	b002      	add	sp, #8
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	b004      	add	sp, #16
 8003b2a:	4770      	bx	lr
 8003b2c:	2000001c 	.word	0x2000001c

08003b30 <_puts_r>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	460e      	mov	r6, r1
 8003b34:	4605      	mov	r5, r0
 8003b36:	b118      	cbz	r0, 8003b40 <_puts_r+0x10>
 8003b38:	6983      	ldr	r3, [r0, #24]
 8003b3a:	b90b      	cbnz	r3, 8003b40 <_puts_r+0x10>
 8003b3c:	f000 fa34 	bl	8003fa8 <__sinit>
 8003b40:	69ab      	ldr	r3, [r5, #24]
 8003b42:	68ac      	ldr	r4, [r5, #8]
 8003b44:	b913      	cbnz	r3, 8003b4c <_puts_r+0x1c>
 8003b46:	4628      	mov	r0, r5
 8003b48:	f000 fa2e 	bl	8003fa8 <__sinit>
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <_puts_r+0xac>)
 8003b4e:	429c      	cmp	r4, r3
 8003b50:	d117      	bne.n	8003b82 <_puts_r+0x52>
 8003b52:	686c      	ldr	r4, [r5, #4]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	071b      	lsls	r3, r3, #28
 8003b58:	d51d      	bpl.n	8003b96 <_puts_r+0x66>
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	b1db      	cbz	r3, 8003b96 <_puts_r+0x66>
 8003b5e:	3e01      	subs	r6, #1
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	b9e9      	cbnz	r1, 8003ba8 <_puts_r+0x78>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da2e      	bge.n	8003bce <_puts_r+0x9e>
 8003b70:	4622      	mov	r2, r4
 8003b72:	210a      	movs	r1, #10
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 f867 	bl	8003c48 <__swbuf_r>
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d011      	beq.n	8003ba2 <_puts_r+0x72>
 8003b7e:	200a      	movs	r0, #10
 8003b80:	e011      	b.n	8003ba6 <_puts_r+0x76>
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <_puts_r+0xb0>)
 8003b84:	429c      	cmp	r4, r3
 8003b86:	d101      	bne.n	8003b8c <_puts_r+0x5c>
 8003b88:	68ac      	ldr	r4, [r5, #8]
 8003b8a:	e7e3      	b.n	8003b54 <_puts_r+0x24>
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_puts_r+0xb4>)
 8003b8e:	429c      	cmp	r4, r3
 8003b90:	bf08      	it	eq
 8003b92:	68ec      	ldreq	r4, [r5, #12]
 8003b94:	e7de      	b.n	8003b54 <_puts_r+0x24>
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 f8a7 	bl	8003cec <__swsetup_r>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d0dd      	beq.n	8003b5e <_puts_r+0x2e>
 8003ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da04      	bge.n	8003bb6 <_puts_r+0x86>
 8003bac:	69a2      	ldr	r2, [r4, #24]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	dc06      	bgt.n	8003bc0 <_puts_r+0x90>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d004      	beq.n	8003bc0 <_puts_r+0x90>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	7019      	strb	r1, [r3, #0]
 8003bbe:	e7cf      	b.n	8003b60 <_puts_r+0x30>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 f840 	bl	8003c48 <__swbuf_r>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d1c9      	bne.n	8003b60 <_puts_r+0x30>
 8003bcc:	e7e9      	b.n	8003ba2 <_puts_r+0x72>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	200a      	movs	r0, #10
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	6022      	str	r2, [r4, #0]
 8003bd6:	7018      	strb	r0, [r3, #0]
 8003bd8:	e7e5      	b.n	8003ba6 <_puts_r+0x76>
 8003bda:	bf00      	nop
 8003bdc:	08005150 	.word	0x08005150
 8003be0:	08005170 	.word	0x08005170
 8003be4:	08005130 	.word	0x08005130

08003be8 <puts>:
 8003be8:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <puts+0xc>)
 8003bea:	4601      	mov	r1, r0
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	f7ff bf9f 	b.w	8003b30 <_puts_r>
 8003bf2:	bf00      	nop
 8003bf4:	2000001c 	.word	0x2000001c

08003bf8 <siprintf>:
 8003bf8:	b40e      	push	{r1, r2, r3}
 8003bfa:	b500      	push	{lr}
 8003bfc:	b09c      	sub	sp, #112	; 0x70
 8003bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003c00:	9002      	str	r0, [sp, #8]
 8003c02:	9006      	str	r0, [sp, #24]
 8003c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c08:	4809      	ldr	r0, [pc, #36]	; (8003c30 <siprintf+0x38>)
 8003c0a:	9107      	str	r1, [sp, #28]
 8003c0c:	9104      	str	r1, [sp, #16]
 8003c0e:	4909      	ldr	r1, [pc, #36]	; (8003c34 <siprintf+0x3c>)
 8003c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c14:	9105      	str	r1, [sp, #20]
 8003c16:	6800      	ldr	r0, [r0, #0]
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	a902      	add	r1, sp, #8
 8003c1c:	f000 fbb4 	bl	8004388 <_svfiprintf_r>
 8003c20:	9b02      	ldr	r3, [sp, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	b01c      	add	sp, #112	; 0x70
 8003c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c2c:	b003      	add	sp, #12
 8003c2e:	4770      	bx	lr
 8003c30:	2000001c 	.word	0x2000001c
 8003c34:	ffff0208 	.word	0xffff0208

08003c38 <strcpy>:
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d1f9      	bne.n	8003c3a <strcpy+0x2>
 8003c46:	4770      	bx	lr

08003c48 <__swbuf_r>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	460e      	mov	r6, r1
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	4605      	mov	r5, r0
 8003c50:	b118      	cbz	r0, 8003c5a <__swbuf_r+0x12>
 8003c52:	6983      	ldr	r3, [r0, #24]
 8003c54:	b90b      	cbnz	r3, 8003c5a <__swbuf_r+0x12>
 8003c56:	f000 f9a7 	bl	8003fa8 <__sinit>
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <__swbuf_r+0x98>)
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d12a      	bne.n	8003cb6 <__swbuf_r+0x6e>
 8003c60:	686c      	ldr	r4, [r5, #4]
 8003c62:	69a3      	ldr	r3, [r4, #24]
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	071a      	lsls	r2, r3, #28
 8003c6a:	d52e      	bpl.n	8003cca <__swbuf_r+0x82>
 8003c6c:	6923      	ldr	r3, [r4, #16]
 8003c6e:	b363      	cbz	r3, 8003cca <__swbuf_r+0x82>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1ac0      	subs	r0, r0, r3
 8003c76:	6963      	ldr	r3, [r4, #20]
 8003c78:	b2f6      	uxtb	r6, r6
 8003c7a:	4283      	cmp	r3, r0
 8003c7c:	4637      	mov	r7, r6
 8003c7e:	dc04      	bgt.n	8003c8a <__swbuf_r+0x42>
 8003c80:	4621      	mov	r1, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 f926 	bl	8003ed4 <_fflush_r>
 8003c88:	bb28      	cbnz	r0, 8003cd6 <__swbuf_r+0x8e>
 8003c8a:	68a3      	ldr	r3, [r4, #8]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	60a3      	str	r3, [r4, #8]
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	701e      	strb	r6, [r3, #0]
 8003c98:	6963      	ldr	r3, [r4, #20]
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	4283      	cmp	r3, r0
 8003c9e:	d004      	beq.n	8003caa <__swbuf_r+0x62>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	07db      	lsls	r3, r3, #31
 8003ca4:	d519      	bpl.n	8003cda <__swbuf_r+0x92>
 8003ca6:	2e0a      	cmp	r6, #10
 8003ca8:	d117      	bne.n	8003cda <__swbuf_r+0x92>
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 f911 	bl	8003ed4 <_fflush_r>
 8003cb2:	b190      	cbz	r0, 8003cda <__swbuf_r+0x92>
 8003cb4:	e00f      	b.n	8003cd6 <__swbuf_r+0x8e>
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <__swbuf_r+0x9c>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	d101      	bne.n	8003cc0 <__swbuf_r+0x78>
 8003cbc:	68ac      	ldr	r4, [r5, #8]
 8003cbe:	e7d0      	b.n	8003c62 <__swbuf_r+0x1a>
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <__swbuf_r+0xa0>)
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	bf08      	it	eq
 8003cc6:	68ec      	ldreq	r4, [r5, #12]
 8003cc8:	e7cb      	b.n	8003c62 <__swbuf_r+0x1a>
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f80d 	bl	8003cec <__swsetup_r>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d0cc      	beq.n	8003c70 <__swbuf_r+0x28>
 8003cd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003cda:	4638      	mov	r0, r7
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	08005150 	.word	0x08005150
 8003ce4:	08005170 	.word	0x08005170
 8003ce8:	08005130 	.word	0x08005130

08003cec <__swsetup_r>:
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <__swsetup_r+0xcc>)
 8003cee:	b570      	push	{r4, r5, r6, lr}
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	b125      	cbz	r5, 8003d02 <__swsetup_r+0x16>
 8003cf8:	69ab      	ldr	r3, [r5, #24]
 8003cfa:	b913      	cbnz	r3, 8003d02 <__swsetup_r+0x16>
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 f953 	bl	8003fa8 <__sinit>
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <__swsetup_r+0xd0>)
 8003d04:	429c      	cmp	r4, r3
 8003d06:	d10f      	bne.n	8003d28 <__swsetup_r+0x3c>
 8003d08:	686c      	ldr	r4, [r5, #4]
 8003d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	0715      	lsls	r5, r2, #28
 8003d12:	d42c      	bmi.n	8003d6e <__swsetup_r+0x82>
 8003d14:	06d0      	lsls	r0, r2, #27
 8003d16:	d411      	bmi.n	8003d3c <__swsetup_r+0x50>
 8003d18:	2209      	movs	r2, #9
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d26:	e03e      	b.n	8003da6 <__swsetup_r+0xba>
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <__swsetup_r+0xd4>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	d101      	bne.n	8003d32 <__swsetup_r+0x46>
 8003d2e:	68ac      	ldr	r4, [r5, #8]
 8003d30:	e7eb      	b.n	8003d0a <__swsetup_r+0x1e>
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <__swsetup_r+0xd8>)
 8003d34:	429c      	cmp	r4, r3
 8003d36:	bf08      	it	eq
 8003d38:	68ec      	ldreq	r4, [r5, #12]
 8003d3a:	e7e6      	b.n	8003d0a <__swsetup_r+0x1e>
 8003d3c:	0751      	lsls	r1, r2, #29
 8003d3e:	d512      	bpl.n	8003d66 <__swsetup_r+0x7a>
 8003d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d42:	b141      	cbz	r1, 8003d56 <__swsetup_r+0x6a>
 8003d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d48:	4299      	cmp	r1, r3
 8003d4a:	d002      	beq.n	8003d52 <__swsetup_r+0x66>
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f000 fa19 	bl	8004184 <_free_r>
 8003d52:	2300      	movs	r3, #0
 8003d54:	6363      	str	r3, [r4, #52]	; 0x34
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	f043 0308 	orr.w	r3, r3, #8
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	b94b      	cbnz	r3, 8003d86 <__swsetup_r+0x9a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7c:	d003      	beq.n	8003d86 <__swsetup_r+0x9a>
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f9bf 	bl	8004104 <__smakebuf_r>
 8003d86:	89a2      	ldrh	r2, [r4, #12]
 8003d88:	f012 0301 	ands.w	r3, r2, #1
 8003d8c:	d00c      	beq.n	8003da8 <__swsetup_r+0xbc>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60a3      	str	r3, [r4, #8]
 8003d92:	6963      	ldr	r3, [r4, #20]
 8003d94:	425b      	negs	r3, r3
 8003d96:	61a3      	str	r3, [r4, #24]
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	b953      	cbnz	r3, 8003db2 <__swsetup_r+0xc6>
 8003d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003da4:	d1ba      	bne.n	8003d1c <__swsetup_r+0x30>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	0792      	lsls	r2, r2, #30
 8003daa:	bf58      	it	pl
 8003dac:	6963      	ldrpl	r3, [r4, #20]
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	e7f2      	b.n	8003d98 <__swsetup_r+0xac>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e7f7      	b.n	8003da6 <__swsetup_r+0xba>
 8003db6:	bf00      	nop
 8003db8:	2000001c 	.word	0x2000001c
 8003dbc:	08005150 	.word	0x08005150
 8003dc0:	08005170 	.word	0x08005170
 8003dc4:	08005130 	.word	0x08005130

08003dc8 <__sflush_r>:
 8003dc8:	898a      	ldrh	r2, [r1, #12]
 8003dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	0710      	lsls	r0, r2, #28
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	d458      	bmi.n	8003e88 <__sflush_r+0xc0>
 8003dd6:	684b      	ldr	r3, [r1, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dc05      	bgt.n	8003de8 <__sflush_r+0x20>
 8003ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	dc02      	bgt.n	8003de8 <__sflush_r+0x20>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dea:	2e00      	cmp	r6, #0
 8003dec:	d0f9      	beq.n	8003de2 <__sflush_r+0x1a>
 8003dee:	2300      	movs	r3, #0
 8003df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003df4:	682f      	ldr	r7, [r5, #0]
 8003df6:	6a21      	ldr	r1, [r4, #32]
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	d032      	beq.n	8003e62 <__sflush_r+0x9a>
 8003dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	075a      	lsls	r2, r3, #29
 8003e02:	d505      	bpl.n	8003e10 <__sflush_r+0x48>
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	1ac0      	subs	r0, r0, r3
 8003e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e0a:	b10b      	cbz	r3, 8003e10 <__sflush_r+0x48>
 8003e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e0e:	1ac0      	subs	r0, r0, r3
 8003e10:	2300      	movs	r3, #0
 8003e12:	4602      	mov	r2, r0
 8003e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e16:	6a21      	ldr	r1, [r4, #32]
 8003e18:	4628      	mov	r0, r5
 8003e1a:	47b0      	blx	r6
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	d106      	bne.n	8003e30 <__sflush_r+0x68>
 8003e22:	6829      	ldr	r1, [r5, #0]
 8003e24:	291d      	cmp	r1, #29
 8003e26:	d848      	bhi.n	8003eba <__sflush_r+0xf2>
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <__sflush_r+0x108>)
 8003e2a:	40ca      	lsrs	r2, r1
 8003e2c:	07d6      	lsls	r6, r2, #31
 8003e2e:	d544      	bpl.n	8003eba <__sflush_r+0xf2>
 8003e30:	2200      	movs	r2, #0
 8003e32:	6062      	str	r2, [r4, #4]
 8003e34:	04d9      	lsls	r1, r3, #19
 8003e36:	6922      	ldr	r2, [r4, #16]
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	d504      	bpl.n	8003e46 <__sflush_r+0x7e>
 8003e3c:	1c42      	adds	r2, r0, #1
 8003e3e:	d101      	bne.n	8003e44 <__sflush_r+0x7c>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b903      	cbnz	r3, 8003e46 <__sflush_r+0x7e>
 8003e44:	6560      	str	r0, [r4, #84]	; 0x54
 8003e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e48:	602f      	str	r7, [r5, #0]
 8003e4a:	2900      	cmp	r1, #0
 8003e4c:	d0c9      	beq.n	8003de2 <__sflush_r+0x1a>
 8003e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e52:	4299      	cmp	r1, r3
 8003e54:	d002      	beq.n	8003e5c <__sflush_r+0x94>
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f994 	bl	8004184 <_free_r>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e60:	e7c0      	b.n	8003de4 <__sflush_r+0x1c>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b0      	blx	r6
 8003e68:	1c41      	adds	r1, r0, #1
 8003e6a:	d1c8      	bne.n	8003dfe <__sflush_r+0x36>
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0c5      	beq.n	8003dfe <__sflush_r+0x36>
 8003e72:	2b1d      	cmp	r3, #29
 8003e74:	d001      	beq.n	8003e7a <__sflush_r+0xb2>
 8003e76:	2b16      	cmp	r3, #22
 8003e78:	d101      	bne.n	8003e7e <__sflush_r+0xb6>
 8003e7a:	602f      	str	r7, [r5, #0]
 8003e7c:	e7b1      	b.n	8003de2 <__sflush_r+0x1a>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	e7ad      	b.n	8003de4 <__sflush_r+0x1c>
 8003e88:	690f      	ldr	r7, [r1, #16]
 8003e8a:	2f00      	cmp	r7, #0
 8003e8c:	d0a9      	beq.n	8003de2 <__sflush_r+0x1a>
 8003e8e:	0793      	lsls	r3, r2, #30
 8003e90:	680e      	ldr	r6, [r1, #0]
 8003e92:	bf08      	it	eq
 8003e94:	694b      	ldreq	r3, [r1, #20]
 8003e96:	600f      	str	r7, [r1, #0]
 8003e98:	bf18      	it	ne
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	eba6 0807 	sub.w	r8, r6, r7
 8003ea0:	608b      	str	r3, [r1, #8]
 8003ea2:	f1b8 0f00 	cmp.w	r8, #0
 8003ea6:	dd9c      	ble.n	8003de2 <__sflush_r+0x1a>
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	463a      	mov	r2, r7
 8003eac:	6a21      	ldr	r1, [r4, #32]
 8003eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b0      	blx	r6
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	dc06      	bgt.n	8003ec6 <__sflush_r+0xfe>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec4:	e78e      	b.n	8003de4 <__sflush_r+0x1c>
 8003ec6:	4407      	add	r7, r0
 8003ec8:	eba8 0800 	sub.w	r8, r8, r0
 8003ecc:	e7e9      	b.n	8003ea2 <__sflush_r+0xda>
 8003ece:	bf00      	nop
 8003ed0:	20400001 	.word	0x20400001

08003ed4 <_fflush_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	690b      	ldr	r3, [r1, #16]
 8003ed8:	4605      	mov	r5, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	b1db      	cbz	r3, 8003f16 <_fflush_r+0x42>
 8003ede:	b118      	cbz	r0, 8003ee8 <_fflush_r+0x14>
 8003ee0:	6983      	ldr	r3, [r0, #24]
 8003ee2:	b90b      	cbnz	r3, 8003ee8 <_fflush_r+0x14>
 8003ee4:	f000 f860 	bl	8003fa8 <__sinit>
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <_fflush_r+0x48>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d109      	bne.n	8003f02 <_fflush_r+0x2e>
 8003eee:	686c      	ldr	r4, [r5, #4]
 8003ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ef4:	b17b      	cbz	r3, 8003f16 <_fflush_r+0x42>
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efe:	f7ff bf63 	b.w	8003dc8 <__sflush_r>
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <_fflush_r+0x4c>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d101      	bne.n	8003f0c <_fflush_r+0x38>
 8003f08:	68ac      	ldr	r4, [r5, #8]
 8003f0a:	e7f1      	b.n	8003ef0 <_fflush_r+0x1c>
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <_fflush_r+0x50>)
 8003f0e:	429c      	cmp	r4, r3
 8003f10:	bf08      	it	eq
 8003f12:	68ec      	ldreq	r4, [r5, #12]
 8003f14:	e7ec      	b.n	8003ef0 <_fflush_r+0x1c>
 8003f16:	2000      	movs	r0, #0
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08005150 	.word	0x08005150
 8003f20:	08005170 	.word	0x08005170
 8003f24:	08005130 	.word	0x08005130

08003f28 <std>:
 8003f28:	2300      	movs	r3, #0
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f32:	6083      	str	r3, [r0, #8]
 8003f34:	8181      	strh	r1, [r0, #12]
 8003f36:	6643      	str	r3, [r0, #100]	; 0x64
 8003f38:	81c2      	strh	r2, [r0, #14]
 8003f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f3e:	6183      	str	r3, [r0, #24]
 8003f40:	4619      	mov	r1, r3
 8003f42:	2208      	movs	r2, #8
 8003f44:	305c      	adds	r0, #92	; 0x5c
 8003f46:	f7ff fdd2 	bl	8003aee <memset>
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <std+0x38>)
 8003f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <std+0x3c>)
 8003f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <std+0x40>)
 8003f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <std+0x44>)
 8003f58:	6224      	str	r4, [r4, #32]
 8003f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	bf00      	nop
 8003f60:	08004b29 	.word	0x08004b29
 8003f64:	08004b4b 	.word	0x08004b4b
 8003f68:	08004b83 	.word	0x08004b83
 8003f6c:	08004ba7 	.word	0x08004ba7

08003f70 <_cleanup_r>:
 8003f70:	4901      	ldr	r1, [pc, #4]	; (8003f78 <_cleanup_r+0x8>)
 8003f72:	f000 b885 	b.w	8004080 <_fwalk_reent>
 8003f76:	bf00      	nop
 8003f78:	08003ed5 	.word	0x08003ed5

08003f7c <__sfmoreglue>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	1e4a      	subs	r2, r1, #1
 8003f80:	2568      	movs	r5, #104	; 0x68
 8003f82:	4355      	muls	r5, r2
 8003f84:	460e      	mov	r6, r1
 8003f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f8a:	f000 f949 	bl	8004220 <_malloc_r>
 8003f8e:	4604      	mov	r4, r0
 8003f90:	b140      	cbz	r0, 8003fa4 <__sfmoreglue+0x28>
 8003f92:	2100      	movs	r1, #0
 8003f94:	e9c0 1600 	strd	r1, r6, [r0]
 8003f98:	300c      	adds	r0, #12
 8003f9a:	60a0      	str	r0, [r4, #8]
 8003f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fa0:	f7ff fda5 	bl	8003aee <memset>
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}

08003fa8 <__sinit>:
 8003fa8:	6983      	ldr	r3, [r0, #24]
 8003faa:	b510      	push	{r4, lr}
 8003fac:	4604      	mov	r4, r0
 8003fae:	bb33      	cbnz	r3, 8003ffe <__sinit+0x56>
 8003fb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003fb4:	6503      	str	r3, [r0, #80]	; 0x50
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <__sinit+0x58>)
 8003fb8:	4a12      	ldr	r2, [pc, #72]	; (8004004 <__sinit+0x5c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6282      	str	r2, [r0, #40]	; 0x28
 8003fbe:	4298      	cmp	r0, r3
 8003fc0:	bf04      	itt	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	6183      	streq	r3, [r0, #24]
 8003fc6:	f000 f81f 	bl	8004008 <__sfp>
 8003fca:	6060      	str	r0, [r4, #4]
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f000 f81b 	bl	8004008 <__sfp>
 8003fd2:	60a0      	str	r0, [r4, #8]
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f000 f817 	bl	8004008 <__sfp>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60e0      	str	r0, [r4, #12]
 8003fde:	2104      	movs	r1, #4
 8003fe0:	6860      	ldr	r0, [r4, #4]
 8003fe2:	f7ff ffa1 	bl	8003f28 <std>
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	2109      	movs	r1, #9
 8003fea:	68a0      	ldr	r0, [r4, #8]
 8003fec:	f7ff ff9c 	bl	8003f28 <std>
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	2112      	movs	r1, #18
 8003ff4:	68e0      	ldr	r0, [r4, #12]
 8003ff6:	f7ff ff97 	bl	8003f28 <std>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61a3      	str	r3, [r4, #24]
 8003ffe:	bd10      	pop	{r4, pc}
 8004000:	0800512c 	.word	0x0800512c
 8004004:	08003f71 	.word	0x08003f71

08004008 <__sfp>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <__sfp+0x70>)
 800400c:	681e      	ldr	r6, [r3, #0]
 800400e:	69b3      	ldr	r3, [r6, #24]
 8004010:	4607      	mov	r7, r0
 8004012:	b913      	cbnz	r3, 800401a <__sfp+0x12>
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffc7 	bl	8003fa8 <__sinit>
 800401a:	3648      	adds	r6, #72	; 0x48
 800401c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004020:	3b01      	subs	r3, #1
 8004022:	d503      	bpl.n	800402c <__sfp+0x24>
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	b133      	cbz	r3, 8004036 <__sfp+0x2e>
 8004028:	6836      	ldr	r6, [r6, #0]
 800402a:	e7f7      	b.n	800401c <__sfp+0x14>
 800402c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004030:	b16d      	cbz	r5, 800404e <__sfp+0x46>
 8004032:	3468      	adds	r4, #104	; 0x68
 8004034:	e7f4      	b.n	8004020 <__sfp+0x18>
 8004036:	2104      	movs	r1, #4
 8004038:	4638      	mov	r0, r7
 800403a:	f7ff ff9f 	bl	8003f7c <__sfmoreglue>
 800403e:	6030      	str	r0, [r6, #0]
 8004040:	2800      	cmp	r0, #0
 8004042:	d1f1      	bne.n	8004028 <__sfp+0x20>
 8004044:	230c      	movs	r3, #12
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4604      	mov	r4, r0
 800404a:	4620      	mov	r0, r4
 800404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <__sfp+0x74>)
 8004050:	6665      	str	r5, [r4, #100]	; 0x64
 8004052:	e9c4 5500 	strd	r5, r5, [r4]
 8004056:	60a5      	str	r5, [r4, #8]
 8004058:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800405c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004060:	2208      	movs	r2, #8
 8004062:	4629      	mov	r1, r5
 8004064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004068:	f7ff fd41 	bl	8003aee <memset>
 800406c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004074:	e7e9      	b.n	800404a <__sfp+0x42>
 8004076:	bf00      	nop
 8004078:	0800512c 	.word	0x0800512c
 800407c:	ffff0001 	.word	0xffff0001

08004080 <_fwalk_reent>:
 8004080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004084:	4680      	mov	r8, r0
 8004086:	4689      	mov	r9, r1
 8004088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800408c:	2600      	movs	r6, #0
 800408e:	b914      	cbnz	r4, 8004096 <_fwalk_reent+0x16>
 8004090:	4630      	mov	r0, r6
 8004092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004096:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800409a:	3f01      	subs	r7, #1
 800409c:	d501      	bpl.n	80040a2 <_fwalk_reent+0x22>
 800409e:	6824      	ldr	r4, [r4, #0]
 80040a0:	e7f5      	b.n	800408e <_fwalk_reent+0xe>
 80040a2:	89ab      	ldrh	r3, [r5, #12]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d907      	bls.n	80040b8 <_fwalk_reent+0x38>
 80040a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040ac:	3301      	adds	r3, #1
 80040ae:	d003      	beq.n	80040b8 <_fwalk_reent+0x38>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4640      	mov	r0, r8
 80040b4:	47c8      	blx	r9
 80040b6:	4306      	orrs	r6, r0
 80040b8:	3568      	adds	r5, #104	; 0x68
 80040ba:	e7ee      	b.n	800409a <_fwalk_reent+0x1a>

080040bc <__swhatbuf_r>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c4:	2900      	cmp	r1, #0
 80040c6:	b096      	sub	sp, #88	; 0x58
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	da07      	bge.n	80040de <__swhatbuf_r+0x22>
 80040ce:	2300      	movs	r3, #0
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	89b3      	ldrh	r3, [r6, #12]
 80040d4:	061a      	lsls	r2, r3, #24
 80040d6:	d410      	bmi.n	80040fa <__swhatbuf_r+0x3e>
 80040d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040dc:	e00e      	b.n	80040fc <__swhatbuf_r+0x40>
 80040de:	466a      	mov	r2, sp
 80040e0:	f000 fd88 	bl	8004bf4 <_fstat_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	dbf2      	blt.n	80040ce <__swhatbuf_r+0x12>
 80040e8:	9a01      	ldr	r2, [sp, #4]
 80040ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040f2:	425a      	negs	r2, r3
 80040f4:	415a      	adcs	r2, r3
 80040f6:	602a      	str	r2, [r5, #0]
 80040f8:	e7ee      	b.n	80040d8 <__swhatbuf_r+0x1c>
 80040fa:	2340      	movs	r3, #64	; 0x40
 80040fc:	2000      	movs	r0, #0
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	b016      	add	sp, #88	; 0x58
 8004102:	bd70      	pop	{r4, r5, r6, pc}

08004104 <__smakebuf_r>:
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004108:	079d      	lsls	r5, r3, #30
 800410a:	4606      	mov	r6, r0
 800410c:	460c      	mov	r4, r1
 800410e:	d507      	bpl.n	8004120 <__smakebuf_r+0x1c>
 8004110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	2301      	movs	r3, #1
 800411a:	6163      	str	r3, [r4, #20]
 800411c:	b002      	add	sp, #8
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	ab01      	add	r3, sp, #4
 8004122:	466a      	mov	r2, sp
 8004124:	f7ff ffca 	bl	80040bc <__swhatbuf_r>
 8004128:	9900      	ldr	r1, [sp, #0]
 800412a:	4605      	mov	r5, r0
 800412c:	4630      	mov	r0, r6
 800412e:	f000 f877 	bl	8004220 <_malloc_r>
 8004132:	b948      	cbnz	r0, 8004148 <__smakebuf_r+0x44>
 8004134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004138:	059a      	lsls	r2, r3, #22
 800413a:	d4ef      	bmi.n	800411c <__smakebuf_r+0x18>
 800413c:	f023 0303 	bic.w	r3, r3, #3
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	81a3      	strh	r3, [r4, #12]
 8004146:	e7e3      	b.n	8004110 <__smakebuf_r+0xc>
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <__smakebuf_r+0x7c>)
 800414a:	62b3      	str	r3, [r6, #40]	; 0x28
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	6020      	str	r0, [r4, #0]
 8004150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	6163      	str	r3, [r4, #20]
 800415a:	9b01      	ldr	r3, [sp, #4]
 800415c:	6120      	str	r0, [r4, #16]
 800415e:	b15b      	cbz	r3, 8004178 <__smakebuf_r+0x74>
 8004160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004164:	4630      	mov	r0, r6
 8004166:	f000 fd57 	bl	8004c18 <_isatty_r>
 800416a:	b128      	cbz	r0, 8004178 <__smakebuf_r+0x74>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	431d      	orrs	r5, r3
 800417c:	81a5      	strh	r5, [r4, #12]
 800417e:	e7cd      	b.n	800411c <__smakebuf_r+0x18>
 8004180:	08003f71 	.word	0x08003f71

08004184 <_free_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	2900      	cmp	r1, #0
 800418a:	d045      	beq.n	8004218 <_free_r+0x94>
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f0c      	subs	r4, r1, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	18e4      	addlt	r4, r4, r3
 8004198:	f000 fd79 	bl	8004c8e <__malloc_lock>
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <_free_r+0x98>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	4610      	mov	r0, r2
 80041a2:	b933      	cbnz	r3, 80041b2 <_free_r+0x2e>
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	6014      	str	r4, [r2, #0]
 80041a8:	4628      	mov	r0, r5
 80041aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ae:	f000 bd6f 	b.w	8004c90 <__malloc_unlock>
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	d90c      	bls.n	80041d0 <_free_r+0x4c>
 80041b6:	6821      	ldr	r1, [r4, #0]
 80041b8:	1862      	adds	r2, r4, r1
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bf04      	itt	eq
 80041be:	681a      	ldreq	r2, [r3, #0]
 80041c0:	685b      	ldreq	r3, [r3, #4]
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	bf04      	itt	eq
 80041c6:	1852      	addeq	r2, r2, r1
 80041c8:	6022      	streq	r2, [r4, #0]
 80041ca:	6004      	str	r4, [r0, #0]
 80041cc:	e7ec      	b.n	80041a8 <_free_r+0x24>
 80041ce:	4613      	mov	r3, r2
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	b10a      	cbz	r2, 80041d8 <_free_r+0x54>
 80041d4:	42a2      	cmp	r2, r4
 80041d6:	d9fa      	bls.n	80041ce <_free_r+0x4a>
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	1858      	adds	r0, r3, r1
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d10b      	bne.n	80041f8 <_free_r+0x74>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	4401      	add	r1, r0
 80041e4:	1858      	adds	r0, r3, r1
 80041e6:	4282      	cmp	r2, r0
 80041e8:	6019      	str	r1, [r3, #0]
 80041ea:	d1dd      	bne.n	80041a8 <_free_r+0x24>
 80041ec:	6810      	ldr	r0, [r2, #0]
 80041ee:	6852      	ldr	r2, [r2, #4]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	4401      	add	r1, r0
 80041f4:	6019      	str	r1, [r3, #0]
 80041f6:	e7d7      	b.n	80041a8 <_free_r+0x24>
 80041f8:	d902      	bls.n	8004200 <_free_r+0x7c>
 80041fa:	230c      	movs	r3, #12
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	e7d3      	b.n	80041a8 <_free_r+0x24>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	1821      	adds	r1, r4, r0
 8004204:	428a      	cmp	r2, r1
 8004206:	bf04      	itt	eq
 8004208:	6811      	ldreq	r1, [r2, #0]
 800420a:	6852      	ldreq	r2, [r2, #4]
 800420c:	6062      	str	r2, [r4, #4]
 800420e:	bf04      	itt	eq
 8004210:	1809      	addeq	r1, r1, r0
 8004212:	6021      	streq	r1, [r4, #0]
 8004214:	605c      	str	r4, [r3, #4]
 8004216:	e7c7      	b.n	80041a8 <_free_r+0x24>
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	20000144 	.word	0x20000144

08004220 <_malloc_r>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	1ccd      	adds	r5, r1, #3
 8004224:	f025 0503 	bic.w	r5, r5, #3
 8004228:	3508      	adds	r5, #8
 800422a:	2d0c      	cmp	r5, #12
 800422c:	bf38      	it	cc
 800422e:	250c      	movcc	r5, #12
 8004230:	2d00      	cmp	r5, #0
 8004232:	4606      	mov	r6, r0
 8004234:	db01      	blt.n	800423a <_malloc_r+0x1a>
 8004236:	42a9      	cmp	r1, r5
 8004238:	d903      	bls.n	8004242 <_malloc_r+0x22>
 800423a:	230c      	movs	r3, #12
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	2000      	movs	r0, #0
 8004240:	bd70      	pop	{r4, r5, r6, pc}
 8004242:	f000 fd24 	bl	8004c8e <__malloc_lock>
 8004246:	4a21      	ldr	r2, [pc, #132]	; (80042cc <_malloc_r+0xac>)
 8004248:	6814      	ldr	r4, [r2, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	b991      	cbnz	r1, 8004274 <_malloc_r+0x54>
 800424e:	4c20      	ldr	r4, [pc, #128]	; (80042d0 <_malloc_r+0xb0>)
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	b91b      	cbnz	r3, 800425c <_malloc_r+0x3c>
 8004254:	4630      	mov	r0, r6
 8004256:	f000 fc57 	bl	8004b08 <_sbrk_r>
 800425a:	6020      	str	r0, [r4, #0]
 800425c:	4629      	mov	r1, r5
 800425e:	4630      	mov	r0, r6
 8004260:	f000 fc52 	bl	8004b08 <_sbrk_r>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d124      	bne.n	80042b2 <_malloc_r+0x92>
 8004268:	230c      	movs	r3, #12
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	4630      	mov	r0, r6
 800426e:	f000 fd0f 	bl	8004c90 <__malloc_unlock>
 8004272:	e7e4      	b.n	800423e <_malloc_r+0x1e>
 8004274:	680b      	ldr	r3, [r1, #0]
 8004276:	1b5b      	subs	r3, r3, r5
 8004278:	d418      	bmi.n	80042ac <_malloc_r+0x8c>
 800427a:	2b0b      	cmp	r3, #11
 800427c:	d90f      	bls.n	800429e <_malloc_r+0x7e>
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	50cd      	str	r5, [r1, r3]
 8004282:	18cc      	adds	r4, r1, r3
 8004284:	4630      	mov	r0, r6
 8004286:	f000 fd03 	bl	8004c90 <__malloc_unlock>
 800428a:	f104 000b 	add.w	r0, r4, #11
 800428e:	1d23      	adds	r3, r4, #4
 8004290:	f020 0007 	bic.w	r0, r0, #7
 8004294:	1ac3      	subs	r3, r0, r3
 8004296:	d0d3      	beq.n	8004240 <_malloc_r+0x20>
 8004298:	425a      	negs	r2, r3
 800429a:	50e2      	str	r2, [r4, r3]
 800429c:	e7d0      	b.n	8004240 <_malloc_r+0x20>
 800429e:	428c      	cmp	r4, r1
 80042a0:	684b      	ldr	r3, [r1, #4]
 80042a2:	bf16      	itet	ne
 80042a4:	6063      	strne	r3, [r4, #4]
 80042a6:	6013      	streq	r3, [r2, #0]
 80042a8:	460c      	movne	r4, r1
 80042aa:	e7eb      	b.n	8004284 <_malloc_r+0x64>
 80042ac:	460c      	mov	r4, r1
 80042ae:	6849      	ldr	r1, [r1, #4]
 80042b0:	e7cc      	b.n	800424c <_malloc_r+0x2c>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d005      	beq.n	80042c8 <_malloc_r+0xa8>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 fc22 	bl	8004b08 <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d0cf      	beq.n	8004268 <_malloc_r+0x48>
 80042c8:	6025      	str	r5, [r4, #0]
 80042ca:	e7db      	b.n	8004284 <_malloc_r+0x64>
 80042cc:	20000144 	.word	0x20000144
 80042d0:	20000148 	.word	0x20000148

080042d4 <__ssputs_r>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	688e      	ldr	r6, [r1, #8]
 80042da:	429e      	cmp	r6, r3
 80042dc:	4682      	mov	sl, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4690      	mov	r8, r2
 80042e2:	4699      	mov	r9, r3
 80042e4:	d837      	bhi.n	8004356 <__ssputs_r+0x82>
 80042e6:	898a      	ldrh	r2, [r1, #12]
 80042e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042ec:	d031      	beq.n	8004352 <__ssputs_r+0x7e>
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	6909      	ldr	r1, [r1, #16]
 80042f2:	1a6f      	subs	r7, r5, r1
 80042f4:	6965      	ldr	r5, [r4, #20]
 80042f6:	2302      	movs	r3, #2
 80042f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004300:	f109 0301 	add.w	r3, r9, #1
 8004304:	443b      	add	r3, r7
 8004306:	429d      	cmp	r5, r3
 8004308:	bf38      	it	cc
 800430a:	461d      	movcc	r5, r3
 800430c:	0553      	lsls	r3, r2, #21
 800430e:	d530      	bpl.n	8004372 <__ssputs_r+0x9e>
 8004310:	4629      	mov	r1, r5
 8004312:	f7ff ff85 	bl	8004220 <_malloc_r>
 8004316:	4606      	mov	r6, r0
 8004318:	b950      	cbnz	r0, 8004330 <__ssputs_r+0x5c>
 800431a:	230c      	movs	r3, #12
 800431c:	f8ca 3000 	str.w	r3, [sl]
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004330:	463a      	mov	r2, r7
 8004332:	6921      	ldr	r1, [r4, #16]
 8004334:	f7ff fbd0 	bl	8003ad8 <memcpy>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800433e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	6126      	str	r6, [r4, #16]
 8004346:	6165      	str	r5, [r4, #20]
 8004348:	443e      	add	r6, r7
 800434a:	1bed      	subs	r5, r5, r7
 800434c:	6026      	str	r6, [r4, #0]
 800434e:	60a5      	str	r5, [r4, #8]
 8004350:	464e      	mov	r6, r9
 8004352:	454e      	cmp	r6, r9
 8004354:	d900      	bls.n	8004358 <__ssputs_r+0x84>
 8004356:	464e      	mov	r6, r9
 8004358:	4632      	mov	r2, r6
 800435a:	4641      	mov	r1, r8
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	f000 fc7d 	bl	8004c5c <memmove>
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	1b9b      	subs	r3, r3, r6
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	441e      	add	r6, r3
 800436c:	6026      	str	r6, [r4, #0]
 800436e:	2000      	movs	r0, #0
 8004370:	e7dc      	b.n	800432c <__ssputs_r+0x58>
 8004372:	462a      	mov	r2, r5
 8004374:	f000 fc8d 	bl	8004c92 <_realloc_r>
 8004378:	4606      	mov	r6, r0
 800437a:	2800      	cmp	r0, #0
 800437c:	d1e2      	bne.n	8004344 <__ssputs_r+0x70>
 800437e:	6921      	ldr	r1, [r4, #16]
 8004380:	4650      	mov	r0, sl
 8004382:	f7ff feff 	bl	8004184 <_free_r>
 8004386:	e7c8      	b.n	800431a <__ssputs_r+0x46>

08004388 <_svfiprintf_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	461d      	mov	r5, r3
 800438e:	898b      	ldrh	r3, [r1, #12]
 8004390:	061f      	lsls	r7, r3, #24
 8004392:	b09d      	sub	sp, #116	; 0x74
 8004394:	4680      	mov	r8, r0
 8004396:	460c      	mov	r4, r1
 8004398:	4616      	mov	r6, r2
 800439a:	d50f      	bpl.n	80043bc <_svfiprintf_r+0x34>
 800439c:	690b      	ldr	r3, [r1, #16]
 800439e:	b96b      	cbnz	r3, 80043bc <_svfiprintf_r+0x34>
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	f7ff ff3d 	bl	8004220 <_malloc_r>
 80043a6:	6020      	str	r0, [r4, #0]
 80043a8:	6120      	str	r0, [r4, #16]
 80043aa:	b928      	cbnz	r0, 80043b8 <_svfiprintf_r+0x30>
 80043ac:	230c      	movs	r3, #12
 80043ae:	f8c8 3000 	str.w	r3, [r8]
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b6:	e0c8      	b.n	800454a <_svfiprintf_r+0x1c2>
 80043b8:	2340      	movs	r3, #64	; 0x40
 80043ba:	6163      	str	r3, [r4, #20]
 80043bc:	2300      	movs	r3, #0
 80043be:	9309      	str	r3, [sp, #36]	; 0x24
 80043c0:	2320      	movs	r3, #32
 80043c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043cc:	9503      	str	r5, [sp, #12]
 80043ce:	f04f 0b01 	mov.w	fp, #1
 80043d2:	4637      	mov	r7, r6
 80043d4:	463d      	mov	r5, r7
 80043d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043da:	b10b      	cbz	r3, 80043e0 <_svfiprintf_r+0x58>
 80043dc:	2b25      	cmp	r3, #37	; 0x25
 80043de:	d13e      	bne.n	800445e <_svfiprintf_r+0xd6>
 80043e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80043e4:	d00b      	beq.n	80043fe <_svfiprintf_r+0x76>
 80043e6:	4653      	mov	r3, sl
 80043e8:	4632      	mov	r2, r6
 80043ea:	4621      	mov	r1, r4
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7ff ff71 	bl	80042d4 <__ssputs_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	f000 80a4 	beq.w	8004540 <_svfiprintf_r+0x1b8>
 80043f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fa:	4453      	add	r3, sl
 80043fc:	9309      	str	r3, [sp, #36]	; 0x24
 80043fe:	783b      	ldrb	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 809d 	beq.w	8004540 <_svfiprintf_r+0x1b8>
 8004406:	2300      	movs	r3, #0
 8004408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	9307      	str	r3, [sp, #28]
 8004414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004418:	931a      	str	r3, [sp, #104]	; 0x68
 800441a:	462f      	mov	r7, r5
 800441c:	2205      	movs	r2, #5
 800441e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004422:	4850      	ldr	r0, [pc, #320]	; (8004564 <_svfiprintf_r+0x1dc>)
 8004424:	f7fb fee4 	bl	80001f0 <memchr>
 8004428:	9b04      	ldr	r3, [sp, #16]
 800442a:	b9d0      	cbnz	r0, 8004462 <_svfiprintf_r+0xda>
 800442c:	06d9      	lsls	r1, r3, #27
 800442e:	bf44      	itt	mi
 8004430:	2220      	movmi	r2, #32
 8004432:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004436:	071a      	lsls	r2, r3, #28
 8004438:	bf44      	itt	mi
 800443a:	222b      	movmi	r2, #43	; 0x2b
 800443c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004440:	782a      	ldrb	r2, [r5, #0]
 8004442:	2a2a      	cmp	r2, #42	; 0x2a
 8004444:	d015      	beq.n	8004472 <_svfiprintf_r+0xea>
 8004446:	9a07      	ldr	r2, [sp, #28]
 8004448:	462f      	mov	r7, r5
 800444a:	2000      	movs	r0, #0
 800444c:	250a      	movs	r5, #10
 800444e:	4639      	mov	r1, r7
 8004450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004454:	3b30      	subs	r3, #48	; 0x30
 8004456:	2b09      	cmp	r3, #9
 8004458:	d94d      	bls.n	80044f6 <_svfiprintf_r+0x16e>
 800445a:	b1b8      	cbz	r0, 800448c <_svfiprintf_r+0x104>
 800445c:	e00f      	b.n	800447e <_svfiprintf_r+0xf6>
 800445e:	462f      	mov	r7, r5
 8004460:	e7b8      	b.n	80043d4 <_svfiprintf_r+0x4c>
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <_svfiprintf_r+0x1dc>)
 8004464:	1a80      	subs	r0, r0, r2
 8004466:	fa0b f000 	lsl.w	r0, fp, r0
 800446a:	4318      	orrs	r0, r3
 800446c:	9004      	str	r0, [sp, #16]
 800446e:	463d      	mov	r5, r7
 8004470:	e7d3      	b.n	800441a <_svfiprintf_r+0x92>
 8004472:	9a03      	ldr	r2, [sp, #12]
 8004474:	1d11      	adds	r1, r2, #4
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	9103      	str	r1, [sp, #12]
 800447a:	2a00      	cmp	r2, #0
 800447c:	db01      	blt.n	8004482 <_svfiprintf_r+0xfa>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e004      	b.n	800448c <_svfiprintf_r+0x104>
 8004482:	4252      	negs	r2, r2
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	9207      	str	r2, [sp, #28]
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	783b      	ldrb	r3, [r7, #0]
 800448e:	2b2e      	cmp	r3, #46	; 0x2e
 8004490:	d10c      	bne.n	80044ac <_svfiprintf_r+0x124>
 8004492:	787b      	ldrb	r3, [r7, #1]
 8004494:	2b2a      	cmp	r3, #42	; 0x2a
 8004496:	d133      	bne.n	8004500 <_svfiprintf_r+0x178>
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	9203      	str	r2, [sp, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bfb8      	it	lt
 80044a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044a8:	3702      	adds	r7, #2
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	4d2e      	ldr	r5, [pc, #184]	; (8004568 <_svfiprintf_r+0x1e0>)
 80044ae:	7839      	ldrb	r1, [r7, #0]
 80044b0:	2203      	movs	r2, #3
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7fb fe9c 	bl	80001f0 <memchr>
 80044b8:	b138      	cbz	r0, 80044ca <_svfiprintf_r+0x142>
 80044ba:	2340      	movs	r3, #64	; 0x40
 80044bc:	1b40      	subs	r0, r0, r5
 80044be:	fa03 f000 	lsl.w	r0, r3, r0
 80044c2:	9b04      	ldr	r3, [sp, #16]
 80044c4:	4303      	orrs	r3, r0
 80044c6:	3701      	adds	r7, #1
 80044c8:	9304      	str	r3, [sp, #16]
 80044ca:	7839      	ldrb	r1, [r7, #0]
 80044cc:	4827      	ldr	r0, [pc, #156]	; (800456c <_svfiprintf_r+0x1e4>)
 80044ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044d2:	2206      	movs	r2, #6
 80044d4:	1c7e      	adds	r6, r7, #1
 80044d6:	f7fb fe8b 	bl	80001f0 <memchr>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d038      	beq.n	8004550 <_svfiprintf_r+0x1c8>
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <_svfiprintf_r+0x1e8>)
 80044e0:	bb13      	cbnz	r3, 8004528 <_svfiprintf_r+0x1a0>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	3307      	adds	r3, #7
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	3308      	adds	r3, #8
 80044ec:	9303      	str	r3, [sp, #12]
 80044ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f0:	444b      	add	r3, r9
 80044f2:	9309      	str	r3, [sp, #36]	; 0x24
 80044f4:	e76d      	b.n	80043d2 <_svfiprintf_r+0x4a>
 80044f6:	fb05 3202 	mla	r2, r5, r2, r3
 80044fa:	2001      	movs	r0, #1
 80044fc:	460f      	mov	r7, r1
 80044fe:	e7a6      	b.n	800444e <_svfiprintf_r+0xc6>
 8004500:	2300      	movs	r3, #0
 8004502:	3701      	adds	r7, #1
 8004504:	9305      	str	r3, [sp, #20]
 8004506:	4619      	mov	r1, r3
 8004508:	250a      	movs	r5, #10
 800450a:	4638      	mov	r0, r7
 800450c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004510:	3a30      	subs	r2, #48	; 0x30
 8004512:	2a09      	cmp	r2, #9
 8004514:	d903      	bls.n	800451e <_svfiprintf_r+0x196>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0c8      	beq.n	80044ac <_svfiprintf_r+0x124>
 800451a:	9105      	str	r1, [sp, #20]
 800451c:	e7c6      	b.n	80044ac <_svfiprintf_r+0x124>
 800451e:	fb05 2101 	mla	r1, r5, r1, r2
 8004522:	2301      	movs	r3, #1
 8004524:	4607      	mov	r7, r0
 8004526:	e7f0      	b.n	800450a <_svfiprintf_r+0x182>
 8004528:	ab03      	add	r3, sp, #12
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4622      	mov	r2, r4
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <_svfiprintf_r+0x1ec>)
 8004530:	a904      	add	r1, sp, #16
 8004532:	4640      	mov	r0, r8
 8004534:	f3af 8000 	nop.w
 8004538:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800453c:	4681      	mov	r9, r0
 800453e:	d1d6      	bne.n	80044ee <_svfiprintf_r+0x166>
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	065b      	lsls	r3, r3, #25
 8004544:	f53f af35 	bmi.w	80043b2 <_svfiprintf_r+0x2a>
 8004548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800454a:	b01d      	add	sp, #116	; 0x74
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004550:	ab03      	add	r3, sp, #12
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4622      	mov	r2, r4
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <_svfiprintf_r+0x1ec>)
 8004558:	a904      	add	r1, sp, #16
 800455a:	4640      	mov	r0, r8
 800455c:	f000 f9c2 	bl	80048e4 <_printf_i>
 8004560:	e7ea      	b.n	8004538 <_svfiprintf_r+0x1b0>
 8004562:	bf00      	nop
 8004564:	08005190 	.word	0x08005190
 8004568:	08005196 	.word	0x08005196
 800456c:	0800519a 	.word	0x0800519a
 8004570:	00000000 	.word	0x00000000
 8004574:	080042d5 	.word	0x080042d5

08004578 <__sfputc_r>:
 8004578:	6893      	ldr	r3, [r2, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	b410      	push	{r4}
 8004580:	6093      	str	r3, [r2, #8]
 8004582:	da08      	bge.n	8004596 <__sfputc_r+0x1e>
 8004584:	6994      	ldr	r4, [r2, #24]
 8004586:	42a3      	cmp	r3, r4
 8004588:	db01      	blt.n	800458e <__sfputc_r+0x16>
 800458a:	290a      	cmp	r1, #10
 800458c:	d103      	bne.n	8004596 <__sfputc_r+0x1e>
 800458e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004592:	f7ff bb59 	b.w	8003c48 <__swbuf_r>
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	1c58      	adds	r0, r3, #1
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	7019      	strb	r1, [r3, #0]
 800459e:	4608      	mov	r0, r1
 80045a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <__sfputs_r>:
 80045a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a8:	4606      	mov	r6, r0
 80045aa:	460f      	mov	r7, r1
 80045ac:	4614      	mov	r4, r2
 80045ae:	18d5      	adds	r5, r2, r3
 80045b0:	42ac      	cmp	r4, r5
 80045b2:	d101      	bne.n	80045b8 <__sfputs_r+0x12>
 80045b4:	2000      	movs	r0, #0
 80045b6:	e007      	b.n	80045c8 <__sfputs_r+0x22>
 80045b8:	463a      	mov	r2, r7
 80045ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045be:	4630      	mov	r0, r6
 80045c0:	f7ff ffda 	bl	8004578 <__sfputc_r>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d1f3      	bne.n	80045b0 <__sfputs_r+0xa>
 80045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045cc <_vfiprintf_r>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	460c      	mov	r4, r1
 80045d2:	b09d      	sub	sp, #116	; 0x74
 80045d4:	4617      	mov	r7, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	4606      	mov	r6, r0
 80045da:	b118      	cbz	r0, 80045e4 <_vfiprintf_r+0x18>
 80045dc:	6983      	ldr	r3, [r0, #24]
 80045de:	b90b      	cbnz	r3, 80045e4 <_vfiprintf_r+0x18>
 80045e0:	f7ff fce2 	bl	8003fa8 <__sinit>
 80045e4:	4b7c      	ldr	r3, [pc, #496]	; (80047d8 <_vfiprintf_r+0x20c>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d158      	bne.n	800469c <_vfiprintf_r+0xd0>
 80045ea:	6874      	ldr	r4, [r6, #4]
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	0718      	lsls	r0, r3, #28
 80045f0:	d55e      	bpl.n	80046b0 <_vfiprintf_r+0xe4>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05b      	beq.n	80046b0 <_vfiprintf_r+0xe4>
 80045f8:	2300      	movs	r3, #0
 80045fa:	9309      	str	r3, [sp, #36]	; 0x24
 80045fc:	2320      	movs	r3, #32
 80045fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004602:	2330      	movs	r3, #48	; 0x30
 8004604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004608:	9503      	str	r5, [sp, #12]
 800460a:	f04f 0b01 	mov.w	fp, #1
 800460e:	46b8      	mov	r8, r7
 8004610:	4645      	mov	r5, r8
 8004612:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004616:	b10b      	cbz	r3, 800461c <_vfiprintf_r+0x50>
 8004618:	2b25      	cmp	r3, #37	; 0x25
 800461a:	d154      	bne.n	80046c6 <_vfiprintf_r+0xfa>
 800461c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004620:	d00b      	beq.n	800463a <_vfiprintf_r+0x6e>
 8004622:	4653      	mov	r3, sl
 8004624:	463a      	mov	r2, r7
 8004626:	4621      	mov	r1, r4
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff ffbc 	bl	80045a6 <__sfputs_r>
 800462e:	3001      	adds	r0, #1
 8004630:	f000 80c2 	beq.w	80047b8 <_vfiprintf_r+0x1ec>
 8004634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004636:	4453      	add	r3, sl
 8004638:	9309      	str	r3, [sp, #36]	; 0x24
 800463a:	f898 3000 	ldrb.w	r3, [r8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80ba 	beq.w	80047b8 <_vfiprintf_r+0x1ec>
 8004644:	2300      	movs	r3, #0
 8004646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800464a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800464e:	9304      	str	r3, [sp, #16]
 8004650:	9307      	str	r3, [sp, #28]
 8004652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004656:	931a      	str	r3, [sp, #104]	; 0x68
 8004658:	46a8      	mov	r8, r5
 800465a:	2205      	movs	r2, #5
 800465c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004660:	485e      	ldr	r0, [pc, #376]	; (80047dc <_vfiprintf_r+0x210>)
 8004662:	f7fb fdc5 	bl	80001f0 <memchr>
 8004666:	9b04      	ldr	r3, [sp, #16]
 8004668:	bb78      	cbnz	r0, 80046ca <_vfiprintf_r+0xfe>
 800466a:	06d9      	lsls	r1, r3, #27
 800466c:	bf44      	itt	mi
 800466e:	2220      	movmi	r2, #32
 8004670:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004674:	071a      	lsls	r2, r3, #28
 8004676:	bf44      	itt	mi
 8004678:	222b      	movmi	r2, #43	; 0x2b
 800467a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800467e:	782a      	ldrb	r2, [r5, #0]
 8004680:	2a2a      	cmp	r2, #42	; 0x2a
 8004682:	d02a      	beq.n	80046da <_vfiprintf_r+0x10e>
 8004684:	9a07      	ldr	r2, [sp, #28]
 8004686:	46a8      	mov	r8, r5
 8004688:	2000      	movs	r0, #0
 800468a:	250a      	movs	r5, #10
 800468c:	4641      	mov	r1, r8
 800468e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004692:	3b30      	subs	r3, #48	; 0x30
 8004694:	2b09      	cmp	r3, #9
 8004696:	d969      	bls.n	800476c <_vfiprintf_r+0x1a0>
 8004698:	b360      	cbz	r0, 80046f4 <_vfiprintf_r+0x128>
 800469a:	e024      	b.n	80046e6 <_vfiprintf_r+0x11a>
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <_vfiprintf_r+0x214>)
 800469e:	429c      	cmp	r4, r3
 80046a0:	d101      	bne.n	80046a6 <_vfiprintf_r+0xda>
 80046a2:	68b4      	ldr	r4, [r6, #8]
 80046a4:	e7a2      	b.n	80045ec <_vfiprintf_r+0x20>
 80046a6:	4b4f      	ldr	r3, [pc, #316]	; (80047e4 <_vfiprintf_r+0x218>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	bf08      	it	eq
 80046ac:	68f4      	ldreq	r4, [r6, #12]
 80046ae:	e79d      	b.n	80045ec <_vfiprintf_r+0x20>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff fb1a 	bl	8003cec <__swsetup_r>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d09d      	beq.n	80045f8 <_vfiprintf_r+0x2c>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	b01d      	add	sp, #116	; 0x74
 80046c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c6:	46a8      	mov	r8, r5
 80046c8:	e7a2      	b.n	8004610 <_vfiprintf_r+0x44>
 80046ca:	4a44      	ldr	r2, [pc, #272]	; (80047dc <_vfiprintf_r+0x210>)
 80046cc:	1a80      	subs	r0, r0, r2
 80046ce:	fa0b f000 	lsl.w	r0, fp, r0
 80046d2:	4318      	orrs	r0, r3
 80046d4:	9004      	str	r0, [sp, #16]
 80046d6:	4645      	mov	r5, r8
 80046d8:	e7be      	b.n	8004658 <_vfiprintf_r+0x8c>
 80046da:	9a03      	ldr	r2, [sp, #12]
 80046dc:	1d11      	adds	r1, r2, #4
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	9103      	str	r1, [sp, #12]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	db01      	blt.n	80046ea <_vfiprintf_r+0x11e>
 80046e6:	9207      	str	r2, [sp, #28]
 80046e8:	e004      	b.n	80046f4 <_vfiprintf_r+0x128>
 80046ea:	4252      	negs	r2, r2
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	f898 3000 	ldrb.w	r3, [r8]
 80046f8:	2b2e      	cmp	r3, #46	; 0x2e
 80046fa:	d10e      	bne.n	800471a <_vfiprintf_r+0x14e>
 80046fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004700:	2b2a      	cmp	r3, #42	; 0x2a
 8004702:	d138      	bne.n	8004776 <_vfiprintf_r+0x1aa>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	9203      	str	r2, [sp, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfb8      	it	lt
 8004710:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004714:	f108 0802 	add.w	r8, r8, #2
 8004718:	9305      	str	r3, [sp, #20]
 800471a:	4d33      	ldr	r5, [pc, #204]	; (80047e8 <_vfiprintf_r+0x21c>)
 800471c:	f898 1000 	ldrb.w	r1, [r8]
 8004720:	2203      	movs	r2, #3
 8004722:	4628      	mov	r0, r5
 8004724:	f7fb fd64 	bl	80001f0 <memchr>
 8004728:	b140      	cbz	r0, 800473c <_vfiprintf_r+0x170>
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	1b40      	subs	r0, r0, r5
 800472e:	fa03 f000 	lsl.w	r0, r3, r0
 8004732:	9b04      	ldr	r3, [sp, #16]
 8004734:	4303      	orrs	r3, r0
 8004736:	f108 0801 	add.w	r8, r8, #1
 800473a:	9304      	str	r3, [sp, #16]
 800473c:	f898 1000 	ldrb.w	r1, [r8]
 8004740:	482a      	ldr	r0, [pc, #168]	; (80047ec <_vfiprintf_r+0x220>)
 8004742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004746:	2206      	movs	r2, #6
 8004748:	f108 0701 	add.w	r7, r8, #1
 800474c:	f7fb fd50 	bl	80001f0 <memchr>
 8004750:	2800      	cmp	r0, #0
 8004752:	d037      	beq.n	80047c4 <_vfiprintf_r+0x1f8>
 8004754:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <_vfiprintf_r+0x224>)
 8004756:	bb1b      	cbnz	r3, 80047a0 <_vfiprintf_r+0x1d4>
 8004758:	9b03      	ldr	r3, [sp, #12]
 800475a:	3307      	adds	r3, #7
 800475c:	f023 0307 	bic.w	r3, r3, #7
 8004760:	3308      	adds	r3, #8
 8004762:	9303      	str	r3, [sp, #12]
 8004764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004766:	444b      	add	r3, r9
 8004768:	9309      	str	r3, [sp, #36]	; 0x24
 800476a:	e750      	b.n	800460e <_vfiprintf_r+0x42>
 800476c:	fb05 3202 	mla	r2, r5, r2, r3
 8004770:	2001      	movs	r0, #1
 8004772:	4688      	mov	r8, r1
 8004774:	e78a      	b.n	800468c <_vfiprintf_r+0xc0>
 8004776:	2300      	movs	r3, #0
 8004778:	f108 0801 	add.w	r8, r8, #1
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	4619      	mov	r1, r3
 8004780:	250a      	movs	r5, #10
 8004782:	4640      	mov	r0, r8
 8004784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004788:	3a30      	subs	r2, #48	; 0x30
 800478a:	2a09      	cmp	r2, #9
 800478c:	d903      	bls.n	8004796 <_vfiprintf_r+0x1ca>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0c3      	beq.n	800471a <_vfiprintf_r+0x14e>
 8004792:	9105      	str	r1, [sp, #20]
 8004794:	e7c1      	b.n	800471a <_vfiprintf_r+0x14e>
 8004796:	fb05 2101 	mla	r1, r5, r1, r2
 800479a:	2301      	movs	r3, #1
 800479c:	4680      	mov	r8, r0
 800479e:	e7f0      	b.n	8004782 <_vfiprintf_r+0x1b6>
 80047a0:	ab03      	add	r3, sp, #12
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4622      	mov	r2, r4
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <_vfiprintf_r+0x228>)
 80047a8:	a904      	add	r1, sp, #16
 80047aa:	4630      	mov	r0, r6
 80047ac:	f3af 8000 	nop.w
 80047b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80047b4:	4681      	mov	r9, r0
 80047b6:	d1d5      	bne.n	8004764 <_vfiprintf_r+0x198>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	065b      	lsls	r3, r3, #25
 80047bc:	f53f af7e 	bmi.w	80046bc <_vfiprintf_r+0xf0>
 80047c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c2:	e77d      	b.n	80046c0 <_vfiprintf_r+0xf4>
 80047c4:	ab03      	add	r3, sp, #12
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4622      	mov	r2, r4
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <_vfiprintf_r+0x228>)
 80047cc:	a904      	add	r1, sp, #16
 80047ce:	4630      	mov	r0, r6
 80047d0:	f000 f888 	bl	80048e4 <_printf_i>
 80047d4:	e7ec      	b.n	80047b0 <_vfiprintf_r+0x1e4>
 80047d6:	bf00      	nop
 80047d8:	08005150 	.word	0x08005150
 80047dc:	08005190 	.word	0x08005190
 80047e0:	08005170 	.word	0x08005170
 80047e4:	08005130 	.word	0x08005130
 80047e8:	08005196 	.word	0x08005196
 80047ec:	0800519a 	.word	0x0800519a
 80047f0:	00000000 	.word	0x00000000
 80047f4:	080045a7 	.word	0x080045a7

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4691      	mov	r9, r2
 80047fe:	461f      	mov	r7, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004808:	4293      	cmp	r3, r2
 800480a:	bfb8      	it	lt
 800480c:	4613      	movlt	r3, r2
 800480e:	f8c9 3000 	str.w	r3, [r9]
 8004812:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004816:	4606      	mov	r6, r0
 8004818:	460c      	mov	r4, r1
 800481a:	b112      	cbz	r2, 8004822 <_printf_common+0x2a>
 800481c:	3301      	adds	r3, #1
 800481e:	f8c9 3000 	str.w	r3, [r9]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	0699      	lsls	r1, r3, #26
 8004826:	bf42      	ittt	mi
 8004828:	f8d9 3000 	ldrmi.w	r3, [r9]
 800482c:	3302      	addmi	r3, #2
 800482e:	f8c9 3000 	strmi.w	r3, [r9]
 8004832:	6825      	ldr	r5, [r4, #0]
 8004834:	f015 0506 	ands.w	r5, r5, #6
 8004838:	d107      	bne.n	800484a <_printf_common+0x52>
 800483a:	f104 0a19 	add.w	sl, r4, #25
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	f8d9 2000 	ldr.w	r2, [r9]
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	42ab      	cmp	r3, r5
 8004848:	dc28      	bgt.n	800489c <_printf_common+0xa4>
 800484a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	3300      	adds	r3, #0
 8004852:	bf18      	it	ne
 8004854:	2301      	movne	r3, #1
 8004856:	0692      	lsls	r2, r2, #26
 8004858:	d42d      	bmi.n	80048b6 <_printf_common+0xbe>
 800485a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800485e:	4639      	mov	r1, r7
 8004860:	4630      	mov	r0, r6
 8004862:	47c0      	blx	r8
 8004864:	3001      	adds	r0, #1
 8004866:	d020      	beq.n	80048aa <_printf_common+0xb2>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	68e5      	ldr	r5, [r4, #12]
 800486c:	f8d9 2000 	ldr.w	r2, [r9]
 8004870:	f003 0306 	and.w	r3, r3, #6
 8004874:	2b04      	cmp	r3, #4
 8004876:	bf08      	it	eq
 8004878:	1aad      	subeq	r5, r5, r2
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	6922      	ldr	r2, [r4, #16]
 800487e:	bf0c      	ite	eq
 8004880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004884:	2500      	movne	r5, #0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfc4      	itt	gt
 800488a:	1a9b      	subgt	r3, r3, r2
 800488c:	18ed      	addgt	r5, r5, r3
 800488e:	f04f 0900 	mov.w	r9, #0
 8004892:	341a      	adds	r4, #26
 8004894:	454d      	cmp	r5, r9
 8004896:	d11a      	bne.n	80048ce <_printf_common+0xd6>
 8004898:	2000      	movs	r0, #0
 800489a:	e008      	b.n	80048ae <_printf_common+0xb6>
 800489c:	2301      	movs	r3, #1
 800489e:	4652      	mov	r2, sl
 80048a0:	4639      	mov	r1, r7
 80048a2:	4630      	mov	r0, r6
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d103      	bne.n	80048b2 <_printf_common+0xba>
 80048aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b2:	3501      	adds	r5, #1
 80048b4:	e7c3      	b.n	800483e <_printf_common+0x46>
 80048b6:	18e1      	adds	r1, r4, r3
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	2030      	movs	r0, #48	; 0x30
 80048bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c0:	4422      	add	r2, r4
 80048c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ca:	3302      	adds	r3, #2
 80048cc:	e7c5      	b.n	800485a <_printf_common+0x62>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4622      	mov	r2, r4
 80048d2:	4639      	mov	r1, r7
 80048d4:	4630      	mov	r0, r6
 80048d6:	47c0      	blx	r8
 80048d8:	3001      	adds	r0, #1
 80048da:	d0e6      	beq.n	80048aa <_printf_common+0xb2>
 80048dc:	f109 0901 	add.w	r9, r9, #1
 80048e0:	e7d8      	b.n	8004894 <_printf_common+0x9c>
	...

080048e4 <_printf_i>:
 80048e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048ec:	460c      	mov	r4, r1
 80048ee:	7e09      	ldrb	r1, [r1, #24]
 80048f0:	b085      	sub	sp, #20
 80048f2:	296e      	cmp	r1, #110	; 0x6e
 80048f4:	4617      	mov	r7, r2
 80048f6:	4606      	mov	r6, r0
 80048f8:	4698      	mov	r8, r3
 80048fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048fc:	f000 80b3 	beq.w	8004a66 <_printf_i+0x182>
 8004900:	d822      	bhi.n	8004948 <_printf_i+0x64>
 8004902:	2963      	cmp	r1, #99	; 0x63
 8004904:	d036      	beq.n	8004974 <_printf_i+0x90>
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x3a>
 8004908:	2900      	cmp	r1, #0
 800490a:	f000 80b9 	beq.w	8004a80 <_printf_i+0x19c>
 800490e:	2958      	cmp	r1, #88	; 0x58
 8004910:	f000 8083 	beq.w	8004a1a <_printf_i+0x136>
 8004914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004918:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800491c:	e032      	b.n	8004984 <_printf_i+0xa0>
 800491e:	2964      	cmp	r1, #100	; 0x64
 8004920:	d001      	beq.n	8004926 <_printf_i+0x42>
 8004922:	2969      	cmp	r1, #105	; 0x69
 8004924:	d1f6      	bne.n	8004914 <_printf_i+0x30>
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	6813      	ldr	r3, [r2, #0]
 800492a:	0605      	lsls	r5, r0, #24
 800492c:	f103 0104 	add.w	r1, r3, #4
 8004930:	d52a      	bpl.n	8004988 <_printf_i+0xa4>
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	da03      	bge.n	8004942 <_printf_i+0x5e>
 800493a:	222d      	movs	r2, #45	; 0x2d
 800493c:	425b      	negs	r3, r3
 800493e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004942:	486f      	ldr	r0, [pc, #444]	; (8004b00 <_printf_i+0x21c>)
 8004944:	220a      	movs	r2, #10
 8004946:	e039      	b.n	80049bc <_printf_i+0xd8>
 8004948:	2973      	cmp	r1, #115	; 0x73
 800494a:	f000 809d 	beq.w	8004a88 <_printf_i+0x1a4>
 800494e:	d808      	bhi.n	8004962 <_printf_i+0x7e>
 8004950:	296f      	cmp	r1, #111	; 0x6f
 8004952:	d020      	beq.n	8004996 <_printf_i+0xb2>
 8004954:	2970      	cmp	r1, #112	; 0x70
 8004956:	d1dd      	bne.n	8004914 <_printf_i+0x30>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	e003      	b.n	800496a <_printf_i+0x86>
 8004962:	2975      	cmp	r1, #117	; 0x75
 8004964:	d017      	beq.n	8004996 <_printf_i+0xb2>
 8004966:	2978      	cmp	r1, #120	; 0x78
 8004968:	d1d4      	bne.n	8004914 <_printf_i+0x30>
 800496a:	2378      	movs	r3, #120	; 0x78
 800496c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004970:	4864      	ldr	r0, [pc, #400]	; (8004b04 <_printf_i+0x220>)
 8004972:	e055      	b.n	8004a20 <_printf_i+0x13c>
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	1d19      	adds	r1, r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6011      	str	r1, [r2, #0]
 800497c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004984:	2301      	movs	r3, #1
 8004986:	e08c      	b.n	8004aa2 <_printf_i+0x1be>
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6011      	str	r1, [r2, #0]
 800498c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004990:	bf18      	it	ne
 8004992:	b21b      	sxthne	r3, r3
 8004994:	e7cf      	b.n	8004936 <_printf_i+0x52>
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	6825      	ldr	r5, [r4, #0]
 800499a:	1d18      	adds	r0, r3, #4
 800499c:	6010      	str	r0, [r2, #0]
 800499e:	0628      	lsls	r0, r5, #24
 80049a0:	d501      	bpl.n	80049a6 <_printf_i+0xc2>
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	e002      	b.n	80049ac <_printf_i+0xc8>
 80049a6:	0668      	lsls	r0, r5, #25
 80049a8:	d5fb      	bpl.n	80049a2 <_printf_i+0xbe>
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	4854      	ldr	r0, [pc, #336]	; (8004b00 <_printf_i+0x21c>)
 80049ae:	296f      	cmp	r1, #111	; 0x6f
 80049b0:	bf14      	ite	ne
 80049b2:	220a      	movne	r2, #10
 80049b4:	2208      	moveq	r2, #8
 80049b6:	2100      	movs	r1, #0
 80049b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049bc:	6865      	ldr	r5, [r4, #4]
 80049be:	60a5      	str	r5, [r4, #8]
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	f2c0 8095 	blt.w	8004af0 <_printf_i+0x20c>
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	f021 0104 	bic.w	r1, r1, #4
 80049cc:	6021      	str	r1, [r4, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d13d      	bne.n	8004a4e <_printf_i+0x16a>
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	f040 808e 	bne.w	8004af4 <_printf_i+0x210>
 80049d8:	4665      	mov	r5, ip
 80049da:	2a08      	cmp	r2, #8
 80049dc:	d10b      	bne.n	80049f6 <_printf_i+0x112>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07db      	lsls	r3, r3, #31
 80049e2:	d508      	bpl.n	80049f6 <_printf_i+0x112>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	6862      	ldr	r2, [r4, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bfde      	ittt	le
 80049ec:	2330      	movle	r3, #48	; 0x30
 80049ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049f6:	ebac 0305 	sub.w	r3, ip, r5
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	f8cd 8000 	str.w	r8, [sp]
 8004a00:	463b      	mov	r3, r7
 8004a02:	aa03      	add	r2, sp, #12
 8004a04:	4621      	mov	r1, r4
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff fef6 	bl	80047f8 <_printf_common>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d14d      	bne.n	8004aac <_printf_i+0x1c8>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a14:	b005      	add	sp, #20
 8004a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	4839      	ldr	r0, [pc, #228]	; (8004b00 <_printf_i+0x21c>)
 8004a1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	1d1d      	adds	r5, r3, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6015      	str	r5, [r2, #0]
 8004a2a:	060a      	lsls	r2, r1, #24
 8004a2c:	d50b      	bpl.n	8004a46 <_printf_i+0x162>
 8004a2e:	07ca      	lsls	r2, r1, #31
 8004a30:	bf44      	itt	mi
 8004a32:	f041 0120 	orrmi.w	r1, r1, #32
 8004a36:	6021      	strmi	r1, [r4, #0]
 8004a38:	b91b      	cbnz	r3, 8004a42 <_printf_i+0x15e>
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	f022 0220 	bic.w	r2, r2, #32
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	2210      	movs	r2, #16
 8004a44:	e7b7      	b.n	80049b6 <_printf_i+0xd2>
 8004a46:	064d      	lsls	r5, r1, #25
 8004a48:	bf48      	it	mi
 8004a4a:	b29b      	uxthmi	r3, r3
 8004a4c:	e7ef      	b.n	8004a2e <_printf_i+0x14a>
 8004a4e:	4665      	mov	r5, ip
 8004a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a54:	fb02 3311 	mls	r3, r2, r1, r3
 8004a58:	5cc3      	ldrb	r3, [r0, r3]
 8004a5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a5e:	460b      	mov	r3, r1
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d1f5      	bne.n	8004a50 <_printf_i+0x16c>
 8004a64:	e7b9      	b.n	80049da <_printf_i+0xf6>
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	6961      	ldr	r1, [r4, #20]
 8004a6c:	1d18      	adds	r0, r3, #4
 8004a6e:	6010      	str	r0, [r2, #0]
 8004a70:	0628      	lsls	r0, r5, #24
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	d501      	bpl.n	8004a7a <_printf_i+0x196>
 8004a76:	6019      	str	r1, [r3, #0]
 8004a78:	e002      	b.n	8004a80 <_printf_i+0x19c>
 8004a7a:	066a      	lsls	r2, r5, #25
 8004a7c:	d5fb      	bpl.n	8004a76 <_printf_i+0x192>
 8004a7e:	8019      	strh	r1, [r3, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	4665      	mov	r5, ip
 8004a86:	e7b9      	b.n	80049fc <_printf_i+0x118>
 8004a88:	6813      	ldr	r3, [r2, #0]
 8004a8a:	1d19      	adds	r1, r3, #4
 8004a8c:	6011      	str	r1, [r2, #0]
 8004a8e:	681d      	ldr	r5, [r3, #0]
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	2100      	movs	r1, #0
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7fb fbab 	bl	80001f0 <memchr>
 8004a9a:	b108      	cbz	r0, 8004aa0 <_printf_i+0x1bc>
 8004a9c:	1b40      	subs	r0, r0, r5
 8004a9e:	6060      	str	r0, [r4, #4]
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	e7a7      	b.n	80049fc <_printf_i+0x118>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	462a      	mov	r2, r5
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0aa      	beq.n	8004a10 <_printf_i+0x12c>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	079b      	lsls	r3, r3, #30
 8004abe:	d413      	bmi.n	8004ae8 <_printf_i+0x204>
 8004ac0:	68e0      	ldr	r0, [r4, #12]
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	bfb8      	it	lt
 8004ac8:	4618      	movlt	r0, r3
 8004aca:	e7a3      	b.n	8004a14 <_printf_i+0x130>
 8004acc:	2301      	movs	r3, #1
 8004ace:	464a      	mov	r2, r9
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	47c0      	blx	r8
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d09a      	beq.n	8004a10 <_printf_i+0x12c>
 8004ada:	3501      	adds	r5, #1
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	9a03      	ldr	r2, [sp, #12]
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dcf2      	bgt.n	8004acc <_printf_i+0x1e8>
 8004ae6:	e7eb      	b.n	8004ac0 <_printf_i+0x1dc>
 8004ae8:	2500      	movs	r5, #0
 8004aea:	f104 0919 	add.w	r9, r4, #25
 8004aee:	e7f5      	b.n	8004adc <_printf_i+0x1f8>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ac      	bne.n	8004a4e <_printf_i+0x16a>
 8004af4:	7803      	ldrb	r3, [r0, #0]
 8004af6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004afa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004afe:	e76c      	b.n	80049da <_printf_i+0xf6>
 8004b00:	080051a1 	.word	0x080051a1
 8004b04:	080051b2 	.word	0x080051b2

08004b08 <_sbrk_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4c06      	ldr	r4, [pc, #24]	; (8004b24 <_sbrk_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4605      	mov	r5, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	f7fe ff42 	bl	800399c <_sbrk>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_sbrk_r+0x1a>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_sbrk_r+0x1a>
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	20000228 	.word	0x20000228

08004b28 <__sread>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b30:	f000 f8d6 	bl	8004ce0 <_read_r>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	bfab      	itete	ge
 8004b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b3c:	181b      	addge	r3, r3, r0
 8004b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b42:	bfac      	ite	ge
 8004b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b46:	81a3      	strhlt	r3, [r4, #12]
 8004b48:	bd10      	pop	{r4, pc}

08004b4a <__swrite>:
 8004b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4e:	461f      	mov	r7, r3
 8004b50:	898b      	ldrh	r3, [r1, #12]
 8004b52:	05db      	lsls	r3, r3, #23
 8004b54:	4605      	mov	r5, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	4616      	mov	r6, r2
 8004b5a:	d505      	bpl.n	8004b68 <__swrite+0x1e>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b64:	f000 f868 	bl	8004c38 <_lseek_r>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	4632      	mov	r2, r6
 8004b76:	463b      	mov	r3, r7
 8004b78:	4628      	mov	r0, r5
 8004b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7e:	f000 b817 	b.w	8004bb0 <_write_r>

08004b82 <__sseek>:
 8004b82:	b510      	push	{r4, lr}
 8004b84:	460c      	mov	r4, r1
 8004b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8a:	f000 f855 	bl	8004c38 <_lseek_r>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	bf15      	itete	ne
 8004b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b9e:	81a3      	strheq	r3, [r4, #12]
 8004ba0:	bf18      	it	ne
 8004ba2:	81a3      	strhne	r3, [r4, #12]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__sclose>:
 8004ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004baa:	f000 b813 	b.w	8004bd4 <_close_r>
	...

08004bb0 <_write_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4c07      	ldr	r4, [pc, #28]	; (8004bd0 <_write_r+0x20>)
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fe fe9b 	bl	80038fa <_write>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_write_r+0x1e>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_write_r+0x1e>
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000228 	.word	0x20000228

08004bd4 <_close_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4c06      	ldr	r4, [pc, #24]	; (8004bf0 <_close_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4605      	mov	r5, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	f7fe fea7 	bl	8003932 <_close>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_close_r+0x1a>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_close_r+0x1a>
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	20000228 	.word	0x20000228

08004bf4 <_fstat_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4c07      	ldr	r4, [pc, #28]	; (8004c14 <_fstat_r+0x20>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	f7fe fea2 	bl	800394a <_fstat>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d102      	bne.n	8004c10 <_fstat_r+0x1c>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	b103      	cbz	r3, 8004c10 <_fstat_r+0x1c>
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	20000228 	.word	0x20000228

08004c18 <_isatty_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4c06      	ldr	r4, [pc, #24]	; (8004c34 <_isatty_r+0x1c>)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	f7fe fea1 	bl	800396a <_isatty>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_isatty_r+0x1a>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_isatty_r+0x1a>
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	20000228 	.word	0x20000228

08004c38 <_lseek_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4c07      	ldr	r4, [pc, #28]	; (8004c58 <_lseek_r+0x20>)
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	4608      	mov	r0, r1
 8004c40:	4611      	mov	r1, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	6022      	str	r2, [r4, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fe fe9a 	bl	8003980 <_lseek>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_lseek_r+0x1e>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_lseek_r+0x1e>
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000228 	.word	0x20000228

08004c5c <memmove>:
 8004c5c:	4288      	cmp	r0, r1
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	eb01 0302 	add.w	r3, r1, r2
 8004c64:	d807      	bhi.n	8004c76 <memmove+0x1a>
 8004c66:	1e42      	subs	r2, r0, #1
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d00a      	beq.n	8004c82 <memmove+0x26>
 8004c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c74:	e7f8      	b.n	8004c68 <memmove+0xc>
 8004c76:	4283      	cmp	r3, r0
 8004c78:	d9f5      	bls.n	8004c66 <memmove+0xa>
 8004c7a:	1881      	adds	r1, r0, r2
 8004c7c:	1ad2      	subs	r2, r2, r3
 8004c7e:	42d3      	cmn	r3, r2
 8004c80:	d100      	bne.n	8004c84 <memmove+0x28>
 8004c82:	bd10      	pop	{r4, pc}
 8004c84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c8c:	e7f7      	b.n	8004c7e <memmove+0x22>

08004c8e <__malloc_lock>:
 8004c8e:	4770      	bx	lr

08004c90 <__malloc_unlock>:
 8004c90:	4770      	bx	lr

08004c92 <_realloc_r>:
 8004c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c94:	4607      	mov	r7, r0
 8004c96:	4614      	mov	r4, r2
 8004c98:	460e      	mov	r6, r1
 8004c9a:	b921      	cbnz	r1, 8004ca6 <_realloc_r+0x14>
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ca2:	f7ff babd 	b.w	8004220 <_malloc_r>
 8004ca6:	b922      	cbnz	r2, 8004cb2 <_realloc_r+0x20>
 8004ca8:	f7ff fa6c 	bl	8004184 <_free_r>
 8004cac:	4625      	mov	r5, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb2:	f000 f827 	bl	8004d04 <_malloc_usable_size_r>
 8004cb6:	42a0      	cmp	r0, r4
 8004cb8:	d20f      	bcs.n	8004cda <_realloc_r+0x48>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f7ff faaf 	bl	8004220 <_malloc_r>
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d0f2      	beq.n	8004cae <_realloc_r+0x1c>
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4622      	mov	r2, r4
 8004ccc:	f7fe ff04 	bl	8003ad8 <memcpy>
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f7ff fa56 	bl	8004184 <_free_r>
 8004cd8:	e7e9      	b.n	8004cae <_realloc_r+0x1c>
 8004cda:	4635      	mov	r5, r6
 8004cdc:	e7e7      	b.n	8004cae <_realloc_r+0x1c>
	...

08004ce0 <_read_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4c07      	ldr	r4, [pc, #28]	; (8004d00 <_read_r+0x20>)
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	6022      	str	r2, [r4, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fe fde6 	bl	80038c0 <_read>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_read_r+0x1e>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_read_r+0x1e>
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000228 	.word	0x20000228

08004d04 <_malloc_usable_size_r>:
 8004d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d08:	1f18      	subs	r0, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bfbc      	itt	lt
 8004d0e:	580b      	ldrlt	r3, [r1, r0]
 8004d10:	18c0      	addlt	r0, r0, r3
 8004d12:	4770      	bx	lr

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
