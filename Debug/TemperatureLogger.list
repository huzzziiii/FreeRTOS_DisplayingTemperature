
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003544  08003544  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800354c  0800354c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  080035c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080035c8  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eb4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c56  00000000  00000000  00029f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  0002c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c8b  00000000  00000000  0002c780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008eea  00000000  00000000  0004340b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086de1  00000000  00000000  0004c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d30d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a30  00000000  00000000  000d3154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003460 	.word	0x08003460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003460 	.word	0x08003460

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <DMA_InterruptHandler>:

/*
 * @brief: interrupt handler for DMA
 */
void DMA_InterruptHandler(DMA_Handle_t *dmaHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* half transfer interrupt handling */
	if (dmaHandle->DMA_Stream->CR & DMA_IT_HT)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d010      	beq.n	80005e8 <DMA_InterruptHandler+0x38>
	{
		// disable interrupts
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_HT);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f022 0208 	bic.w	r2, r2, #8
 80005d4:	601a      	str	r2, [r3, #0]

		// invoke calback for processing
		if (dmaHandle->HalfXferCplCallback != NULL)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d033      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		{
			dmaHandle->HalfXferCplCallback(dmaHandle);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	4798      	blx	r3
		if (dmaHandle->XferErrorCallback != NULL)
		{
			dmaHandle->XferErrorCallback(dmaHandle);
		}
	}
}
 80005e6:	e02e      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TC)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <DMA_InterruptHandler+0x68>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TC);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f022 0210 	bic.w	r2, r2, #16
 8000604:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferCplCallback != NULL)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01b      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferCplCallback(dmaHandle);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	4798      	blx	r3
}
 8000616:	e016      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00f      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TE);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f022 0204 	bic.w	r2, r2, #4
 8000634:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferErrorCallback != NULL)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferErrorCallback(dmaHandle);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	4798      	blx	r3
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <I2C_PeripheralClkControl>:
/* Function definitions -----------------------------------------------------*/

/*
 * @I2C_PeripheralClkControl: Enables the peripheral clock for a respective I2C interface
 */
void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <I2C_PeripheralClkControl+0x54>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 800066c:	e014      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <I2C_PeripheralClkControl+0x5c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000682:	e009      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <I2C_PeripheralClkControl+0x60>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d105      	bne.n	8000698 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40005400 	.word	0x40005400
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40005800 	.word	0x40005800
 80006b0:	40005c00 	.word	0x40005c00

080006b4 <I2C_Init>:

/*
 * @I2C_Init: Populates I2C struct
 */
void I2C_Init(I2C_Handle_t *I2C_handle) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

	// initializing static pointer
	I2C_handle_p = I2C_handle;
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <I2C_Init+0xe4>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffc2 	bl	8000650 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4619      	mov	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000706:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <I2C_Init+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <I2C_Init+0xec>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	0c9b      	lsrs	r3, r3, #18
 8000714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000718:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6859      	ldr	r1, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	430a      	orrs	r2, r1
 8000728:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <I2C_Init+0xf0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d10f      	bne.n	8000754 <I2C_Init+0xa0>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <I2C_Init+0xe8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	69d9      	ldr	r1, [r3, #28]
 800074a:	897a      	ldrh	r2, [r7, #10]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <I2C_Init+0xf0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d80f      	bhi.n	800077e <I2C_Init+0xca>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a19      	ldr	r1, [r3, #32]
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <I2C_Init+0xe8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <I2C_Init+0xec>)
 800076a:	fba2 2303 	umull	r2, r3, r2, r3
 800076e:	0c9b      	lsrs	r3, r3, #18
 8000770:	3301      	adds	r3, #1
 8000772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000090 	.word	0x20000090
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	431bde83 	.word	0x431bde83
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	887b      	ldrh	r3, [r7, #2]
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <GetFlagStatus+0x1e>
	}
	return FLAG_NOT_SET;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <I2C_WaitForCompletion>:

static void I2C_WaitForCompletion(I2C_TypeDef *pI2Cx, uint16_t i2cRegister)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
	while (!GetFlagStatus(pI2Cx, i2cRegister) && WaitTillTimeout(5));
 800081e:	bf00      	nop
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffbf 	bl	80007a8 <GetFlagStatus>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d105      	bne.n	800083c <I2C_WaitForCompletion+0x2a>
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fb9f 	bl	8000f74 <WaitTillTimeout>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f1      	bne.n	8000820 <I2C_WaitForCompletion+0xe>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <I2C_WriteSlaveAddress>:

/*
 * @I2C_WriteSlaveAddress: Writes slave address to DR
 */
static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <I2C_WriteSlaveAddress+0x28>
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	e003      	b.n	8000874 <I2C_WriteSlaveAddress+0x30>
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	611a      	str	r2, [r3, #16]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <I2C_ClearADDRFlag>:

/*
 * @I2C_ClearADDRFlag: Reads SR1 and SR2 registers to clear ADDR flag
 * During RXing: when 2 bytes are to be read, reset the ACK and set the POS bit
 */
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7b1b      	ldrb	r3, [r3, #12]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b02      	cmp	r3, #2
 800089e:	d113      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
	{
		if (I2C_handle_p->rxBufferLength == 2)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7edb      	ldrb	r3, [r3, #27]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d10d      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
		{
			I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f813 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008c6:	601a      	str	r2, [r3, #0]
		}
	}

	dummyRead = pI2Cx->SR1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	60fb      	str	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000090 	.word	0x20000090

080008e0 <I2C_ControlAcking>:

/*
 * @I2C_ControlAcking: enables/disables the ACK bit for I2C
 */
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	if (enable)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008fe:	e005      	b.n	800090c <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_I2C_StartInterrupt>:
/*
 * @HAL_I2C_StartInterrupt: Generates the START condition and enables I2C control bits
 * usage: called to "enable" I2C transaction via interrupts
 */
I2C_State HAL_I2C_StartInterrupt(I2C_State expectedState, uint8_t txSize, uint8_t rxSize)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	char *command = expectedState == I2C_TX_BUSY ? "TXing...\n" : "RXing...\n";
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d101      	bne.n	8000934 <HAL_I2C_StartInterrupt+0x1c>
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_I2C_StartInterrupt+0x64>)
 8000932:	e000      	b.n	8000936 <HAL_I2C_StartInterrupt+0x1e>
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_I2C_StartInterrupt+0x68>)
 8000936:	60fb      	str	r3, [r7, #12]

	if (I2C_handle_p->I2C_State == I2C_INIT)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d112      	bne.n	800096a <HAL_I2C_StartInterrupt+0x52>
	{
		// set transaction state
		I2C_handle_p->I2C_State = expectedState;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	731a      	strb	r2, [r3, #12]

		// set respective buffer sizes
		I2C_handle_p->txBufferLength = txSize;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	769a      	strb	r2, [r3, #26]
		I2C_handle_p->rxBufferLength = rxSize;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	797a      	ldrb	r2, [r7, #5]
 800095a:	76da      	strb	r2, [r3, #27]

		// generate start condition
		I2C_GenerateStartCondition(I2C_handle_p);
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff36 	bl	80007d2 <I2C_GenerateStartCondition>

		// enable i2c control bits
		I2C_SetCtrlBits();
 8000966:	f000 fae7 	bl	8000f38 <I2C_SetCtrlBits>
	}
	return I2C_handle_p->I2C_State;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	b2db      	uxtb	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08003478 	.word	0x08003478
 8000980:	08003484 	.word	0x08003484
 8000984:	20000090 	.word	0x20000090

08000988 <I2C1_EV_IRQHandler>:

/*
 * I2C1_EV_IRQHandler: Interrupt handler for I2C
 */
void I2C1_EV_IRQHandler (void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 800098e:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	0a9b      	lsrs	r3, r3, #10
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;			// stores register values

	if (eventInterrupt)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80c1 	beq.w	8000b3c <I2C1_EV_IRQHandler+0x1b4>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	717b      	strb	r3, [r7, #5]
		if (temp)
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d018      	beq.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	7b1b      	ldrb	r3, [r3, #12]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d106      	bne.n	80009ea <I2C1_EV_IRQHandler+0x62>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 80009dc:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff2e 	bl	8000844 <I2C_WriteSlaveAddress>
 80009e8:	e00b      	b.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	7b1b      	ldrb	r3, [r3, #12]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d105      	bne.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff21 	bl	8000844 <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 8000a02:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	085b      	lsrs	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a14:	797b      	ldrb	r3, [r7, #5]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <I2C1_EV_IRQHandler+0x9e>
		{
			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff33 	bl	800088c <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	09db      	lsrs	r3, r3, #7
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	7b1b      	ldrb	r3, [r3, #12]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d101      	bne.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
			{
				I2C_TXE_Interrupt();
 8000a50:	f000 f8f8 	bl	8000c44 <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000a66:	797b      	ldrb	r3, [r7, #5]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d058      	beq.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)					// TXE=1, BTF=1
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d10d      	bne.n	8000ab2 <I2C1_EV_IRQHandler+0x12a>
			{
				if (!I2C_handle_p->txBufferLength)						// if there are no more TX bytes to be sent
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7e9b      	ldrb	r3, [r3, #26]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14c      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				{
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fea3 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_StopTransmission();
 8000aac:	f000 fa24 	bl	8000ef8 <I2C_StopTransmission>
					I2C_StopTransmission();
				}
			}
		}
	}
}
 8000ab0:	e044      	b.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d13e      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				if (I2C_handle_p->rxBufferLength == 2)
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	7edb      	ldrb	r3, [r3, #27]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d138      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe8f 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read second last byte
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6918      	ldr	r0, [r3, #16]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6959      	ldr	r1, [r3, #20]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	7e1a      	ldrb	r2, [r3, #24]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	1c54      	adds	r4, r2, #1
 8000aec:	b2e4      	uxtb	r4, r4
 8000aee:	761c      	strb	r4, [r3, #24]
 8000af0:	4613      	mov	r3, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	b2c2      	uxtb	r2, r0
 8000af6:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	7eda      	ldrb	r2, [r3, #27]
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	3a01      	subs	r2, #1
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read last byte
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6918      	ldr	r0, [r3, #16]
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6959      	ldr	r1, [r3, #20]
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	7e1a      	ldrb	r2, [r3, #24]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	1c54      	adds	r4, r2, #1
 8000b1e:	b2e4      	uxtb	r4, r4
 8000b20:	761c      	strb	r4, [r3, #24]
 8000b22:	4613      	mov	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	b2c2      	uxtb	r2, r0
 8000b28:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	7eda      	ldrb	r2, [r3, #27]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	3a01      	subs	r2, #1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8000b38:	f000 f9de 	bl	8000ef8 <I2C_StopTransmission>
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000090 	.word	0x20000090

08000b48 <I2C_HandleInterruptEvents>:

/*
 * @I2C_HandleInterruptEvents: Called upon getting an error interrupt - resets the bit and generate stop condition
 */
void I2C_HandleInterruptEvents (uint16_t errorRegister, I2C_ErrorEvents errorEvent)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	717b      	strb	r3, [r7, #5]
	I2C_handle_p->pI2Cx->SR1 &= ~(errorRegister);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	88f9      	ldrh	r1, [r7, #6]
 8000b62:	43c9      	mvns	r1, r1
 8000b64:	400a      	ands	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]

	if (errorEvent == I2C_ERROR_AF)
 8000b68:	797b      	ldrb	r3, [r7, #5]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <I2C_HandleInterruptEvents+0x34>
	{
//		printf ("Received ACK failure...\n");
		I2C_StopTransmission();
 8000b6e:	f000 f9c3 	bl	8000ef8 <I2C_StopTransmission>
		I2C_GenerateStopCondition(I2C_handle_p);
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe3b 	bl	80007f2 <I2C_GenerateStopCondition>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000090 	.word	0x20000090

08000b88 <I2C1_ER_IRQHandler>:

/*
 * @I2C1_ER_IRQHandler: Interrupt handler for I2C errors
 */
void I2C1_ER_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
//	printf ("ERROR IRQ handler...\n");
	I2C_handle_p->I2C_State = I2C_ERROR;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2204      	movs	r2, #4
 8000b94:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
	if (errorInterrupt)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d044      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
	{
		if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF)
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <I2C1_ER_IRQHandler+0x42>
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_AF);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bc4:	f7ff ffc0 	bl	8000b48 <I2C_HandleInterruptEvents>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
		}
	}
}
 8000bc8:	e036      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_OVR)
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <I2C1_ER_IRQHandler+0x5e>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_OVR);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000be0:	f7ff ffb2 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000be4:	e028      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_PECERR)
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <I2C1_ER_IRQHandler+0x7a>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_PECERR);
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bfc:	f7ff ffa4 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c00:	e01a      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TIMEOUT)
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <I2C1_ER_IRQHandler+0x96>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_TIMEOUT);
 8000c12:	2103      	movs	r1, #3
 8000c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c18:	f7ff ff96 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c1c:	e00c      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c34:	f7ff ff88 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000090 	.word	0x20000090

08000c44 <I2C_TXE_Interrupt>:
/*
 * @I2C_TXE_Interrupt: Writes the respective byte to the DR
 * data register = empty = TXE
 */
void I2C_TXE_Interrupt (void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	7e9b      	ldrb	r3, [r3, #26]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d011      	beq.n	8000c78 <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	1c51      	adds	r1, r2, #1
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	7019      	strb	r1, [r3, #0]
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	7e9a      	ldrb	r2, [r3, #26]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	3a01      	subs	r2, #1
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	769a      	strb	r2, [r3, #26]
	}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000090 	.word	0x20000090

08000c88 <HAL_I2C_Master_Transmit>:

/*
 * HAL_I2C_Master_Transmit: polling approach for TXing bytes to the slave
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fd9b 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdb5 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fdca 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdab 	bl	8000812 <I2C_WaitForCompletion>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fde3 	bl	800088c <I2C_ClearADDRFlag>

	// write to the SDA line
	for (; size > 0; size--)
 8000cc6:	e015      	b.n	8000cf4 <HAL_I2C_Master_Transmit+0x6c>
	{
		// making sure data register is empty prior to writing to it
		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_TXE);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd9f 	bl	8000812 <I2C_WaitForCompletion>

		I2C_handle->pI2Cx->DR = *data++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	611a      	str	r2, [r3, #16]

		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd92 	bl	8000812 <I2C_WaitForCompletion>
	for (; size > 0; size--)
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <HAL_I2C_Master_Transmit+0x40>
	}
	I2C_GenerateStopCondition(I2C_handle);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fd79 	bl	80007f2 <I2C_GenerateStopCondition>

	return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_I2C_Master_Receive>:

/*
 * @HAL_I2C_Master_Receive: Polling approach for RXing bytes from slave
 */
void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size, uint8_t startIndex)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	4611      	mov	r1, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	460b      	mov	r3, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fd56 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd70 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000d32:	2101      	movs	r1, #1
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fd85 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd66 	bl	8000812 <I2C_WaitForCompletion>

	switch (size) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <HAL_I2C_Master_Receive+0x48>
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d00f      	beq.n	8000d70 <HAL_I2C_Master_Receive+0x66>
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Master_Receive+0x8e>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fdc1 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd92 	bl	800088c <I2C_ClearADDRFlag>
			I2C_GenerateStopCondition(I2C_handle);			// generate STOP condition
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fd42 	bl	80007f2 <I2C_GenerateStopCondition>
			break;
 8000d6e:	e01e      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdb2 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d8a:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd7b 	bl	800088c <I2C_ClearADDRFlag>
			break;
 8000d96:	e00a      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd9e 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd6f 	bl	800088c <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 8000dae:	e09b      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
		if (size <= 3) {
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	f200 8086 	bhi.w	8000ec4 <HAL_I2C_Master_Receive+0x1ba>
			if (size == 1) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d11f      	bne.n	8000dfe <HAL_I2C_Master_Receive+0xf4>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd8b 	bl	80008e0 <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd5c 	bl	800088c <I2C_ClearADDRFlag>

					// wait till RXNE = 1 (Data is sent from SR to DR)
					I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd19 	bl	8000812 <I2C_WaitForCompletion>

					// generate stop
					I2C_GenerateStopCondition(I2C_handle);
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fd06 	bl	80007f2 <I2C_GenerateStopCondition>

					// read data
					rxBuffer[startIndex++] = I2C_handle->pI2Cx->DR;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	1c59      	adds	r1, r3, #1
 8000df0:	71b9      	strb	r1, [r7, #6]
 8000df2:	4619      	mov	r1, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	440b      	add	r3, r1
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e074      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>

			}

			else if (size == 2) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d122      	bne.n	8000e4a <HAL_I2C_Master_Receive+0x140>
				// wait till BTF is set (last byte is received) - shift reg=1, DR=1
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd01 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fcee 	bl	80007f2 <I2C_GenerateStopCondition>

//				I2C_handle->pRxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
				rxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	71b9      	strb	r1, [r7, #6]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	440b      	add	r3, r1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
				--size;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]

				rxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6919      	ldr	r1, [r3, #16]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
//				I2C_handle->pRxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
				--size;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	e04e      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}
			else if (size == 3) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d14b      	bne.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
				// wait for the second last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fcdb 	bl	8000812 <I2C_WaitForCompletion>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd3c 	bl	80008e0 <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]

				size--;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]

				// wait for the last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2104      	movs	r1, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcc3 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff fcb0 	bl	80007f2 <I2C_GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]

				size--;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]

				size--;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e011      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}

		}
		// > 3 bytes
		else {
			I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fca1 	bl	8000812 <I2C_WaitForCompletion>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]

			size--;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f af60 	bne.w	8000db0 <HAL_I2C_Master_Receive+0xa6>

		}
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C_StopTransmission>:

/*
 * @I2C_StopTransmission: Disables I2C control bits and sets I2C struct to initial values
 */
static void I2C_StopTransmission(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
//	printf ("Stopping transmission...\n\n");

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f08:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f16:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	731a      	strb	r2, [r3, #12]
//	I2C_handle_p->rxBufferLength = BYTES_PER_TRANSACTION;

	I2C_handle_p->rxStartIndex = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
//	I2C_handle_p->txBufferLength = I2C
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000090 	.word	0x20000090

08000f38 <I2C_SetCtrlBits>:

/*
 * @I2C_SetCtrlBits: Sets I2C control bits
 */
static void I2C_SetCtrlBits(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f48:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f56:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITERREN;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f64:	605a      	str	r2, [r3, #4]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000090 	.word	0x20000090

08000f74 <WaitTillTimeout>:

HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 8000f7e:	f000 f877 	bl	8001070 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 8000f86:	bf00      	nop
 8000f88:	f000 f872 	bl	8001070 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f7      	bcc.n	8000f88 <WaitTillTimeout+0x14>
	return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f94d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f001 fbda 	bl	8002790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f965 	bl	80012d6 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f000 f92d 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000004 	.word	0x20000004
 8001044:	20000000 	.word	0x20000000

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000004 	.word	0x20000004
 800106c:	200000b8 	.word	0x200000b8

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000b8 	.word	0x200000b8

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_Delay+0x40>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000004 	.word	0x20000004

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e159      	b.n	80015c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8148 	bne.w	80015ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d00b      	beq.n	800134a <HAL_GPIO_Init+0x5a>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133e:	2b11      	cmp	r3, #17
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0xfc>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a2 	beq.w	80015ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a55      	ldr	r2, [pc, #340]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a51      	ldr	r2, [pc, #324]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x202>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <HAL_GPIO_Init+0x2f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x1fe>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_GPIO_Init+0x2f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <HAL_GPIO_Init+0x2f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x1f6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a44      	ldr	r2, [pc, #272]	; (80015ec <HAL_GPIO_Init+0x2fc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x1f2>
 80014de:	2304      	movs	r3, #4
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001536:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001560:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_GPIO_Init+0x300>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f aea2 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	3724      	adds	r7, #36	; 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	401a      	ands	r2, r3
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	429a      	cmp	r2, r3
 800163e:	d104      	bne.n	800164a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	041a      	lsls	r2, r3, #16
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001648:	e002      	b.n	8001650 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e25b      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d075      	beq.n	8001766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167a:	4ba3      	ldr	r3, [pc, #652]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d112      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800169e:	d10b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b99      	ldr	r3, [pc, #612]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d05b      	beq.n	8001764 <HAL_RCC_OscConfig+0x108>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d157      	bne.n	8001764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e236      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x74>
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e01d      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a8a      	ldr	r2, [pc, #552]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a87      	ldr	r2, [pc, #540]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016f4:	4b84      	ldr	r3, [pc, #528]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a83      	ldr	r2, [pc, #524]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a80      	ldr	r2, [pc, #512]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fcac 	bl	8001070 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fca8 	bl	8001070 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1fb      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xc0>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc98 	bl	8001070 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc94 	bl	8001070 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1e7      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0xe8>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001786:	2b08      	cmp	r3, #8
 8001788:	d11c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e1bb      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4952      	ldr	r1, [pc, #328]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	e03a      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017cc:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_RCC_OscConfig+0x2b0>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fc4d 	bl	8001070 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fc49 	bl	8001070 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e19c      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4940      	ldr	r1, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x2b0>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fc2c 	bl	8001070 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fc28 	bl	8001070 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e17b      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d030      	beq.n	80018a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x2b4>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fc0c 	bl	8001070 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fc08 	bl	8001070 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e15b      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x200>
 800187a:	e015      	b.n	80018a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x2b4>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fbf5 	bl	8001070 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff fbf1 	bl	8001070 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e144      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a0 	beq.w	80019f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fbb7 	bl	8001070 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e011      	b.n	800192a <HAL_RCC_OscConfig+0x2ce>
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	42470000 	.word	0x42470000
 8001910:	42470e80 	.word	0x42470e80
 8001914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7ff fbaa 	bl	8001070 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0fd      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <HAL_RCC_OscConfig+0x4d4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x2f0>
 800193e:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a7c      	ldr	r2, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	e01c      	b.n	8001986 <HAL_RCC_OscConfig+0x32a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001954:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	4b74      	ldr	r3, [pc, #464]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a73      	ldr	r2, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0x32a>
 800196e:	4b71      	ldr	r3, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a70      	ldr	r2, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a6d      	ldr	r2, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fb6f 	bl	8001070 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fb6b 	bl	8001070 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0bc      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <HAL_RCC_OscConfig+0x33a>
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb59 	bl	8001070 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb55 	bl	8001070 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0a6      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8092 	beq.w	8001b24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d05c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d141      	bne.n	8001a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <HAL_RCC_OscConfig+0x4dc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb29 	bl	8001070 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb25 	bl	8001070 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e078      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	019b      	lsls	r3, r3, #6
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	4933      	ldr	r1, [pc, #204]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x4dc>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fafe 	bl	8001070 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fafa 	bl	8001070 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04d      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x41c>
 8001a96:	e045      	b.n	8001b24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fae7 	bl	8001070 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fae3 	bl	8001070 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e036      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x44a>
 8001ac4:	e02e      	b.n	8001b24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e029      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_OscConfig+0x4d8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d115      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470060 	.word	0x42470060

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cc      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d90c      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d044      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e067      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4934      	ldr	r1, [pc, #208]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7ff fa20 	bl	8001070 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff fa1c 	bl	8001070 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f821 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f980 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	080034f8 	.word	0x080034f8
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d007      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x32>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x38>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 808d 	bne.w	8001e4e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d36:	60bb      	str	r3, [r7, #8]
       break;
 8001d38:	e08c      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d3c:	60bb      	str	r3, [r7, #8]
      break;
 8001d3e:	e089      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d023      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	f04f 0400 	mov.w	r4, #0
 8001d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	ea03 0501 	and.w	r5, r3, r1
 8001d6c:	ea04 0602 	and.w	r6, r4, r2
 8001d70:	4a3d      	ldr	r2, [pc, #244]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d72:	fb02 f106 	mul.w	r1, r2, r6
 8001d76:	2200      	movs	r2, #0
 8001d78:	fb02 f205 	mul.w	r2, r2, r5
 8001d7c:	440a      	add	r2, r1
 8001d7e:	493a      	ldr	r1, [pc, #232]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d80:	fba5 0101 	umull	r0, r1, r5, r1
 8001d84:	1853      	adds	r3, r2, r1
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4623      	mov	r3, r4
 8001d92:	f7fe fa8d 	bl	80002b0 <__aeabi_uldivmod>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e049      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	f04f 0400 	mov.w	r4, #0
 8001da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	ea03 0501 	and.w	r5, r3, r1
 8001db4:	ea04 0602 	and.w	r6, r4, r2
 8001db8:	4629      	mov	r1, r5
 8001dba:	4632      	mov	r2, r6
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	f04f 0400 	mov.w	r4, #0
 8001dc4:	0154      	lsls	r4, r2, #5
 8001dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dca:	014b      	lsls	r3, r1, #5
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4622      	mov	r2, r4
 8001dd0:	1b49      	subs	r1, r1, r5
 8001dd2:	eb62 0206 	sbc.w	r2, r2, r6
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	0194      	lsls	r4, r2, #6
 8001de0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001de4:	018b      	lsls	r3, r1, #6
 8001de6:	1a5b      	subs	r3, r3, r1
 8001de8:	eb64 0402 	sbc.w	r4, r4, r2
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	00e2      	lsls	r2, r4, #3
 8001df6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dfa:	00d9      	lsls	r1, r3, #3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	195b      	adds	r3, r3, r5
 8001e02:	eb44 0406 	adc.w	r4, r4, r6
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	02a2      	lsls	r2, r4, #10
 8001e10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e14:	0299      	lsls	r1, r3, #10
 8001e16:	460b      	mov	r3, r1
 8001e18:	4614      	mov	r4, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f04f 0400 	mov.w	r4, #0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4623      	mov	r3, r4
 8001e28:	f7fe fa42 	bl	80002b0 <__aeabi_uldivmod>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	460c      	mov	r4, r1
 8001e30:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	60bb      	str	r3, [r7, #8]
      break;
 8001e4c:	e002      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e50:	60bb      	str	r3, [r7, #8]
      break;
 8001e52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e54:	68bb      	ldr	r3, [r7, #8]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	017d7840 	.word	0x017d7840

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	2000000c 	.word	0x2000000c

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0b5b      	lsrs	r3, r3, #13
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	08003508 	.word	0x08003508

08001eac <GetPCLK>:
static USART_Handle_t *ptrUSARTx;
bool endLine = false;


uint32_t GetPCLK(USART_TypeDef *pUSARTx)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	uint32_t pclk;
	if (pUSARTx == USART1 || USART6)
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8001eb4:	f7ff ffe6 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8001eb8:	60f8      	str	r0, [r7, #12]
	}
	else if (pUSARTx == USART2)
	{
		pclk = HAL_RCC_GetPCLK1Freq();
	}
	return pclk;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <USART_EnablePeripheralClk>:

/*
 * @USART_EnablePeripheralClk: Enables USARTx clock
 */
static void USART_EnablePeripheralClk(USART_TypeDef *pUSARTx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	if (pUSARTx == USART1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <USART_EnablePeripheralClk+0x54>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d106      	bne.n	8001ee2 <USART_EnablePeripheralClk+0x1e>
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART1EN;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pUSARTx == USART6)
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
	}
}
 8001ee0:	e014      	b.n	8001f0c <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <USART_EnablePeripheralClk+0x5c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d106      	bne.n	8001ef8 <USART_EnablePeripheralClk+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ef6:	e009      	b.n	8001f0c <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART6)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <USART_EnablePeripheralClk+0x60>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d105      	bne.n	8001f0c <USART_EnablePeripheralClk+0x48>
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <USART_EnablePeripheralClk+0x58>)
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40011400 	.word	0x40011400

08001f28 <USART_TransmitData>:

/*
 * @USART_TransmitData: Enables USART control bits
 */
USART_State USART_TransmitData(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State != USART_TX_BUSY)
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <USART_TransmitData+0x3c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	7c1b      	ldrb	r3, [r3, #16]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d00d      	beq.n	8001f52 <USART_TransmitData+0x2a>
	{
		ptrUSARTx->USART_State = USART_TX_BUSY;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <USART_TransmitData+0x3c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	741a      	strb	r2, [r3, #16]
		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);  // set Transmit Data Empty & Transmission Complete control bits
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <USART_TransmitData+0x3c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <USART_TransmitData+0x3c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f50:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <USART_TransmitData+0x3c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	7c1b      	ldrb	r3, [r3, #16]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000094 	.word	0x20000094

08001f68 <USART_RxData>:

USART_State USART_RxData(USART_State desiredState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	if (ptrUSARTx->USART_State != desiredState && ptrUSARTx->USART_State != USART_READY)
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <USART_RxData+0x50>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	7c1b      	ldrb	r3, [r3, #16]
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d012      	beq.n	8001fa4 <USART_RxData+0x3c>
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <USART_RxData+0x50>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	7c1b      	ldrb	r3, [r3, #16]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d00d      	beq.n	8001fa4 <USART_RxData+0x3c>
	{
		ptrUSARTx->USART_State = desiredState;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <USART_RxData+0x50>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	741a      	strb	r2, [r3, #16]

		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE | USART_CR1_RE);
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <USART_RxData+0x50>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <USART_RxData+0x50>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8001fa2:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <USART_RxData+0x50>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	7c1b      	ldrb	r3, [r3, #16]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000094 	.word	0x20000094

08001fbc <USART2_IRQHandler>:

/*
 * @USART2_IRQHandler: IRQ handler for servicing USART2 interrupts
 */
void USART2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	endLine = false;
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <USART2_IRQHandler+0x128>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]

	// Transmit buffer empty
	if (ptrUSARTx->pUSARTx->SR & USART_SR_TXE)
 8001fc6:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <USART2_IRQHandler+0x4e>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	7c1b      	ldrb	r3, [r3, #16]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d114      	bne.n	800200a <USART2_IRQHandler+0x4e>
		{
			// TXE
			if (ptrUSARTx->txLength)		// if there is stuff to send...
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <USART2_IRQHandler+0x4e>
			{
				ptrUSARTx->pUSARTx->DR = *ptrUSARTx->txBuffer++; // send to serial
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	6953      	ldr	r3, [r2, #20]
 8001ff0:	1c59      	adds	r1, r3, #1
 8001ff2:	6151      	str	r1, [r2, #20]
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
				ptrUSARTx->txLength--;
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	7f1a      	ldrb	r2, [r3, #28]
 8002004:	3a01      	subs	r2, #1
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	771a      	strb	r2, [r3, #28]
			}
		}
	}

	// RXNE
	if (ptrUSARTx->pUSARTx->SR & USART_SR_RXNE)
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <USART2_IRQHandler+0xa0>
	{
		ptrUSARTx->rxBuffer[ptrUSARTx->txIdx] = ptrUSARTx->pUSARTx->DR;
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002030:	4413      	add	r3, r2
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]

		if(ptrUSARTx->rxBuffer[ptrUSARTx->txIdx++] == '\r')
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002044:	1c50      	adds	r0, r2, #1
 8002046:	b2c0      	uxtb	r0, r0
 8002048:	f883 0020 	strb.w	r0, [r3, #32]
 800204c:	4613      	mov	r3, r2
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b0d      	cmp	r3, #13
 8002054:	d102      	bne.n	800205c <USART2_IRQHandler+0xa0>
		{
			endLine = true;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <USART2_IRQHandler+0x128>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (ptrUSARTx->pUSARTx->SR & USART_SR_TC) // transmission complete
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <USART2_IRQHandler+0xf0>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	7c1b      	ldrb	r3, [r3, #16]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d107      	bne.n	8002086 <USART2_IRQHandler+0xca>
		{
			if (!ptrUSARTx->txLength)		 // if no more bytes to send
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	7f1b      	ldrb	r3, [r3, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d115      	bne.n	80020ac <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8002080:	f000 f834 	bl	80020ec <USART_CloseTransmission>
 8002084:	e012      	b.n	80020ac <USART2_IRQHandler+0xf0>
			}
		}
		else if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <USART2_IRQHandler+0x12c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	7c1b      	ldrb	r3, [r3, #16]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d10d      	bne.n	80020ac <USART2_IRQHandler+0xf0>
		{
			if (endLine)
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <USART2_IRQHandler+0x128>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8002098:	f000 f828 	bl	80020ec <USART_CloseTransmission>
				ptrUSARTx->TxEndOfLineIdx++;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <USART2_IRQHandler+0x12c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80020a4:	3201      	adds	r2, #1
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
	}
	ptrUSARTx->txIdx &= ptrUSARTx->bitMask;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f893 1020 	ldrb.w	r1, [r3, #32]
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	7fda      	ldrb	r2, [r3, #31]
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	400a      	ands	r2, r1
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
	ptrUSARTx->rxIdx &= ptrUSARTx->bitMask;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	7fda      	ldrb	r2, [r3, #31]
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <USART2_IRQHandler+0x12c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000098 	.word	0x20000098
 80020e8:	20000094 	.word	0x20000094

080020ec <USART_CloseTransmission>:

static void USART_CloseTransmission()
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State == USART_RX_BUSY)
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <USART_CloseTransmission+0x50>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	7c1b      	ldrb	r3, [r3, #16]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d00e      	beq.n	8002118 <USART_CloseTransmission+0x2c>
		//USART_ApplicationCallback(ptrUSARTx);
//		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE);
//		ptrUSARTx->rxLength = ptrUSARTx->rxSize;	// restoring the original RX size
//		ptrUSARTx->rxBufferIdx = 0;
	}
	else if (ptrUSARTx->USART_State == USART_TX_BUSY)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <USART_CloseTransmission+0x50>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	7c1b      	ldrb	r3, [r3, #16]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d109      	bne.n	8002118 <USART_CloseTransmission+0x2c>
	{
		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <USART_CloseTransmission+0x50>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <USART_CloseTransmission+0x50>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002116:	60da      	str	r2, [r3, #12]
	}
	ptrUSARTx->USART_State = ptrUSARTx->session ? USART_RX_BUSY : USART_READY;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <USART_CloseTransmission+0x50>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <USART_CloseTransmission+0x3c>
 8002124:	2202      	movs	r2, #2
 8002126:	e000      	b.n	800212a <USART_CloseTransmission+0x3e>
 8002128:	2201      	movs	r2, #1
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <USART_CloseTransmission+0x50>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	741a      	strb	r2, [r3, #16]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000094 	.word	0x20000094

08002140 <USART_Initization>:

/*
 * @USART_Init: Populates USART struct
 */
void USART_Initization(USART_Handle_t *pUSART)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	ptrUSARTx = pUSART;
 8002148:	4a5b      	ldr	r2, [pc, #364]	; (80022b8 <USART_Initization+0x178>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]

	// initializing peripheral clock
	USART_EnablePeripheralClk(pUSART->pUSARTx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff feb6 	bl	8001ec4 <USART_EnablePeripheralClk>

	// enable UE bit
	pUSART->pUSARTx->CR1 |= USART_CR1_UE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002166:	60da      	str	r2, [r3, #12]

	// word length
	pUSART->pUSARTx->CR1 |= pUSART->USART_Config.USART_wordLength << USART_CR1_M_Pos;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b5b      	ldrb	r3, [r3, #13]
 8002172:	031b      	lsls	r3, r3, #12
 8002174:	4619      	mov	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	60da      	str	r2, [r3, #12]

	// parity control
	if (pUSART->USART_Config.USART_parityControl)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <USART_Initization+0x56>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_PS;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	60da      	str	r2, [r3, #12]
	}

	// USART mode
	if (pUSART->USART_Config.USART_mode == USART_MODE_TX)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7b9b      	ldrb	r3, [r3, #14]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <USART_Initization+0x70>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0208 	orr.w	r2, r2, #8
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e018      	b.n	80021e2 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_RX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7b9b      	ldrb	r3, [r3, #14]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <USART_Initization+0x8a>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_RE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0204 	orr.w	r2, r2, #4
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	e00b      	b.n	80021e2 <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_TXRX)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7b9b      	ldrb	r3, [r3, #14]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <USART_Initization+0xa2>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 020c 	orr.w	r2, r2, #12
 80021e0:	60da      	str	r2, [r3, #12]
	}

	if (pUSART->dmaTransfer == DMA_TX_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <USART_Initization+0xbc>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021fa:	615a      	str	r2, [r3, #20]
	}

	if (pUSART->dmaReception == DMA_RX_ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <USART_Initization+0xd6>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002214:	615a      	str	r2, [r3, #20]
	}
	// STOP bit
	pUSART->pUSARTx->CR2 |= pUSART->USART_Config.USART_stopBits << USART_CR2_STOP_Pos;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7b1b      	ldrb	r3, [r3, #12]
 8002220:	031b      	lsls	r3, r3, #12
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	611a      	str	r2, [r3, #16]

	// Hardware control
						// todo ....!

	// configuring baud rate
	uint8_t oversamplingValue = 16, divisor = 100;
 800222c:	2310      	movs	r3, #16
 800222e:	77fb      	strb	r3, [r7, #31]
 8002230:	2364      	movs	r3, #100	; 0x64
 8002232:	77bb      	strb	r3, [r7, #30]
	uint32_t tempUsartDiv, tempFraction;

	uint8_t over8 = pUSART->pUSARTx->CR1 & USART_CR1_OVER8; 	// by default, over8=0 = 16x oversampling
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2300      	movs	r3, #0
 800223c:	777b      	strb	r3, [r7, #29]
	tempUsartDiv = (GetPCLK(pUSART->pUSARTx) * divisor) / (8 * (2 - over8) * pUSART->USART_Config.USART_baudRate);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe32 	bl	8001eac <GetPCLK>
 8002248:	4602      	mov	r2, r0
 800224a:	7fbb      	ldrb	r3, [r7, #30]
 800224c:	fb03 f202 	mul.w	r2, r3, r2
 8002250:	7f7b      	ldrb	r3, [r7, #29]
 8002252:	f1c3 0302 	rsb	r3, r3, #2
 8002256:	4619      	mov	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	fb03 f301 	mul.w	r3, r3, r1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	61bb      	str	r3, [r7, #24]

	uint8_t divMantissa = tempUsartDiv / divisor;
 8002268:	7fbb      	ldrb	r3, [r7, #30]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	75fb      	strb	r3, [r7, #23]
	tempFraction = (tempUsartDiv - divMantissa * divisor) * oversamplingValue;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	7fba      	ldrb	r2, [r7, #30]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	461a      	mov	r2, r3
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	613b      	str	r3, [r7, #16]

	uint8_t divFraction = (tempFraction + 50)/divisor;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800228e:	7fbb      	ldrb	r3, [r7, #30]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	73fb      	strb	r3, [r7, #15]

	// writing to BRR register
	pUSART->pUSARTx->BRR |= (divMantissa << USART_BRR_DIV_Mantissa_Pos | divFraction);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	0119      	lsls	r1, r3, #4
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	430b      	orrs	r3, r1
 80022a4:	4619      	mov	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]

}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000094 	.word	0x20000094

080022bc <I2C_Initilization>:

/*
 * Initializing user-defined variables for I2C struct
 */
void I2C_Initilization(I2C_Config_t *I2C_Config, I2C_TypeDef *i2cPeripheral)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	I2C1_handle.pI2Cx = i2cPeripheral;
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <I2C_Initilization+0x2c>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6013      	str	r3, [r2, #0]
	I2C1_handle.I2C_Config = *I2C_Config;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <I2C_Initilization+0x2c>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d6:	e883 0003 	stmia.w	r3, {r0, r1}
	I2C_Init(&I2C1_handle);
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <I2C_Initilization+0x2c>)
 80022dc:	f7fe f9ea 	bl	80006b4 <I2C_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000158 	.word	0x20000158

080022ec <USART_Init>:

void USART_Init (void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	USART2_handle.pUSARTx = USART2;
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <USART_Init+0x88>)
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <USART_Init+0x8c>)
 80022f4:	601a      	str	r2, [r3, #0]
	USART2_handle.USART_Config.USART_baudRate = USART_BAUD_9600;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <USART_Init+0x88>)
 80022f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022fc:	609a      	str	r2, [r3, #8]
	USART2_handle.USART_Config.USART_mode = USART_MODE_TXRX;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <USART_Init+0x88>)
 8002300:	2202      	movs	r2, #2
 8002302:	739a      	strb	r2, [r3, #14]
	USART2_handle.USART_Config.USART_parityControl = USART_PARITY_DISABLED;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <USART_Init+0x88>)
 8002306:	2200      	movs	r2, #0
 8002308:	711a      	strb	r2, [r3, #4]
	USART2_handle.USART_Config.USART_stopBits = USART_STOP;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <USART_Init+0x88>)
 800230c:	2200      	movs	r2, #0
 800230e:	731a      	strb	r2, [r3, #12]
	USART2_handle.USART_Config.USART_wordLength = USART_8_DATA_BITS;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <USART_Init+0x88>)
 8002312:	2200      	movs	r2, #0
 8002314:	735a      	strb	r2, [r3, #13]
	USART2_handle.rxBuffer = usart_rxBuffer;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <USART_Init+0x88>)
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <USART_Init+0x90>)
 800231a:	619a      	str	r2, [r3, #24]
	USART2_handle.rxLength = usart_rxLength -1;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <USART_Init+0x94>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3b01      	subs	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <USART_Init+0x88>)
 8002326:	775a      	strb	r2, [r3, #29]
	USART2_handle.rxSize = usart_rxLength - 1;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <USART_Init+0x94>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <USART_Init+0x88>)
 8002332:	779a      	strb	r2, [r3, #30]
	USART2_handle.bitMask = usart_rxLength - 2;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <USART_Init+0x94>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3b02      	subs	r3, #2
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <USART_Init+0x88>)
 800233e:	77da      	strb	r2, [r3, #31]
	USART2_handle.txIdx = 0;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <USART_Init+0x88>)
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2020 	strb.w	r2, [r3, #32]
	USART2_handle.rxIdx = 0;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <USART_Init+0x88>)
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	USART2_handle.dmaTransfer = DMA_TX_DISABLE;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <USART_Init+0x88>)
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	USART2_handle.dmaReception = DMA_RX_DISABLE;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <USART_Init+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	USART2_handle.session = SET;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <USART_Init+0x88>)
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	USART_Initization(&USART2_handle);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <USART_Init+0x88>)
 800236a:	f7ff fee9 	bl	8002140 <USART_Initization>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200000bc 	.word	0x200000bc
 8002378:	40004400 	.word	0x40004400
 800237c:	2000009c 	.word	0x2000009c
 8002380:	20000005 	.word	0x20000005

08002384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
//
//	uint64_t a = 4294967299;
//	uint32_t fin = 4294967290;
//	uint32_t c = 4;
//	unsigned char b = 300;
	HAL_Init();
 800238a:	f7fe fe0b 	bl	8000fa4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800238e:	f000 f823 	bl	80023d8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002392:	f000 f881 	bl	8002498 <MX_GPIO_Init>

	/* Initialize I2C struct */
	I2C_Config_t i2c_config = {
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <main+0x44>)
 8002398:	463b      	mov	r3, r7
 800239a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239e:	e883 0003 	stmia.w	r3, {r0, r1}
		I2C_AckControl: I2C_ACK_ENABLE,
		I2C_SCLSpeed: I2C_SCL_SPEED_SM,
		I2C_DeviceAddress: MCP9808_ADDR,
		I2C_FMDutyCycle: I2C_FM_DUTY_2
	};
    I2C_Initilization(&i2c_config, I2C1);
 80023a2:	463b      	mov	r3, r7
 80023a4:	4909      	ldr	r1, [pc, #36]	; (80023cc <main+0x48>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff88 	bl	80022bc <I2C_Initilization>

    /* Initialize USART struct */
    USART_Init();
 80023ac:	f7ff ff9e 	bl	80022ec <USART_Init>
//    DMA_Start_IT(&dma_usart_rx, &usart.pUSARTx->DR, (uint32_t) rx_buff);

//    StartSerialSession (&USART2_handle, usart_rxLength, &I2C1_handle);


    USART_EnableRxInterrupts();
 80023b0:	f000 fb3c 	bl	8002a2c <USART_EnableRxInterrupts>

    while(1) {
    	SerialRead(&USART2_handle, &I2C1_handle);
 80023b4:	4906      	ldr	r1, [pc, #24]	; (80023d0 <main+0x4c>)
 80023b6:	4807      	ldr	r0, [pc, #28]	; (80023d4 <main+0x50>)
 80023b8:	f000 fb3f 	bl	8002a3a <SerialRead>
    	HAL_Delay(2000);
 80023bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023c0:	f7fe fe62 	bl	8001088 <HAL_Delay>
    while(1) {
 80023c4:	e7f6      	b.n	80023b4 <main+0x30>
 80023c6:	bf00      	nop
 80023c8:	08003490 	.word	0x08003490
 80023cc:	40005400 	.word	0x40005400
 80023d0:	20000158 	.word	0x20000158
 80023d4:	200000bc 	.word	0x200000bc

080023d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b094      	sub	sp, #80	; 0x50
 80023dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023de:	f107 0320 	add.w	r3, r7, #32
 80023e2:	2230      	movs	r2, #48	; 0x30
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fc29 	bl	8002c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <SystemClock_Config+0xb8>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <SystemClock_Config+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <SystemClock_Config+0xb8>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <SystemClock_Config+0xbc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <SystemClock_Config+0xbc>)
 8002426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <SystemClock_Config+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002440:	2310      	movs	r3, #16
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002448:	f107 0320 	add.w	r3, r7, #32
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f905 	bl	800165c <HAL_RCC_OscConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002458:	f000 f8b6 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800245c:	230f      	movs	r3, #15
 800245e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb60 	bl	8001b3c <HAL_RCC_ClockConfig>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002482:	f000 f8a1 	bl	80025c8 <Error_Handler>
  }
}
 8002486:	bf00      	nop
 8002488:	3750      	adds	r7, #80	; 0x50
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000

08002498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();			// Push button (PC13)
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();			// LED (PA5)
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();			// I2C1
 80024d6:	2300      	movs	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <MX_GPIO_Init+0x11c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	4830      	ldr	r0, [pc, #192]	; (80025b8 <MX_GPIO_Init+0x120>)
 80024f8:	f7ff f87c 	bl	80015f4 <HAL_GPIO_WritePin>

	/* USART config */
	gpio.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
	gpio.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002500:	230c      	movs	r3, #12
 8002502:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_PULLUP;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
	gpio.Alternate = GPIO_AF7_USART2;
 8002508:	2307      	movs	r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio);
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4619      	mov	r1, r3
 8002512:	4829      	ldr	r0, [pc, #164]	; (80025b8 <MX_GPIO_Init+0x120>)
 8002514:	f7fe feec 	bl	80012f0 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002518:	2026      	movs	r0, #38	; 0x26
 800251a:	f7fe fece 	bl	80012ba <HAL_NVIC_EnableIRQ>

	/* LED/Push button config */

	// Configure GPIO pin : PC13 // PUSH BUTTON
	gpio.Pin = GPIO_PIN_13;
 800251e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002522:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_IT_RISING;
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <MX_GPIO_Init+0x124>)
 8002526:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpio);
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	4619      	mov	r1, r3
 8002532:	4823      	ldr	r0, [pc, #140]	; (80025c0 <MX_GPIO_Init+0x128>)
 8002534:	f7fe fedc 	bl	80012f0 <HAL_GPIO_Init>

	// Configure GPIO pin : PA5  // LED
	gpio.Pin = GPIO_PIN_5;
 8002538:	2320      	movs	r3, #32
 800253a:	60fb      	str	r3, [r7, #12]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	481a      	ldr	r0, [pc, #104]	; (80025b8 <MX_GPIO_Init+0x120>)
 8002550:	f7fe fece 	bl	80012f0 <HAL_GPIO_Init>

	// Configure I2C
	gpio.Mode = GPIO_MODE_AF_OD;
 8002554:	2312      	movs	r3, #18
 8002556:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
	gpio.Alternate = GPIO_AF4_I2C1;
 8002560:	2304      	movs	r3, #4
 8002562:	61fb      	str	r3, [r7, #28]


	// scl
	gpio.Pin = GPIO_PIN_6;
 8002564:	2340      	movs	r3, #64	; 0x40
 8002566:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4619      	mov	r1, r3
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <MX_GPIO_Init+0x12c>)
 8002570:	f7fe febe 	bl	80012f0 <HAL_GPIO_Init>

	// sdata
	gpio.Pin = GPIO_PIN_7;
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &gpio);
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	4619      	mov	r1, r3
 800257e:	4811      	ldr	r0, [pc, #68]	; (80025c4 <MX_GPIO_Init+0x12c>)
 8002580:	f7fe feb6 	bl	80012f0 <HAL_GPIO_Init>

	/* EXTI GPIO init */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2028      	movs	r0, #40	; 0x28
 800258a:	f7fe fe7a 	bl	8001282 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800258e:	2028      	movs	r0, #40	; 0x28
 8002590:	f7fe fe93 	bl	80012ba <HAL_NVIC_EnableIRQ>

	/* EXTI I2C Interrupts */
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002594:	201f      	movs	r0, #31
 8002596:	f7fe fe90 	bl	80012ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800259a:	2020      	movs	r0, #32
 800259c:	f7fe fe8d 	bl	80012ba <HAL_NVIC_EnableIRQ>

//	/* EXTI DMA interrupt */ -- todo remove
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025a0:	2011      	movs	r0, #17
 80025a2:	f7fe fe8a 	bl	80012ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025a6:	2010      	movs	r0, #16
 80025a8:	f7fe fe87 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	10110000 	.word	0x10110000
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020400 	.word	0x40020400

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <ProcessData>:
static uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
static uint8_t rxSize = BYTES_PER_TRANSACTION;
/*
 * @ProcessData: Converts raw bytes into readable data
 */
uint16_t ProcessData (uint8_t *rxBuffer) {
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	uint8_t startIndex = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	737b      	strb	r3, [r7, #13]
	//printf ("\nUpper byte: %d, Lower byte: %d\n", rxBuffer[startIndex], rxBuffer[startIndex+1]);
	uint16_t temperatureInDegrees;

	// process data
	uint8_t upperByte = rxBuffer[startIndex] & 0x1F; // mask out the 3 bits
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	733b      	strb	r3, [r7, #12]
	uint8_t signBit = upperByte & 0x10;
 80025f0:	7b3b      	ldrb	r3, [r7, #12]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	72fb      	strb	r3, [r7, #11]

	if (signBit)
 80025f8:	7afb      	ldrb	r3, [r7, #11]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <ProcessData+0x54>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 80025fe:	7b3b      	ldrb	r3, [r7, #12]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	733b      	strb	r3, [r7, #12]
		temperatureInDegrees = 256 - (upperByte << 4 | rxBuffer[startIndex+1] >> 4);
 8002606:	7b3b      	ldrb	r3, [r7, #12]
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	b21a      	sxth	r2, r3
 800260c:	7b7b      	ldrb	r3, [r7, #13]
 800260e:	3301      	adds	r3, #1
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	440b      	add	r3, r1
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b21b      	sxth	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	b21b      	sxth	r3, r3
 8002620:	b29b      	uxth	r3, r3
 8002622:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002626:	81fb      	strh	r3, [r7, #14]
 8002628:	e00d      	b.n	8002646 <ProcessData+0x70>
	}
	else
	{
		temperatureInDegrees = upperByte << 4 | rxBuffer[startIndex+1] >> 4;
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	b21a      	sxth	r2, r3
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	3301      	adds	r3, #1
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	b2db      	uxtb	r3, r3
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	81fb      	strh	r3, [r7, #14]
	}
//	printf ("Temperature value: %d\n\n", temperatureInDegrees);
	return temperatureInDegrees;
 8002646:	89fb      	ldrh	r3, [r7, #14]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_ReadTemperature_IT>:

/*
 * @ReadTemperatureInterrupt: Reads temperature values via I2C using interrupts
 */
uint16_t _ReadTemperature_IT(I2C_Handle_t *I2C_handle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	I2C_handle->txBuffer = txBuffer;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <_ReadTemperature_IT+0x8c>)
 8002660:	611a      	str	r2, [r3, #16]
	I2C_handle->pRxBuffer = rxBuffer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <_ReadTemperature_IT+0x90>)
 8002666:	615a      	str	r2, [r3, #20]
	I2C_handle->rxBufferSize = rxSize;
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <_ReadTemperature_IT+0x94>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	765a      	strb	r2, [r3, #25]

	// Start I2C transaction
	while (HAL_I2C_StartInterrupt(I2C_TX_BUSY, txSize, rxSize) != I2C_READY);
 8002670:	bf00      	nop
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <_ReadTemperature_IT+0x98>)
 8002674:	7819      	ldrb	r1, [r3, #0]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <_ReadTemperature_IT+0x94>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	2003      	movs	r0, #3
 800267e:	f7fe f94b 	bl	8000918 <HAL_I2C_StartInterrupt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d1f4      	bne.n	8002672 <_ReadTemperature_IT+0x1e>

	I2C_handle->I2C_State = I2C_INIT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	731a      	strb	r2, [r3, #12]

	// request the data from the sensor
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e011      	b.n	80026b8 <_ReadTemperature_IT+0x64>
	{
		I2C_handle->I2C_State = I2C_INIT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	731a      	strb	r2, [r3, #12]
		while (HAL_I2C_StartInterrupt(I2C_RX_BUSY, txSize, rxSize) != I2C_READY);
 800269a:	bf00      	nop
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_ReadTemperature_IT+0x98>)
 800269e:	7819      	ldrb	r1, [r3, #0]
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <_ReadTemperature_IT+0x94>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7fe f936 	bl	8000918 <HAL_I2C_StartInterrupt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d1f4      	bne.n	800269c <_ReadTemperature_IT+0x48>
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e5b      	ldrb	r3, [r3, #25]
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	dbe5      	blt.n	8002694 <_ReadTemperature_IT+0x40>
	}

	uint16_t temperature = ProcessData(I2C_handle->pRxBuffer);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff82 	bl	80025d6 <ProcessData>
 80026d2:	4603      	mov	r3, r0
 80026d4:	817b      	strh	r3, [r7, #10]
	return temperature;
 80026d6:	897b      	ldrh	r3, [r7, #10]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000008 	.word	0x20000008
 80026e4:	200000a8 	.word	0x200000a8
 80026e8:	2000000a 	.word	0x2000000a
 80026ec:	20000009 	.word	0x20000009

080026f0 <_ReadTemperature>:

/*
 * @ReadTemperature: Read temperature via I2C using polling approach
 */
void _ReadTemperature(I2C_Handle_t *I2C_handle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	// todo - maybe use the following data straight from I2C_handle
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 80026f8:	2305      	movs	r3, #5
 80026fa:	743b      	strb	r3, [r7, #16]
	uint8_t rxBuffer[BYTES_TO_READ];
	uint8_t startRxIndex = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	77fb      	strb	r3, [r7, #31]

//	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <_ReadTemperature+0x6c>)
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fabc 	bl	8000c88 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e00c      	b.n	8002730 <_ReadTemperature+0x40>
	{
		HAL_I2C_Master_Receive (I2C_handle, rxBuffer, BYTES_PER_TRANSACTION, startRxIndex);
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	f107 010c 	add.w	r1, r7, #12
 800271c:	2202      	movs	r2, #2
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe faf3 	bl	8000d0a <HAL_I2C_Master_Receive>
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	3301      	adds	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	3302      	adds	r3, #2
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	ddef      	ble.n	8002716 <_ReadTemperature+0x26>
	}

//	printf ("Printing raw bytes:\n");
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e007      	b.n	800274c <_ReadTemperature+0x5c>
	{
		ProcessData(rxBuffer);
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff48 	bl	80025d6 <ProcessData>
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3302      	adds	r3, #2
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	ddf4      	ble.n	800273c <_ReadTemperature+0x4c>
	}
}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000009 	.word	0x20000009

08002760 <GetTemperature>:

uint16_t GetTemperature(uint8_t interrupt, I2C_Handle_t *I2C_Handle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
	uint16_t temperature;

	if (interrupt == SET)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <GetTemperature+0x1e>
	{
		temperature = _ReadTemperature_IT(I2C_Handle);
 8002772:	6838      	ldr	r0, [r7, #0]
 8002774:	f7ff ff6e 	bl	8002654 <_ReadTemperature_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	81fb      	strh	r3, [r7, #14]
 800277c:	e002      	b.n	8002784 <GetTemperature+0x24>
	}
	else
	{
		_ReadTemperature(I2C_Handle);
 800277e:	6838      	ldr	r0, [r7, #0]
 8002780:	f7ff ffb6 	bl	80026f0 <_ReadTemperature>
	}
	return temperature;
 8002784:	89fb      	ldrh	r3, [r7, #14]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_MspInit+0x4c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
//
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
//
  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DMA1_Stream5_IRQHandler>:



void DMA1_Stream5_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_rx);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <DMA1_Stream5_IRQHandler+0x10>)
 8002836:	f7fd febb 	bl	80005b0 <DMA_InterruptHandler>
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200000f0 	.word	0x200000f0

08002844 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_tx);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <DMA1_Stream6_IRQHandler+0x10>)
 800284a:	f7fd feb1 	bl	80005b0 <DMA_InterruptHandler>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000124 	.word	0x20000124

08002858 <SysTick_Handler>:
//}
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285c:	f7fe fbf4 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}

08002864 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x50>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x16>
		heap_end = &end;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <_sbrk+0x50>)
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <_sbrk+0x54>)
 8002878:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <_sbrk+0x50>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <_sbrk+0x50>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	466a      	mov	r2, sp
 800288a:	4293      	cmp	r3, r2
 800288c:	d907      	bls.n	800289e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800288e:	f000 f9a1 	bl	8002bd4 <__errno>
 8002892:	4602      	mov	r2, r0
 8002894:	230c      	movs	r3, #12
 8002896:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289c:	e006      	b.n	80028ac <_sbrk+0x48>
	}

	heap_end += incr;
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <_sbrk+0x50>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <_sbrk+0x50>)
 80028a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200000ac 	.word	0x200000ac
 80028b8:	20000178 	.word	0x20000178

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <SystemInit+0x28>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <SystemInit+0x28>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <SystemInit+0x28>)
 80028d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d6:	609a      	str	r2, [r3, #8]
#endif
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <SendSerialData>:
 * @param: format: format of the TX data
 * @param: ...   : data to display
 * @return void
 */
void SendSerialData(USART_Handle_t *usart, const char *format, ...)
{
 80028e8:	b40e      	push	{r1, r2, r3}
 80028ea:	b5b0      	push	{r4, r5, r7, lr}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	466b      	mov	r3, sp
 80028f4:	461d      	mov	r5, r3
	char serialBuffer[strlen(format)];
 80028f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028f8:	f7fd fc7c 	bl	80001f4 <strlen>
 80028fc:	4603      	mov	r3, r0
 80028fe:	3b01      	subs	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	4601      	mov	r1, r0
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	00d4      	lsls	r4, r2, #3
 8002912:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002916:	00cb      	lsls	r3, r1, #3
 8002918:	4601      	mov	r1, r0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f04f 0400 	mov.w	r4, #0
 8002926:	00d4      	lsls	r4, r2, #3
 8002928:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800292c:	00cb      	lsls	r3, r1, #3
 800292e:	1dc3      	adds	r3, r0, #7
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	ebad 0d03 	sub.w	sp, sp, r3
 8002938:	466b      	mov	r3, sp
 800293a:	3300      	adds	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 800293e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002942:	60bb      	str	r3, [r7, #8]
	vsprintf(serialBuffer, format, args);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f9a2 	bl	8002c94 <vsiprintf>

	usart->txBuffer = serialBuffer;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	615a      	str	r2, [r3, #20]
	usart->txLength = strlen(serialBuffer);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fc4b 	bl	80001f4 <strlen>
 800295e:	4603      	mov	r3, r0
 8002960:	b2da      	uxtb	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	771a      	strb	r2, [r3, #28]

	USART_State expectedState = usart->session ? USART_RX_BUSY : USART_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SendSerialData+0x8c>
 8002970:	2302      	movs	r3, #2
 8002972:	e000      	b.n	8002976 <SendSerialData+0x8e>
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
	while (USART_TransmitData() != expectedState);
 8002978:	bf00      	nop
 800297a:	f7ff fad5 	bl	8001f28 <USART_TransmitData>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	4293      	cmp	r3, r2
 8002986:	d1f8      	bne.n	800297a <SendSerialData+0x92>
 8002988:	46ad      	mov	sp, r5

//	USART_DMA_Transmit(usart, sizeof(serialBuffer));
//	USART_DMA_Transmit(usartHandle, dmaHandle); //
	va_end(args);		// clean memory reserved for valist
//	usart->USART_State = USART_INIT;
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002994:	b003      	add	sp, #12
 8002996:	4770      	bx	lr

08002998 <ExecuteSerialData>:
 * @param: str1:  hardcoded string to compare the user input against
 * @param: I2C_Handle_t: pointer to I2C_Handle_t struct
 * @return false if "q" (quit) is entered, otherwise true
 */
bool ExecuteSerialData(USART_Handle_t *usart, const char *str1, I2C_Handle_t *I2C_Handle)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	if (!strcmp(str1, "temp"))
 80029a4:	491a      	ldr	r1, [pc, #104]	; (8002a10 <ExecuteSerialData+0x78>)
 80029a6:	68b8      	ldr	r0, [r7, #8]
 80029a8:	f7fd fc1a 	bl	80001e0 <strcmp>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <ExecuteSerialData+0x34>
	{
		uint16_t temp = GetTemperature(SET, I2C_Handle);
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7ff fed3 	bl	8002760 <GetTemperature>
 80029ba:	4603      	mov	r3, r0
 80029bc:	82fb      	strh	r3, [r7, #22]
		SendSerialData(usart, "Current temperature: %d\n", temp);
 80029be:	8afb      	ldrh	r3, [r7, #22]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4914      	ldr	r1, [pc, #80]	; (8002a14 <ExecuteSerialData+0x7c>)
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff8f 	bl	80028e8 <SendSerialData>
 80029ca:	e01c      	b.n	8002a06 <ExecuteSerialData+0x6e>
	}
	else if (!strcmp(str1, "led"))
 80029cc:	4912      	ldr	r1, [pc, #72]	; (8002a18 <ExecuteSerialData+0x80>)
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	f7fd fc06 	bl	80001e0 <strcmp>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <ExecuteSerialData+0x54>
	{
		SendSerialData(usart, "Toggling LED\n");
 80029da:	4910      	ldr	r1, [pc, #64]	; (8002a1c <ExecuteSerialData+0x84>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ff83 	bl	80028e8 <SendSerialData>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80029e2:	2120      	movs	r1, #32
 80029e4:	480e      	ldr	r0, [pc, #56]	; (8002a20 <ExecuteSerialData+0x88>)
 80029e6:	f7fe fe1e 	bl	8001626 <HAL_GPIO_TogglePin>
 80029ea:	e00c      	b.n	8002a06 <ExecuteSerialData+0x6e>
	}
	else if (!strcmp(str1, "q"))
 80029ec:	490d      	ldr	r1, [pc, #52]	; (8002a24 <ExecuteSerialData+0x8c>)
 80029ee:	68b8      	ldr	r0, [r7, #8]
 80029f0:	f7fd fbf6 	bl	80001e0 <strcmp>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <ExecuteSerialData+0x6e>
	{
		SendSerialData(usart, "No longer accepting serial data...\n");
 80029fa:	490b      	ldr	r1, [pc, #44]	; (8002a28 <ExecuteSerialData+0x90>)
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff ff73 	bl	80028e8 <SendSerialData>
		return false;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <ExecuteSerialData+0x70>
	}
	return true;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08003498 	.word	0x08003498
 8002a14:	080034a0 	.word	0x080034a0
 8002a18:	080034bc 	.word	0x080034bc
 8002a1c:	080034c0 	.word	0x080034c0
 8002a20:	40020000 	.word	0x40020000
 8002a24:	080034d0 	.word	0x080034d0
 8002a28:	080034d4 	.word	0x080034d4

08002a2c <USART_EnableRxInterrupts>:
		usart->USART_State = USART_INIT;
	}
}

void USART_EnableRxInterrupts()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	(USART_RxData(USART_RX_BUSY));
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7ff fa99 	bl	8001f68 <USART_RxData>
//	usart->USART_State = USART_INIT;
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <SerialRead>:

// consume circular buffer
void SerialRead(USART_Handle_t *usart, I2C_Handle_t *I2C_Handle)
{
 8002a3a:	b5b0      	push	{r4, r5, r7, lr}
 8002a3c:	b088      	sub	sp, #32
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
 8002a44:	466b      	mov	r3, sp
 8002a46:	461d      	mov	r5, r3
	char token[usart->rxSize];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7f98      	ldrb	r0, [r3, #30]
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	b2c1      	uxtb	r1, r0
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	00d4      	lsls	r4, r2, #3
 8002a62:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a66:	00cb      	lsls	r3, r1, #3
 8002a68:	b2c1      	uxtb	r1, r0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	f04f 0400 	mov.w	r4, #0
 8002a76:	00d4      	lsls	r4, r2, #3
 8002a78:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a7c:	00cb      	lsls	r3, r1, #3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	3307      	adds	r3, #7
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	ebad 0d03 	sub.w	sp, sp, r3
 8002a8a:	466b      	mov	r3, sp
 8002a8c:	3300      	adds	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
	memset(token, 0, usart->rxSize);
 8002a90:	69b8      	ldr	r0, [r7, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7f9b      	ldrb	r3, [r3, #30]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f000 f8d0 	bl	8002c3e <memset>
//	if (USART_BUFFER_EMPTY(usart->txIdx, usart->rxIdx)) {
//		SendSerialData(usart, "No data received from the terminal to read\r");
//		return;
//	}

	if (USART_RX_BUFFER_EMPTY(usart->rxBuffer)) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d061      	beq.n	8002b6c <SerialRead+0x132>
//	if (!strlen(usart->rxBuffer)) {
		return;
	}

	if (!usart->TxEndOfLineIdx) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d05e      	beq.n	8002b70 <SerialRead+0x136>
//		SendSerialData(usart, "No data with end-of-line received yet...\r");
		return;
	}

	if (usart->RxEndOfLineIdx == usart->TxEndOfLineIdx) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d058      	beq.n	8002b74 <SerialRead+0x13a>
		return;
	}

	char *dataStart = usart->rxBuffer + usart->rxIdx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
	char *dataEnd = strstr(dataStart, "\r");
 8002ad0:	210d      	movs	r1, #13
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f000 f8bb 	bl	8002c4e <strchr>
 8002ad8:	6138      	str	r0, [r7, #16]
	uint8_t bytes;
//	uint8_t bytes = dataEnd - dataStart;

	if (dataEnd == NULL) // wrap-around
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d125      	bne.n	8002b2c <SerialRead+0xf2>
	{
		char *lastChar = strchr(dataStart, '\0');
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7fd fb87 	bl	80001f4 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4413      	add	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
		bytes = lastChar - dataStart;
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	73fb      	strb	r3, [r7, #15]
//		bytes = &usart->rxBuffer[sizeof(usart->rxBuffer)-1] - dataStart;
		memcpy(token, dataStart, bytes);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f892 	bl	8002c28 <memcpy>
		dataEnd = strstr(usart->rxBuffer, "\r");
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	210d      	movs	r1, #13
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f89f 	bl	8002c4e <strchr>
 8002b10:	6138      	str	r0, [r7, #16]
		memcpy(token + bytes, usart->rxBuffer, dataEnd - usart->rxBuffer);
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	18d0      	adds	r0, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6999      	ldr	r1, [r3, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6992      	ldr	r2, [r2, #24]
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	f000 f87f 	bl	8002c28 <memcpy>
 8002b2a:	e009      	b.n	8002b40 <SerialRead+0x106>
	}
	else
	{
		bytes = dataEnd - dataStart;
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
		memcpy(token, dataStart, bytes);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6979      	ldr	r1, [r7, #20]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f874 	bl	8002c28 <memcpy>
	}

	ExecuteSerialData(usart, token, I2C_Handle);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff26 	bl	8002998 <ExecuteSerialData>

	usart->RxEndOfLineIdx++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002b52:	3301      	adds	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	usart->rxIdx = usart->txIdx;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002b68:	46ad      	mov	sp, r5
 8002b6a:	e005      	b.n	8002b78 <SerialRead+0x13e>
		return;
 8002b6c:	bf00      	nop
 8002b6e:	e002      	b.n	8002b76 <SerialRead+0x13c>
		return;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <SerialRead+0x13c>
		return;
 8002b74:	bf00      	nop
 8002b76:	46ad      	mov	sp, r5
//	usart->TxEndOfLineIdx =
}
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b86:	e003      	b.n	8002b90 <LoopCopyDataInit>

08002b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b8e:	3104      	adds	r1, #4

08002b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b98:	d3f6      	bcc.n	8002b88 <CopyDataInit>
  ldr  r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b9c:	e002      	b.n	8002ba4 <LoopFillZerobss>

08002b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ba0:	f842 3b04 	str.w	r3, [r2], #4

08002ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ba8:	d3f9      	bcc.n	8002b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002baa:	f7ff fe87 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f000 f817 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7ff fbe7 	bl	8002384 <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002bbc:	08003554 	.word	0x08003554
  ldr  r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bc4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002bc8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002bcc:	20000178 	.word	0x20000178

08002bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC_IRQHandler>
	...

08002bd4 <__errno>:
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <__errno+0x8>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000010 	.word	0x20000010

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1ba4      	subs	r4, r4, r6
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2500      	movs	r5, #0
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4e0b      	ldr	r6, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 fc34 	bl	8003460 <_init>
 8002bf8:	1ba4      	subs	r4, r4, r6
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	42a5      	cmp	r5, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c08:	4798      	blx	r3
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c12:	4798      	blx	r3
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	0800354c 	.word	0x0800354c
 8002c1c:	0800354c 	.word	0x0800354c
 8002c20:	0800354c 	.word	0x0800354c
 8002c24:	08003550 	.word	0x08003550

08002c28 <memcpy>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	1e43      	subs	r3, r0, #1
 8002c2c:	440a      	add	r2, r1
 8002c2e:	4291      	cmp	r1, r2
 8002c30:	d100      	bne.n	8002c34 <memcpy+0xc>
 8002c32:	bd10      	pop	{r4, pc}
 8002c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c3c:	e7f7      	b.n	8002c2e <memcpy+0x6>

08002c3e <memset>:
 8002c3e:	4402      	add	r2, r0
 8002c40:	4603      	mov	r3, r0
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d100      	bne.n	8002c48 <memset+0xa>
 8002c46:	4770      	bx	lr
 8002c48:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4c:	e7f9      	b.n	8002c42 <memset+0x4>

08002c4e <strchr>:
 8002c4e:	b2c9      	uxtb	r1, r1
 8002c50:	4603      	mov	r3, r0
 8002c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c56:	b11a      	cbz	r2, 8002c60 <strchr+0x12>
 8002c58:	428a      	cmp	r2, r1
 8002c5a:	d1f9      	bne.n	8002c50 <strchr+0x2>
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4770      	bx	lr
 8002c60:	2900      	cmp	r1, #0
 8002c62:	bf18      	it	ne
 8002c64:	2300      	movne	r3, #0
 8002c66:	e7f9      	b.n	8002c5c <strchr+0xe>

08002c68 <_vsiprintf_r>:
 8002c68:	b500      	push	{lr}
 8002c6a:	b09b      	sub	sp, #108	; 0x6c
 8002c6c:	9100      	str	r1, [sp, #0]
 8002c6e:	9104      	str	r1, [sp, #16]
 8002c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c74:	9105      	str	r1, [sp, #20]
 8002c76:	9102      	str	r1, [sp, #8]
 8002c78:	4905      	ldr	r1, [pc, #20]	; (8002c90 <_vsiprintf_r+0x28>)
 8002c7a:	9103      	str	r1, [sp, #12]
 8002c7c:	4669      	mov	r1, sp
 8002c7e:	f000 f86d 	bl	8002d5c <_svfiprintf_r>
 8002c82:	9b00      	ldr	r3, [sp, #0]
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	b01b      	add	sp, #108	; 0x6c
 8002c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c8e:	bf00      	nop
 8002c90:	ffff0208 	.word	0xffff0208

08002c94 <vsiprintf>:
 8002c94:	4613      	mov	r3, r2
 8002c96:	460a      	mov	r2, r1
 8002c98:	4601      	mov	r1, r0
 8002c9a:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <vsiprintf+0x10>)
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	f7ff bfe3 	b.w	8002c68 <_vsiprintf_r>
 8002ca2:	bf00      	nop
 8002ca4:	20000010 	.word	0x20000010

08002ca8 <__ssputs_r>:
 8002ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cac:	688e      	ldr	r6, [r1, #8]
 8002cae:	429e      	cmp	r6, r3
 8002cb0:	4682      	mov	sl, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	d837      	bhi.n	8002d2a <__ssputs_r+0x82>
 8002cba:	898a      	ldrh	r2, [r1, #12]
 8002cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cc0:	d031      	beq.n	8002d26 <__ssputs_r+0x7e>
 8002cc2:	6825      	ldr	r5, [r4, #0]
 8002cc4:	6909      	ldr	r1, [r1, #16]
 8002cc6:	1a6f      	subs	r7, r5, r1
 8002cc8:	6965      	ldr	r5, [r4, #20]
 8002cca:	2302      	movs	r3, #2
 8002ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002cd4:	f109 0301 	add.w	r3, r9, #1
 8002cd8:	443b      	add	r3, r7
 8002cda:	429d      	cmp	r5, r3
 8002cdc:	bf38      	it	cc
 8002cde:	461d      	movcc	r5, r3
 8002ce0:	0553      	lsls	r3, r2, #21
 8002ce2:	d530      	bpl.n	8002d46 <__ssputs_r+0x9e>
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f000 fb21 	bl	800332c <_malloc_r>
 8002cea:	4606      	mov	r6, r0
 8002cec:	b950      	cbnz	r0, 8002d04 <__ssputs_r+0x5c>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	f8ca 3000 	str.w	r3, [sl]
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfa:	81a3      	strh	r3, [r4, #12]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d04:	463a      	mov	r2, r7
 8002d06:	6921      	ldr	r1, [r4, #16]
 8002d08:	f7ff ff8e 	bl	8002c28 <memcpy>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d16:	81a3      	strh	r3, [r4, #12]
 8002d18:	6126      	str	r6, [r4, #16]
 8002d1a:	6165      	str	r5, [r4, #20]
 8002d1c:	443e      	add	r6, r7
 8002d1e:	1bed      	subs	r5, r5, r7
 8002d20:	6026      	str	r6, [r4, #0]
 8002d22:	60a5      	str	r5, [r4, #8]
 8002d24:	464e      	mov	r6, r9
 8002d26:	454e      	cmp	r6, r9
 8002d28:	d900      	bls.n	8002d2c <__ssputs_r+0x84>
 8002d2a:	464e      	mov	r6, r9
 8002d2c:	4632      	mov	r2, r6
 8002d2e:	4641      	mov	r1, r8
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	f000 fa93 	bl	800325c <memmove>
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	1b9b      	subs	r3, r3, r6
 8002d3a:	60a3      	str	r3, [r4, #8]
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	441e      	add	r6, r3
 8002d40:	6026      	str	r6, [r4, #0]
 8002d42:	2000      	movs	r0, #0
 8002d44:	e7dc      	b.n	8002d00 <__ssputs_r+0x58>
 8002d46:	462a      	mov	r2, r5
 8002d48:	f000 fb4a 	bl	80033e0 <_realloc_r>
 8002d4c:	4606      	mov	r6, r0
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d1e2      	bne.n	8002d18 <__ssputs_r+0x70>
 8002d52:	6921      	ldr	r1, [r4, #16]
 8002d54:	4650      	mov	r0, sl
 8002d56:	f000 fa9b 	bl	8003290 <_free_r>
 8002d5a:	e7c8      	b.n	8002cee <__ssputs_r+0x46>

08002d5c <_svfiprintf_r>:
 8002d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d60:	461d      	mov	r5, r3
 8002d62:	898b      	ldrh	r3, [r1, #12]
 8002d64:	061f      	lsls	r7, r3, #24
 8002d66:	b09d      	sub	sp, #116	; 0x74
 8002d68:	4680      	mov	r8, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	d50f      	bpl.n	8002d90 <_svfiprintf_r+0x34>
 8002d70:	690b      	ldr	r3, [r1, #16]
 8002d72:	b96b      	cbnz	r3, 8002d90 <_svfiprintf_r+0x34>
 8002d74:	2140      	movs	r1, #64	; 0x40
 8002d76:	f000 fad9 	bl	800332c <_malloc_r>
 8002d7a:	6020      	str	r0, [r4, #0]
 8002d7c:	6120      	str	r0, [r4, #16]
 8002d7e:	b928      	cbnz	r0, 8002d8c <_svfiprintf_r+0x30>
 8002d80:	230c      	movs	r3, #12
 8002d82:	f8c8 3000 	str.w	r3, [r8]
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d8a:	e0c8      	b.n	8002f1e <_svfiprintf_r+0x1c2>
 8002d8c:	2340      	movs	r3, #64	; 0x40
 8002d8e:	6163      	str	r3, [r4, #20]
 8002d90:	2300      	movs	r3, #0
 8002d92:	9309      	str	r3, [sp, #36]	; 0x24
 8002d94:	2320      	movs	r3, #32
 8002d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d9a:	2330      	movs	r3, #48	; 0x30
 8002d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da0:	9503      	str	r5, [sp, #12]
 8002da2:	f04f 0b01 	mov.w	fp, #1
 8002da6:	4637      	mov	r7, r6
 8002da8:	463d      	mov	r5, r7
 8002daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dae:	b10b      	cbz	r3, 8002db4 <_svfiprintf_r+0x58>
 8002db0:	2b25      	cmp	r3, #37	; 0x25
 8002db2:	d13e      	bne.n	8002e32 <_svfiprintf_r+0xd6>
 8002db4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002db8:	d00b      	beq.n	8002dd2 <_svfiprintf_r+0x76>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	f7ff ff71 	bl	8002ca8 <__ssputs_r>
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	f000 80a4 	beq.w	8002f14 <_svfiprintf_r+0x1b8>
 8002dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dce:	4453      	add	r3, sl
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd2:	783b      	ldrb	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 809d 	beq.w	8002f14 <_svfiprintf_r+0x1b8>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	9307      	str	r3, [sp, #28]
 8002de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dec:	931a      	str	r3, [sp, #104]	; 0x68
 8002dee:	462f      	mov	r7, r5
 8002df0:	2205      	movs	r2, #5
 8002df2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002df6:	4850      	ldr	r0, [pc, #320]	; (8002f38 <_svfiprintf_r+0x1dc>)
 8002df8:	f7fd fa0a 	bl	8000210 <memchr>
 8002dfc:	9b04      	ldr	r3, [sp, #16]
 8002dfe:	b9d0      	cbnz	r0, 8002e36 <_svfiprintf_r+0xda>
 8002e00:	06d9      	lsls	r1, r3, #27
 8002e02:	bf44      	itt	mi
 8002e04:	2220      	movmi	r2, #32
 8002e06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e0a:	071a      	lsls	r2, r3, #28
 8002e0c:	bf44      	itt	mi
 8002e0e:	222b      	movmi	r2, #43	; 0x2b
 8002e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e14:	782a      	ldrb	r2, [r5, #0]
 8002e16:	2a2a      	cmp	r2, #42	; 0x2a
 8002e18:	d015      	beq.n	8002e46 <_svfiprintf_r+0xea>
 8002e1a:	9a07      	ldr	r2, [sp, #28]
 8002e1c:	462f      	mov	r7, r5
 8002e1e:	2000      	movs	r0, #0
 8002e20:	250a      	movs	r5, #10
 8002e22:	4639      	mov	r1, r7
 8002e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e28:	3b30      	subs	r3, #48	; 0x30
 8002e2a:	2b09      	cmp	r3, #9
 8002e2c:	d94d      	bls.n	8002eca <_svfiprintf_r+0x16e>
 8002e2e:	b1b8      	cbz	r0, 8002e60 <_svfiprintf_r+0x104>
 8002e30:	e00f      	b.n	8002e52 <_svfiprintf_r+0xf6>
 8002e32:	462f      	mov	r7, r5
 8002e34:	e7b8      	b.n	8002da8 <_svfiprintf_r+0x4c>
 8002e36:	4a40      	ldr	r2, [pc, #256]	; (8002f38 <_svfiprintf_r+0x1dc>)
 8002e38:	1a80      	subs	r0, r0, r2
 8002e3a:	fa0b f000 	lsl.w	r0, fp, r0
 8002e3e:	4318      	orrs	r0, r3
 8002e40:	9004      	str	r0, [sp, #16]
 8002e42:	463d      	mov	r5, r7
 8002e44:	e7d3      	b.n	8002dee <_svfiprintf_r+0x92>
 8002e46:	9a03      	ldr	r2, [sp, #12]
 8002e48:	1d11      	adds	r1, r2, #4
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	9103      	str	r1, [sp, #12]
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	db01      	blt.n	8002e56 <_svfiprintf_r+0xfa>
 8002e52:	9207      	str	r2, [sp, #28]
 8002e54:	e004      	b.n	8002e60 <_svfiprintf_r+0x104>
 8002e56:	4252      	negs	r2, r2
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	9207      	str	r2, [sp, #28]
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	783b      	ldrb	r3, [r7, #0]
 8002e62:	2b2e      	cmp	r3, #46	; 0x2e
 8002e64:	d10c      	bne.n	8002e80 <_svfiprintf_r+0x124>
 8002e66:	787b      	ldrb	r3, [r7, #1]
 8002e68:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6a:	d133      	bne.n	8002ed4 <_svfiprintf_r+0x178>
 8002e6c:	9b03      	ldr	r3, [sp, #12]
 8002e6e:	1d1a      	adds	r2, r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	9203      	str	r2, [sp, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bfb8      	it	lt
 8002e78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e7c:	3702      	adds	r7, #2
 8002e7e:	9305      	str	r3, [sp, #20]
 8002e80:	4d2e      	ldr	r5, [pc, #184]	; (8002f3c <_svfiprintf_r+0x1e0>)
 8002e82:	7839      	ldrb	r1, [r7, #0]
 8002e84:	2203      	movs	r2, #3
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd f9c2 	bl	8000210 <memchr>
 8002e8c:	b138      	cbz	r0, 8002e9e <_svfiprintf_r+0x142>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	1b40      	subs	r0, r0, r5
 8002e92:	fa03 f000 	lsl.w	r0, r3, r0
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	4303      	orrs	r3, r0
 8002e9a:	3701      	adds	r7, #1
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	7839      	ldrb	r1, [r7, #0]
 8002ea0:	4827      	ldr	r0, [pc, #156]	; (8002f40 <_svfiprintf_r+0x1e4>)
 8002ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ea6:	2206      	movs	r2, #6
 8002ea8:	1c7e      	adds	r6, r7, #1
 8002eaa:	f7fd f9b1 	bl	8000210 <memchr>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d038      	beq.n	8002f24 <_svfiprintf_r+0x1c8>
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <_svfiprintf_r+0x1e8>)
 8002eb4:	bb13      	cbnz	r3, 8002efc <_svfiprintf_r+0x1a0>
 8002eb6:	9b03      	ldr	r3, [sp, #12]
 8002eb8:	3307      	adds	r3, #7
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	9303      	str	r3, [sp, #12]
 8002ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec4:	444b      	add	r3, r9
 8002ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec8:	e76d      	b.n	8002da6 <_svfiprintf_r+0x4a>
 8002eca:	fb05 3202 	mla	r2, r5, r2, r3
 8002ece:	2001      	movs	r0, #1
 8002ed0:	460f      	mov	r7, r1
 8002ed2:	e7a6      	b.n	8002e22 <_svfiprintf_r+0xc6>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	3701      	adds	r7, #1
 8002ed8:	9305      	str	r3, [sp, #20]
 8002eda:	4619      	mov	r1, r3
 8002edc:	250a      	movs	r5, #10
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ee4:	3a30      	subs	r2, #48	; 0x30
 8002ee6:	2a09      	cmp	r2, #9
 8002ee8:	d903      	bls.n	8002ef2 <_svfiprintf_r+0x196>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0c8      	beq.n	8002e80 <_svfiprintf_r+0x124>
 8002eee:	9105      	str	r1, [sp, #20]
 8002ef0:	e7c6      	b.n	8002e80 <_svfiprintf_r+0x124>
 8002ef2:	fb05 2101 	mla	r1, r5, r1, r2
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	4607      	mov	r7, r0
 8002efa:	e7f0      	b.n	8002ede <_svfiprintf_r+0x182>
 8002efc:	ab03      	add	r3, sp, #12
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4622      	mov	r2, r4
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <_svfiprintf_r+0x1ec>)
 8002f04:	a904      	add	r1, sp, #16
 8002f06:	4640      	mov	r0, r8
 8002f08:	f3af 8000 	nop.w
 8002f0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002f10:	4681      	mov	r9, r0
 8002f12:	d1d6      	bne.n	8002ec2 <_svfiprintf_r+0x166>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	065b      	lsls	r3, r3, #25
 8002f18:	f53f af35 	bmi.w	8002d86 <_svfiprintf_r+0x2a>
 8002f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f1e:	b01d      	add	sp, #116	; 0x74
 8002f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f24:	ab03      	add	r3, sp, #12
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4622      	mov	r2, r4
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <_svfiprintf_r+0x1ec>)
 8002f2c:	a904      	add	r1, sp, #16
 8002f2e:	4640      	mov	r0, r8
 8002f30:	f000 f882 	bl	8003038 <_printf_i>
 8002f34:	e7ea      	b.n	8002f0c <_svfiprintf_r+0x1b0>
 8002f36:	bf00      	nop
 8002f38:	08003510 	.word	0x08003510
 8002f3c:	08003516 	.word	0x08003516
 8002f40:	0800351a 	.word	0x0800351a
 8002f44:	00000000 	.word	0x00000000
 8002f48:	08002ca9 	.word	0x08002ca9

08002f4c <_printf_common>:
 8002f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f50:	4691      	mov	r9, r2
 8002f52:	461f      	mov	r7, r3
 8002f54:	688a      	ldr	r2, [r1, #8]
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bfb8      	it	lt
 8002f60:	4613      	movlt	r3, r2
 8002f62:	f8c9 3000 	str.w	r3, [r9]
 8002f66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	b112      	cbz	r2, 8002f76 <_printf_common+0x2a>
 8002f70:	3301      	adds	r3, #1
 8002f72:	f8c9 3000 	str.w	r3, [r9]
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	0699      	lsls	r1, r3, #26
 8002f7a:	bf42      	ittt	mi
 8002f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f80:	3302      	addmi	r3, #2
 8002f82:	f8c9 3000 	strmi.w	r3, [r9]
 8002f86:	6825      	ldr	r5, [r4, #0]
 8002f88:	f015 0506 	ands.w	r5, r5, #6
 8002f8c:	d107      	bne.n	8002f9e <_printf_common+0x52>
 8002f8e:	f104 0a19 	add.w	sl, r4, #25
 8002f92:	68e3      	ldr	r3, [r4, #12]
 8002f94:	f8d9 2000 	ldr.w	r2, [r9]
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	42ab      	cmp	r3, r5
 8002f9c:	dc28      	bgt.n	8002ff0 <_printf_common+0xa4>
 8002f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	3300      	adds	r3, #0
 8002fa6:	bf18      	it	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	0692      	lsls	r2, r2, #26
 8002fac:	d42d      	bmi.n	800300a <_printf_common+0xbe>
 8002fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fb2:	4639      	mov	r1, r7
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	47c0      	blx	r8
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d020      	beq.n	8002ffe <_printf_common+0xb2>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	68e5      	ldr	r5, [r4, #12]
 8002fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8002fc4:	f003 0306 	and.w	r3, r3, #6
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	bf08      	it	eq
 8002fcc:	1aad      	subeq	r5, r5, r2
 8002fce:	68a3      	ldr	r3, [r4, #8]
 8002fd0:	6922      	ldr	r2, [r4, #16]
 8002fd2:	bf0c      	ite	eq
 8002fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd8:	2500      	movne	r5, #0
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bfc4      	itt	gt
 8002fde:	1a9b      	subgt	r3, r3, r2
 8002fe0:	18ed      	addgt	r5, r5, r3
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	341a      	adds	r4, #26
 8002fe8:	454d      	cmp	r5, r9
 8002fea:	d11a      	bne.n	8003022 <_printf_common+0xd6>
 8002fec:	2000      	movs	r0, #0
 8002fee:	e008      	b.n	8003002 <_printf_common+0xb6>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4652      	mov	r2, sl
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	47c0      	blx	r8
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	d103      	bne.n	8003006 <_printf_common+0xba>
 8002ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003006:	3501      	adds	r5, #1
 8003008:	e7c3      	b.n	8002f92 <_printf_common+0x46>
 800300a:	18e1      	adds	r1, r4, r3
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	2030      	movs	r0, #48	; 0x30
 8003010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003014:	4422      	add	r2, r4
 8003016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800301a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800301e:	3302      	adds	r3, #2
 8003020:	e7c5      	b.n	8002fae <_printf_common+0x62>
 8003022:	2301      	movs	r3, #1
 8003024:	4622      	mov	r2, r4
 8003026:	4639      	mov	r1, r7
 8003028:	4630      	mov	r0, r6
 800302a:	47c0      	blx	r8
 800302c:	3001      	adds	r0, #1
 800302e:	d0e6      	beq.n	8002ffe <_printf_common+0xb2>
 8003030:	f109 0901 	add.w	r9, r9, #1
 8003034:	e7d8      	b.n	8002fe8 <_printf_common+0x9c>
	...

08003038 <_printf_i>:
 8003038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800303c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003040:	460c      	mov	r4, r1
 8003042:	7e09      	ldrb	r1, [r1, #24]
 8003044:	b085      	sub	sp, #20
 8003046:	296e      	cmp	r1, #110	; 0x6e
 8003048:	4617      	mov	r7, r2
 800304a:	4606      	mov	r6, r0
 800304c:	4698      	mov	r8, r3
 800304e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003050:	f000 80b3 	beq.w	80031ba <_printf_i+0x182>
 8003054:	d822      	bhi.n	800309c <_printf_i+0x64>
 8003056:	2963      	cmp	r1, #99	; 0x63
 8003058:	d036      	beq.n	80030c8 <_printf_i+0x90>
 800305a:	d80a      	bhi.n	8003072 <_printf_i+0x3a>
 800305c:	2900      	cmp	r1, #0
 800305e:	f000 80b9 	beq.w	80031d4 <_printf_i+0x19c>
 8003062:	2958      	cmp	r1, #88	; 0x58
 8003064:	f000 8083 	beq.w	800316e <_printf_i+0x136>
 8003068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800306c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003070:	e032      	b.n	80030d8 <_printf_i+0xa0>
 8003072:	2964      	cmp	r1, #100	; 0x64
 8003074:	d001      	beq.n	800307a <_printf_i+0x42>
 8003076:	2969      	cmp	r1, #105	; 0x69
 8003078:	d1f6      	bne.n	8003068 <_printf_i+0x30>
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	0605      	lsls	r5, r0, #24
 8003080:	f103 0104 	add.w	r1, r3, #4
 8003084:	d52a      	bpl.n	80030dc <_printf_i+0xa4>
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da03      	bge.n	8003096 <_printf_i+0x5e>
 800308e:	222d      	movs	r2, #45	; 0x2d
 8003090:	425b      	negs	r3, r3
 8003092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003096:	486f      	ldr	r0, [pc, #444]	; (8003254 <_printf_i+0x21c>)
 8003098:	220a      	movs	r2, #10
 800309a:	e039      	b.n	8003110 <_printf_i+0xd8>
 800309c:	2973      	cmp	r1, #115	; 0x73
 800309e:	f000 809d 	beq.w	80031dc <_printf_i+0x1a4>
 80030a2:	d808      	bhi.n	80030b6 <_printf_i+0x7e>
 80030a4:	296f      	cmp	r1, #111	; 0x6f
 80030a6:	d020      	beq.n	80030ea <_printf_i+0xb2>
 80030a8:	2970      	cmp	r1, #112	; 0x70
 80030aa:	d1dd      	bne.n	8003068 <_printf_i+0x30>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	e003      	b.n	80030be <_printf_i+0x86>
 80030b6:	2975      	cmp	r1, #117	; 0x75
 80030b8:	d017      	beq.n	80030ea <_printf_i+0xb2>
 80030ba:	2978      	cmp	r1, #120	; 0x78
 80030bc:	d1d4      	bne.n	8003068 <_printf_i+0x30>
 80030be:	2378      	movs	r3, #120	; 0x78
 80030c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030c4:	4864      	ldr	r0, [pc, #400]	; (8003258 <_printf_i+0x220>)
 80030c6:	e055      	b.n	8003174 <_printf_i+0x13c>
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	1d19      	adds	r1, r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6011      	str	r1, [r2, #0]
 80030d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d8:	2301      	movs	r3, #1
 80030da:	e08c      	b.n	80031f6 <_printf_i+0x1be>
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030e4:	bf18      	it	ne
 80030e6:	b21b      	sxthne	r3, r3
 80030e8:	e7cf      	b.n	800308a <_printf_i+0x52>
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	6825      	ldr	r5, [r4, #0]
 80030ee:	1d18      	adds	r0, r3, #4
 80030f0:	6010      	str	r0, [r2, #0]
 80030f2:	0628      	lsls	r0, r5, #24
 80030f4:	d501      	bpl.n	80030fa <_printf_i+0xc2>
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	e002      	b.n	8003100 <_printf_i+0xc8>
 80030fa:	0668      	lsls	r0, r5, #25
 80030fc:	d5fb      	bpl.n	80030f6 <_printf_i+0xbe>
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	4854      	ldr	r0, [pc, #336]	; (8003254 <_printf_i+0x21c>)
 8003102:	296f      	cmp	r1, #111	; 0x6f
 8003104:	bf14      	ite	ne
 8003106:	220a      	movne	r2, #10
 8003108:	2208      	moveq	r2, #8
 800310a:	2100      	movs	r1, #0
 800310c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003110:	6865      	ldr	r5, [r4, #4]
 8003112:	60a5      	str	r5, [r4, #8]
 8003114:	2d00      	cmp	r5, #0
 8003116:	f2c0 8095 	blt.w	8003244 <_printf_i+0x20c>
 800311a:	6821      	ldr	r1, [r4, #0]
 800311c:	f021 0104 	bic.w	r1, r1, #4
 8003120:	6021      	str	r1, [r4, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <_printf_i+0x16a>
 8003126:	2d00      	cmp	r5, #0
 8003128:	f040 808e 	bne.w	8003248 <_printf_i+0x210>
 800312c:	4665      	mov	r5, ip
 800312e:	2a08      	cmp	r2, #8
 8003130:	d10b      	bne.n	800314a <_printf_i+0x112>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d508      	bpl.n	800314a <_printf_i+0x112>
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	bfde      	ittt	le
 8003140:	2330      	movle	r3, #48	; 0x30
 8003142:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003146:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800314a:	ebac 0305 	sub.w	r3, ip, r5
 800314e:	6123      	str	r3, [r4, #16]
 8003150:	f8cd 8000 	str.w	r8, [sp]
 8003154:	463b      	mov	r3, r7
 8003156:	aa03      	add	r2, sp, #12
 8003158:	4621      	mov	r1, r4
 800315a:	4630      	mov	r0, r6
 800315c:	f7ff fef6 	bl	8002f4c <_printf_common>
 8003160:	3001      	adds	r0, #1
 8003162:	d14d      	bne.n	8003200 <_printf_i+0x1c8>
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003168:	b005      	add	sp, #20
 800316a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800316e:	4839      	ldr	r0, [pc, #228]	; (8003254 <_printf_i+0x21c>)
 8003170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1d1d      	adds	r5, r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6015      	str	r5, [r2, #0]
 800317e:	060a      	lsls	r2, r1, #24
 8003180:	d50b      	bpl.n	800319a <_printf_i+0x162>
 8003182:	07ca      	lsls	r2, r1, #31
 8003184:	bf44      	itt	mi
 8003186:	f041 0120 	orrmi.w	r1, r1, #32
 800318a:	6021      	strmi	r1, [r4, #0]
 800318c:	b91b      	cbnz	r3, 8003196 <_printf_i+0x15e>
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	f022 0220 	bic.w	r2, r2, #32
 8003194:	6022      	str	r2, [r4, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	e7b7      	b.n	800310a <_printf_i+0xd2>
 800319a:	064d      	lsls	r5, r1, #25
 800319c:	bf48      	it	mi
 800319e:	b29b      	uxthmi	r3, r3
 80031a0:	e7ef      	b.n	8003182 <_printf_i+0x14a>
 80031a2:	4665      	mov	r5, ip
 80031a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80031a8:	fb02 3311 	mls	r3, r2, r1, r3
 80031ac:	5cc3      	ldrb	r3, [r0, r3]
 80031ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031b2:	460b      	mov	r3, r1
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d1f5      	bne.n	80031a4 <_printf_i+0x16c>
 80031b8:	e7b9      	b.n	800312e <_printf_i+0xf6>
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	6825      	ldr	r5, [r4, #0]
 80031be:	6961      	ldr	r1, [r4, #20]
 80031c0:	1d18      	adds	r0, r3, #4
 80031c2:	6010      	str	r0, [r2, #0]
 80031c4:	0628      	lsls	r0, r5, #24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	d501      	bpl.n	80031ce <_printf_i+0x196>
 80031ca:	6019      	str	r1, [r3, #0]
 80031cc:	e002      	b.n	80031d4 <_printf_i+0x19c>
 80031ce:	066a      	lsls	r2, r5, #25
 80031d0:	d5fb      	bpl.n	80031ca <_printf_i+0x192>
 80031d2:	8019      	strh	r1, [r3, #0]
 80031d4:	2300      	movs	r3, #0
 80031d6:	6123      	str	r3, [r4, #16]
 80031d8:	4665      	mov	r5, ip
 80031da:	e7b9      	b.n	8003150 <_printf_i+0x118>
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	1d19      	adds	r1, r3, #4
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	681d      	ldr	r5, [r3, #0]
 80031e4:	6862      	ldr	r2, [r4, #4]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7fd f811 	bl	8000210 <memchr>
 80031ee:	b108      	cbz	r0, 80031f4 <_printf_i+0x1bc>
 80031f0:	1b40      	subs	r0, r0, r5
 80031f2:	6060      	str	r0, [r4, #4]
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	6123      	str	r3, [r4, #16]
 80031f8:	2300      	movs	r3, #0
 80031fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031fe:	e7a7      	b.n	8003150 <_printf_i+0x118>
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	462a      	mov	r2, r5
 8003204:	4639      	mov	r1, r7
 8003206:	4630      	mov	r0, r6
 8003208:	47c0      	blx	r8
 800320a:	3001      	adds	r0, #1
 800320c:	d0aa      	beq.n	8003164 <_printf_i+0x12c>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	d413      	bmi.n	800323c <_printf_i+0x204>
 8003214:	68e0      	ldr	r0, [r4, #12]
 8003216:	9b03      	ldr	r3, [sp, #12]
 8003218:	4298      	cmp	r0, r3
 800321a:	bfb8      	it	lt
 800321c:	4618      	movlt	r0, r3
 800321e:	e7a3      	b.n	8003168 <_printf_i+0x130>
 8003220:	2301      	movs	r3, #1
 8003222:	464a      	mov	r2, r9
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	47c0      	blx	r8
 800322a:	3001      	adds	r0, #1
 800322c:	d09a      	beq.n	8003164 <_printf_i+0x12c>
 800322e:	3501      	adds	r5, #1
 8003230:	68e3      	ldr	r3, [r4, #12]
 8003232:	9a03      	ldr	r2, [sp, #12]
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	42ab      	cmp	r3, r5
 8003238:	dcf2      	bgt.n	8003220 <_printf_i+0x1e8>
 800323a:	e7eb      	b.n	8003214 <_printf_i+0x1dc>
 800323c:	2500      	movs	r5, #0
 800323e:	f104 0919 	add.w	r9, r4, #25
 8003242:	e7f5      	b.n	8003230 <_printf_i+0x1f8>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ac      	bne.n	80031a2 <_printf_i+0x16a>
 8003248:	7803      	ldrb	r3, [r0, #0]
 800324a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800324e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003252:	e76c      	b.n	800312e <_printf_i+0xf6>
 8003254:	08003521 	.word	0x08003521
 8003258:	08003532 	.word	0x08003532

0800325c <memmove>:
 800325c:	4288      	cmp	r0, r1
 800325e:	b510      	push	{r4, lr}
 8003260:	eb01 0302 	add.w	r3, r1, r2
 8003264:	d807      	bhi.n	8003276 <memmove+0x1a>
 8003266:	1e42      	subs	r2, r0, #1
 8003268:	4299      	cmp	r1, r3
 800326a:	d00a      	beq.n	8003282 <memmove+0x26>
 800326c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003270:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003274:	e7f8      	b.n	8003268 <memmove+0xc>
 8003276:	4283      	cmp	r3, r0
 8003278:	d9f5      	bls.n	8003266 <memmove+0xa>
 800327a:	1881      	adds	r1, r0, r2
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	42d3      	cmn	r3, r2
 8003280:	d100      	bne.n	8003284 <memmove+0x28>
 8003282:	bd10      	pop	{r4, pc}
 8003284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003288:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800328c:	e7f7      	b.n	800327e <memmove+0x22>
	...

08003290 <_free_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4605      	mov	r5, r0
 8003294:	2900      	cmp	r1, #0
 8003296:	d045      	beq.n	8003324 <_free_r+0x94>
 8003298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800329c:	1f0c      	subs	r4, r1, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bfb8      	it	lt
 80032a2:	18e4      	addlt	r4, r4, r3
 80032a4:	f000 f8d2 	bl	800344c <__malloc_lock>
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <_free_r+0x98>)
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	4610      	mov	r0, r2
 80032ae:	b933      	cbnz	r3, 80032be <_free_r+0x2e>
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6014      	str	r4, [r2, #0]
 80032b4:	4628      	mov	r0, r5
 80032b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ba:	f000 b8c8 	b.w	800344e <__malloc_unlock>
 80032be:	42a3      	cmp	r3, r4
 80032c0:	d90c      	bls.n	80032dc <_free_r+0x4c>
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	1862      	adds	r2, r4, r1
 80032c6:	4293      	cmp	r3, r2
 80032c8:	bf04      	itt	eq
 80032ca:	681a      	ldreq	r2, [r3, #0]
 80032cc:	685b      	ldreq	r3, [r3, #4]
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	bf04      	itt	eq
 80032d2:	1852      	addeq	r2, r2, r1
 80032d4:	6022      	streq	r2, [r4, #0]
 80032d6:	6004      	str	r4, [r0, #0]
 80032d8:	e7ec      	b.n	80032b4 <_free_r+0x24>
 80032da:	4613      	mov	r3, r2
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	b10a      	cbz	r2, 80032e4 <_free_r+0x54>
 80032e0:	42a2      	cmp	r2, r4
 80032e2:	d9fa      	bls.n	80032da <_free_r+0x4a>
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	1858      	adds	r0, r3, r1
 80032e8:	42a0      	cmp	r0, r4
 80032ea:	d10b      	bne.n	8003304 <_free_r+0x74>
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	4401      	add	r1, r0
 80032f0:	1858      	adds	r0, r3, r1
 80032f2:	4282      	cmp	r2, r0
 80032f4:	6019      	str	r1, [r3, #0]
 80032f6:	d1dd      	bne.n	80032b4 <_free_r+0x24>
 80032f8:	6810      	ldr	r0, [r2, #0]
 80032fa:	6852      	ldr	r2, [r2, #4]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	4401      	add	r1, r0
 8003300:	6019      	str	r1, [r3, #0]
 8003302:	e7d7      	b.n	80032b4 <_free_r+0x24>
 8003304:	d902      	bls.n	800330c <_free_r+0x7c>
 8003306:	230c      	movs	r3, #12
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	e7d3      	b.n	80032b4 <_free_r+0x24>
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	1821      	adds	r1, r4, r0
 8003310:	428a      	cmp	r2, r1
 8003312:	bf04      	itt	eq
 8003314:	6811      	ldreq	r1, [r2, #0]
 8003316:	6852      	ldreq	r2, [r2, #4]
 8003318:	6062      	str	r2, [r4, #4]
 800331a:	bf04      	itt	eq
 800331c:	1809      	addeq	r1, r1, r0
 800331e:	6021      	streq	r1, [r4, #0]
 8003320:	605c      	str	r4, [r3, #4]
 8003322:	e7c7      	b.n	80032b4 <_free_r+0x24>
 8003324:	bd38      	pop	{r3, r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	200000b0 	.word	0x200000b0

0800332c <_malloc_r>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	1ccd      	adds	r5, r1, #3
 8003330:	f025 0503 	bic.w	r5, r5, #3
 8003334:	3508      	adds	r5, #8
 8003336:	2d0c      	cmp	r5, #12
 8003338:	bf38      	it	cc
 800333a:	250c      	movcc	r5, #12
 800333c:	2d00      	cmp	r5, #0
 800333e:	4606      	mov	r6, r0
 8003340:	db01      	blt.n	8003346 <_malloc_r+0x1a>
 8003342:	42a9      	cmp	r1, r5
 8003344:	d903      	bls.n	800334e <_malloc_r+0x22>
 8003346:	230c      	movs	r3, #12
 8003348:	6033      	str	r3, [r6, #0]
 800334a:	2000      	movs	r0, #0
 800334c:	bd70      	pop	{r4, r5, r6, pc}
 800334e:	f000 f87d 	bl	800344c <__malloc_lock>
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <_malloc_r+0xac>)
 8003354:	6814      	ldr	r4, [r2, #0]
 8003356:	4621      	mov	r1, r4
 8003358:	b991      	cbnz	r1, 8003380 <_malloc_r+0x54>
 800335a:	4c20      	ldr	r4, [pc, #128]	; (80033dc <_malloc_r+0xb0>)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	b91b      	cbnz	r3, 8003368 <_malloc_r+0x3c>
 8003360:	4630      	mov	r0, r6
 8003362:	f000 f863 	bl	800342c <_sbrk_r>
 8003366:	6020      	str	r0, [r4, #0]
 8003368:	4629      	mov	r1, r5
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f85e 	bl	800342c <_sbrk_r>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d124      	bne.n	80033be <_malloc_r+0x92>
 8003374:	230c      	movs	r3, #12
 8003376:	6033      	str	r3, [r6, #0]
 8003378:	4630      	mov	r0, r6
 800337a:	f000 f868 	bl	800344e <__malloc_unlock>
 800337e:	e7e4      	b.n	800334a <_malloc_r+0x1e>
 8003380:	680b      	ldr	r3, [r1, #0]
 8003382:	1b5b      	subs	r3, r3, r5
 8003384:	d418      	bmi.n	80033b8 <_malloc_r+0x8c>
 8003386:	2b0b      	cmp	r3, #11
 8003388:	d90f      	bls.n	80033aa <_malloc_r+0x7e>
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	50cd      	str	r5, [r1, r3]
 800338e:	18cc      	adds	r4, r1, r3
 8003390:	4630      	mov	r0, r6
 8003392:	f000 f85c 	bl	800344e <__malloc_unlock>
 8003396:	f104 000b 	add.w	r0, r4, #11
 800339a:	1d23      	adds	r3, r4, #4
 800339c:	f020 0007 	bic.w	r0, r0, #7
 80033a0:	1ac3      	subs	r3, r0, r3
 80033a2:	d0d3      	beq.n	800334c <_malloc_r+0x20>
 80033a4:	425a      	negs	r2, r3
 80033a6:	50e2      	str	r2, [r4, r3]
 80033a8:	e7d0      	b.n	800334c <_malloc_r+0x20>
 80033aa:	428c      	cmp	r4, r1
 80033ac:	684b      	ldr	r3, [r1, #4]
 80033ae:	bf16      	itet	ne
 80033b0:	6063      	strne	r3, [r4, #4]
 80033b2:	6013      	streq	r3, [r2, #0]
 80033b4:	460c      	movne	r4, r1
 80033b6:	e7eb      	b.n	8003390 <_malloc_r+0x64>
 80033b8:	460c      	mov	r4, r1
 80033ba:	6849      	ldr	r1, [r1, #4]
 80033bc:	e7cc      	b.n	8003358 <_malloc_r+0x2c>
 80033be:	1cc4      	adds	r4, r0, #3
 80033c0:	f024 0403 	bic.w	r4, r4, #3
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	d005      	beq.n	80033d4 <_malloc_r+0xa8>
 80033c8:	1a21      	subs	r1, r4, r0
 80033ca:	4630      	mov	r0, r6
 80033cc:	f000 f82e 	bl	800342c <_sbrk_r>
 80033d0:	3001      	adds	r0, #1
 80033d2:	d0cf      	beq.n	8003374 <_malloc_r+0x48>
 80033d4:	6025      	str	r5, [r4, #0]
 80033d6:	e7db      	b.n	8003390 <_malloc_r+0x64>
 80033d8:	200000b0 	.word	0x200000b0
 80033dc:	200000b4 	.word	0x200000b4

080033e0 <_realloc_r>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4607      	mov	r7, r0
 80033e4:	4614      	mov	r4, r2
 80033e6:	460e      	mov	r6, r1
 80033e8:	b921      	cbnz	r1, 80033f4 <_realloc_r+0x14>
 80033ea:	4611      	mov	r1, r2
 80033ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033f0:	f7ff bf9c 	b.w	800332c <_malloc_r>
 80033f4:	b922      	cbnz	r2, 8003400 <_realloc_r+0x20>
 80033f6:	f7ff ff4b 	bl	8003290 <_free_r>
 80033fa:	4625      	mov	r5, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003400:	f000 f826 	bl	8003450 <_malloc_usable_size_r>
 8003404:	42a0      	cmp	r0, r4
 8003406:	d20f      	bcs.n	8003428 <_realloc_r+0x48>
 8003408:	4621      	mov	r1, r4
 800340a:	4638      	mov	r0, r7
 800340c:	f7ff ff8e 	bl	800332c <_malloc_r>
 8003410:	4605      	mov	r5, r0
 8003412:	2800      	cmp	r0, #0
 8003414:	d0f2      	beq.n	80033fc <_realloc_r+0x1c>
 8003416:	4631      	mov	r1, r6
 8003418:	4622      	mov	r2, r4
 800341a:	f7ff fc05 	bl	8002c28 <memcpy>
 800341e:	4631      	mov	r1, r6
 8003420:	4638      	mov	r0, r7
 8003422:	f7ff ff35 	bl	8003290 <_free_r>
 8003426:	e7e9      	b.n	80033fc <_realloc_r+0x1c>
 8003428:	4635      	mov	r5, r6
 800342a:	e7e7      	b.n	80033fc <_realloc_r+0x1c>

0800342c <_sbrk_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4c06      	ldr	r4, [pc, #24]	; (8003448 <_sbrk_r+0x1c>)
 8003430:	2300      	movs	r3, #0
 8003432:	4605      	mov	r5, r0
 8003434:	4608      	mov	r0, r1
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	f7ff fa14 	bl	8002864 <_sbrk>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_sbrk_r+0x1a>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	b103      	cbz	r3, 8003446 <_sbrk_r+0x1a>
 8003444:	602b      	str	r3, [r5, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20000174 	.word	0x20000174

0800344c <__malloc_lock>:
 800344c:	4770      	bx	lr

0800344e <__malloc_unlock>:
 800344e:	4770      	bx	lr

08003450 <_malloc_usable_size_r>:
 8003450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003454:	1f18      	subs	r0, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfbc      	itt	lt
 800345a:	580b      	ldrlt	r3, [r1, r0]
 800345c:	18c0      	addlt	r0, r0, r3
 800345e:	4770      	bx	lr

08003460 <_init>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr

0800346c <_fini>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr
