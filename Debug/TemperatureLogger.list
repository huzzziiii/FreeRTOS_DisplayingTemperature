
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e7c  08005e7c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000098  08005f1c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005f1c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001073a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002465  00000000  00000000  00030802  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00033698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183e3  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb0a  00000000  00000000  0004c3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ac1b  00000000  00000000  00057eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000e2b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800581c 	.word	0x0800581c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800581c 	.word	0x0800581c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <DMA_InterruptHandler>:

/*
 * @brief: interrupt handler for DMA
 */
void DMA_InterruptHandler(DMA_Handle_t *dmaHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* half transfer interrupt handling */
	if (dmaHandle->DMA_Stream->CR & DMA_IT_HT)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d010      	beq.n	80005e8 <DMA_InterruptHandler+0x38>
	{
		// disable interrupts
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_HT);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f022 0208 	bic.w	r2, r2, #8
 80005d4:	601a      	str	r2, [r3, #0]

		// invoke calback for processing
		if (dmaHandle->HalfXferCplCallback != NULL)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d033      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		{
			dmaHandle->HalfXferCplCallback(dmaHandle);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	4798      	blx	r3
		if (dmaHandle->XferErrorCallback != NULL)
		{
			dmaHandle->XferErrorCallback(dmaHandle);
		}
	}
}
 80005e6:	e02e      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TC)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d010      	beq.n	8000618 <DMA_InterruptHandler+0x68>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TC);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f022 0210 	bic.w	r2, r2, #16
 8000604:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferCplCallback != NULL)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01b      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferCplCallback(dmaHandle);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	4798      	blx	r3
}
 8000616:	e016      	b.n	8000646 <DMA_InterruptHandler+0x96>
	else if (dmaHandle->DMA_Stream->CR & DMA_IT_TE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00f      	beq.n	8000646 <DMA_InterruptHandler+0x96>
		_HAL_DMA_DISABLE_IT(dmaHandle, DMA_IT_TE);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f022 0204 	bic.w	r2, r2, #4
 8000634:	601a      	str	r2, [r3, #0]
		if (dmaHandle->XferErrorCallback != NULL)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <DMA_InterruptHandler+0x96>
			dmaHandle->XferErrorCallback(dmaHandle);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	4798      	blx	r3
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <I2C_PeripheralClkControl>:
/* Function definitions -----------------------------------------------------*/

/*
 * @I2C_PeripheralClkControl: Enables the peripheral clock for a respective I2C interface
 */
void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <I2C_PeripheralClkControl+0x54>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 800066c:	e014      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <I2C_PeripheralClkControl+0x5c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000682:	e009      	b.n	8000698 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <I2C_PeripheralClkControl+0x60>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d105      	bne.n	8000698 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <I2C_PeripheralClkControl+0x58>)
 8000692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40005400 	.word	0x40005400
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40005800 	.word	0x40005800
 80006b0:	40005c00 	.word	0x40005c00

080006b4 <I2C_Init>:

/*
 * @I2C_Init: Populates I2C struct
 */
void I2C_Init(I2C_Handle_t *I2C_handle) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

	// initializing static pointer
	I2C_handle_p = I2C_handle;
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <I2C_Init+0xe4>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffc2 	bl	8000650 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4619      	mov	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000706:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <I2C_Init+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <I2C_Init+0xec>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	0c9b      	lsrs	r3, r3, #18
 8000714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000718:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6859      	ldr	r1, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	430a      	orrs	r2, r1
 8000728:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <I2C_Init+0xf0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d10f      	bne.n	8000754 <I2C_Init+0xa0>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <I2C_Init+0xe8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	69d9      	ldr	r1, [r3, #28]
 800074a:	897a      	ldrh	r2, [r7, #10]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <I2C_Init+0xf0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d80f      	bhi.n	800077e <I2C_Init+0xca>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a19      	ldr	r1, [r3, #32]
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <I2C_Init+0xe8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <I2C_Init+0xec>)
 800076a:	fba2 2303 	umull	r2, r3, r2, r3
 800076e:	0c9b      	lsrs	r3, r3, #18
 8000770:	3301      	adds	r3, #1
 8000772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000b4 	.word	0x200000b4
 800079c:	20000030 	.word	0x20000030
 80007a0:	431bde83 	.word	0x431bde83
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	887b      	ldrh	r3, [r7, #2]
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <GetFlagStatus+0x1e>
	}
	return FLAG_NOT_SET;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <I2C_WaitForCompletion>:

static void I2C_WaitForCompletion(I2C_TypeDef *pI2Cx, uint16_t i2cRegister)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
	while (!GetFlagStatus(pI2Cx, i2cRegister) && WaitTillTimeout(5));
 800081e:	bf00      	nop
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffbf 	bl	80007a8 <GetFlagStatus>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d105      	bne.n	800083c <I2C_WaitForCompletion+0x2a>
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fb9f 	bl	8000f74 <WaitTillTimeout>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f1      	bne.n	8000820 <I2C_WaitForCompletion+0xe>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <I2C_WriteSlaveAddress>:

/*
 * @I2C_WriteSlaveAddress: Writes slave address to DR
 */
static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <I2C_WriteSlaveAddress+0x28>
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	e003      	b.n	8000874 <I2C_WriteSlaveAddress+0x30>
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	611a      	str	r2, [r3, #16]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <I2C_ClearADDRFlag>:

/*
 * @I2C_ClearADDRFlag: Reads SR1 and SR2 registers to clear ADDR flag
 * During RXing: when 2 bytes are to be read, reset the ACK and set the POS bit
 */
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7b1b      	ldrb	r3, [r3, #12]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b02      	cmp	r3, #2
 800089e:	d113      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
	{
		if (I2C_handle_p->rxBufferLength == 2)
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7edb      	ldrb	r3, [r3, #27]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d10d      	bne.n	80008c8 <I2C_ClearADDRFlag+0x3c>
		{
			I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f813 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <I2C_ClearADDRFlag+0x50>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008c6:	601a      	str	r2, [r3, #0]
		}
	}

	dummyRead = pI2Cx->SR1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	60fb      	str	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000b4 	.word	0x200000b4

080008e0 <I2C_ControlAcking>:

/*
 * @I2C_ControlAcking: enables/disables the ACK bit for I2C
 */
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	if (enable)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 80008fe:	e005      	b.n	800090c <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HAL_I2C_StartInterrupt>:
/*
 * @HAL_I2C_StartInterrupt: Generates the START condition and enables I2C control bits
 * usage: called to "enable" I2C transaction via interrupts
 */
I2C_State HAL_I2C_StartInterrupt(I2C_State expectedState, uint8_t txSize, uint8_t rxSize)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	char *command = expectedState == I2C_TX_BUSY ? "TXing...\n" : "RXing...\n";
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d101      	bne.n	8000934 <HAL_I2C_StartInterrupt+0x1c>
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_I2C_StartInterrupt+0x64>)
 8000932:	e000      	b.n	8000936 <HAL_I2C_StartInterrupt+0x1e>
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_I2C_StartInterrupt+0x68>)
 8000936:	60fb      	str	r3, [r7, #12]

	if (I2C_handle_p->I2C_State == I2C_INIT)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d112      	bne.n	800096a <HAL_I2C_StartInterrupt+0x52>
	{
		// set transaction state
		I2C_handle_p->I2C_State = expectedState;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	731a      	strb	r2, [r3, #12]

		// set respective buffer sizes
		I2C_handle_p->txBufferLength = txSize;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	769a      	strb	r2, [r3, #26]
		I2C_handle_p->rxBufferLength = rxSize;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	797a      	ldrb	r2, [r7, #5]
 800095a:	76da      	strb	r2, [r3, #27]

		// generate start condition
		I2C_GenerateStartCondition(I2C_handle_p);
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff36 	bl	80007d2 <I2C_GenerateStartCondition>

		// enable i2c control bits
		I2C_SetCtrlBits();
 8000966:	f000 fae7 	bl	8000f38 <I2C_SetCtrlBits>
	}
	return I2C_handle_p->I2C_State;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_StartInterrupt+0x6c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	b2db      	uxtb	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08005834 	.word	0x08005834
 8000980:	08005840 	.word	0x08005840
 8000984:	200000b4 	.word	0x200000b4

08000988 <I2C1_EV_IRQHandler>:

/*
 * I2C1_EV_IRQHandler: Interrupt handler for I2C
 */
void I2C1_EV_IRQHandler (void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 800098e:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	0a9b      	lsrs	r3, r3, #10
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;			// stores register values

	if (eventInterrupt)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80c1 	beq.w	8000b3c <I2C1_EV_IRQHandler+0x1b4>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	717b      	strb	r3, [r7, #5]
		if (temp)
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d018      	beq.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	7b1b      	ldrb	r3, [r3, #12]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d106      	bne.n	80009ea <I2C1_EV_IRQHandler+0x62>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 80009dc:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff2e 	bl	8000844 <I2C_WriteSlaveAddress>
 80009e8:	e00b      	b.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	7b1b      	ldrb	r3, [r3, #12]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d105      	bne.n	8000a02 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 80009f6:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff21 	bl	8000844 <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 8000a02:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	085b      	lsrs	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a14:	797b      	ldrb	r3, [r7, #5]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <I2C1_EV_IRQHandler+0x9e>
		{
			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff33 	bl	800088c <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	09db      	lsrs	r3, r3, #7
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	7b1b      	ldrb	r3, [r3, #12]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d101      	bne.n	8000a54 <I2C1_EV_IRQHandler+0xcc>
			{
				I2C_TXE_Interrupt();
 8000a50:	f000 f8f8 	bl	8000c44 <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000a66:	797b      	ldrb	r3, [r7, #5]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <I2C1_EV_IRQHandler+0xea>
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d058      	beq.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)					// TXE=1, BTF=1
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	7b1b      	ldrb	r3, [r3, #12]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d10d      	bne.n	8000ab2 <I2C1_EV_IRQHandler+0x12a>
			{
				if (!I2C_handle_p->txBufferLength)						// if there are no more TX bytes to be sent
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7e9b      	ldrb	r3, [r3, #26]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14c      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				{
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fea3 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_StopTransmission();
 8000aac:	f000 fa24 	bl	8000ef8 <I2C_StopTransmission>
					I2C_StopTransmission();
				}
			}
		}
	}
}
 8000ab0:	e044      	b.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d13e      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
				if (I2C_handle_p->rxBufferLength == 2)
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	7edb      	ldrb	r3, [r3, #27]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d138      	bne.n	8000b3c <I2C1_EV_IRQHandler+0x1b4>
					I2C_GenerateStopCondition(I2C_handle_p);
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe8f 	bl	80007f2 <I2C_GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read second last byte
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6918      	ldr	r0, [r3, #16]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6959      	ldr	r1, [r3, #20]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	7e1a      	ldrb	r2, [r3, #24]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	1c54      	adds	r4, r2, #1
 8000aec:	b2e4      	uxtb	r4, r4
 8000aee:	761c      	strb	r4, [r3, #24]
 8000af0:	4613      	mov	r3, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	b2c2      	uxtb	r2, r0
 8000af6:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	7eda      	ldrb	r2, [r3, #27]
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	3a01      	subs	r2, #1
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR; // read last byte
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6918      	ldr	r0, [r3, #16]
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6959      	ldr	r1, [r3, #20]
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	7e1a      	ldrb	r2, [r3, #24]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	1c54      	adds	r4, r2, #1
 8000b1e:	b2e4      	uxtb	r4, r4
 8000b20:	761c      	strb	r4, [r3, #24]
 8000b22:	4613      	mov	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	b2c2      	uxtb	r2, r0
 8000b28:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <I2C1_EV_IRQHandler+0x1bc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	7eda      	ldrb	r2, [r3, #27]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	3a01      	subs	r2, #1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8000b38:	f000 f9de 	bl	8000ef8 <I2C_StopTransmission>
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	200000b4 	.word	0x200000b4

08000b48 <I2C_HandleInterruptEvents>:

/*
 * @I2C_HandleInterruptEvents: Called upon getting an error interrupt - resets the bit and generate stop condition
 */
void I2C_HandleInterruptEvents (uint16_t errorRegister, I2C_ErrorEvents errorEvent)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	717b      	strb	r3, [r7, #5]
	I2C_handle_p->pI2Cx->SR1 &= ~(errorRegister);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	88f9      	ldrh	r1, [r7, #6]
 8000b62:	43c9      	mvns	r1, r1
 8000b64:	400a      	ands	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]

	if (errorEvent == I2C_ERROR_AF)
 8000b68:	797b      	ldrb	r3, [r7, #5]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d106      	bne.n	8000b7c <I2C_HandleInterruptEvents+0x34>
	{
//		printf ("Received ACK failure...\n");
		I2C_StopTransmission();
 8000b6e:	f000 f9c3 	bl	8000ef8 <I2C_StopTransmission>
		I2C_GenerateStopCondition(I2C_handle_p);
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <I2C_HandleInterruptEvents+0x3c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe3b 	bl	80007f2 <I2C_GenerateStopCondition>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000b4 	.word	0x200000b4

08000b88 <I2C1_ER_IRQHandler>:

/*
 * @I2C1_ER_IRQHandler: Interrupt handler for I2C errors
 */
void I2C1_ER_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
//	printf ("ERROR IRQ handler...\n");
	I2C_handle_p->I2C_State = I2C_ERROR;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2204      	movs	r2, #4
 8000b94:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
	if (errorInterrupt)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d044      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
	{
		if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF)
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <I2C1_ER_IRQHandler+0x42>
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_AF);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bc4:	f7ff ffc0 	bl	8000b48 <I2C_HandleInterruptEvents>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
		{
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
		}
	}
}
 8000bc8:	e036      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_OVR)
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <I2C1_ER_IRQHandler+0x5e>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_OVR);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000be0:	f7ff ffb2 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000be4:	e028      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_PECERR)
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <I2C1_ER_IRQHandler+0x7a>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_PECERR);
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bfc:	f7ff ffa4 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c00:	e01a      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TIMEOUT)
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <I2C1_ER_IRQHandler+0x96>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_TIMEOUT);
 8000c12:	2103      	movs	r1, #3
 8000c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c18:	f7ff ff96 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c1c:	e00c      	b.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
		else if (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BERR)
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <I2C1_ER_IRQHandler+0xb8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <I2C1_ER_IRQHandler+0xb0>
			I2C_HandleInterruptEvents(I2C_SR1_AF, I2C_ERROR_BERR);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c34:	f7ff ff88 	bl	8000b48 <I2C_HandleInterruptEvents>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000b4 	.word	0x200000b4

08000c44 <I2C_TXE_Interrupt>:
/*
 * @I2C_TXE_Interrupt: Writes the respective byte to the DR
 * data register = empty = TXE
 */
void I2C_TXE_Interrupt (void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	7e9b      	ldrb	r3, [r3, #26]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d011      	beq.n	8000c78 <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	1c51      	adds	r1, r2, #1
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	7019      	strb	r1, [r3, #0]
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <I2C_TXE_Interrupt+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	7e9a      	ldrb	r2, [r3, #26]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	3a01      	subs	r2, #1
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	769a      	strb	r2, [r3, #26]
	}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200000b4 	.word	0x200000b4

08000c88 <HAL_I2C_Master_Transmit>:

/*
 * HAL_I2C_Master_Transmit: polling approach for TXing bytes to the slave
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fd9b 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fdb5 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fdca 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdab 	bl	8000812 <I2C_WaitForCompletion>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fde3 	bl	800088c <I2C_ClearADDRFlag>

	// write to the SDA line
	for (; size > 0; size--)
 8000cc6:	e015      	b.n	8000cf4 <HAL_I2C_Master_Transmit+0x6c>
	{
		// making sure data register is empty prior to writing to it
		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_TXE);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd9f 	bl	8000812 <I2C_WaitForCompletion>

		I2C_handle->pI2Cx->DR = *data++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	611a      	str	r2, [r3, #16]

		I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd92 	bl	8000812 <I2C_WaitForCompletion>
	for (; size > 0; size--)
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <HAL_I2C_Master_Transmit+0x40>
	}
	I2C_GenerateStopCondition(I2C_handle);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fd79 	bl	80007f2 <I2C_GenerateStopCondition>

	return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_I2C_Master_Receive>:

/*
 * @HAL_I2C_Master_Receive: Polling approach for RXing bytes from slave
 */
void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size, uint8_t startIndex)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	4611      	mov	r1, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	460b      	mov	r3, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	// generate start condition
	I2C_GenerateStartCondition(I2C_handle);
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fd56 	bl	80007d2 <I2C_GenerateStartCondition>

	// validate the completion of start condition
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_SB);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd70 	bl	8000812 <I2C_WaitForCompletion>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000d32:	2101      	movs	r1, #1
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fd85 	bl	8000844 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_ADDR);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd66 	bl	8000812 <I2C_WaitForCompletion>

	switch (size) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <HAL_I2C_Master_Receive+0x48>
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d00f      	beq.n	8000d70 <HAL_I2C_Master_Receive+0x66>
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Master_Receive+0x8e>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fdc1 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd92 	bl	800088c <I2C_ClearADDRFlag>
			I2C_GenerateStopCondition(I2C_handle);			// generate STOP condition
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fd42 	bl	80007f2 <I2C_GenerateStopCondition>
			break;
 8000d6e:	e01e      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdb2 	bl	80008e0 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d8a:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd7b 	bl	800088c <I2C_ClearADDRFlag>
			break;
 8000d96:	e00a      	b.n	8000dae <HAL_I2C_Master_Receive+0xa4>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd9e 	bl	80008e0 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd6f 	bl	800088c <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 8000dae:	e09b      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
		if (size <= 3) {
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	f200 8086 	bhi.w	8000ec4 <HAL_I2C_Master_Receive+0x1ba>
			if (size == 1) {
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d11f      	bne.n	8000dfe <HAL_I2C_Master_Receive+0xf4>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd8b 	bl	80008e0 <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd5c 	bl	800088c <I2C_ClearADDRFlag>

					// wait till RXNE = 1 (Data is sent from SR to DR)
					I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd19 	bl	8000812 <I2C_WaitForCompletion>

					// generate stop
					I2C_GenerateStopCondition(I2C_handle);
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fd06 	bl	80007f2 <I2C_GenerateStopCondition>

					// read data
					rxBuffer[startIndex++] = I2C_handle->pI2Cx->DR;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	1c59      	adds	r1, r3, #1
 8000df0:	71b9      	strb	r1, [r7, #6]
 8000df2:	4619      	mov	r1, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	440b      	add	r3, r1
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e074      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>

			}

			else if (size == 2) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d122      	bne.n	8000e4a <HAL_I2C_Master_Receive+0x140>
				// wait till BTF is set (last byte is received) - shift reg=1, DR=1
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd01 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fcee 	bl	80007f2 <I2C_GenerateStopCondition>

//				I2C_handle->pRxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
				rxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	71b9      	strb	r1, [r7, #6]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	440b      	add	r3, r1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
				--size;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]

				rxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6919      	ldr	r1, [r3, #16]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
//				I2C_handle->pRxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
				--size;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	e04e      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}
			else if (size == 3) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d14b      	bne.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
				// wait for the second last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fcdb 	bl	8000812 <I2C_WaitForCompletion>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd3c 	bl	80008e0 <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]

				size--;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]

				// wait for the last byte to be put in SR while DR is full (RxNE=1)
				I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_BTF);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2104      	movs	r1, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fcc3 	bl	8000812 <I2C_WaitForCompletion>

				I2C_GenerateStopCondition(I2C_handle);
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff fcb0 	bl	80007f2 <I2C_GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]

				size--;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]

				size--;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e011      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x1de>
			}

		}
		// > 3 bytes
		else {
			I2C_WaitForCompletion(I2C_handle->pI2Cx, I2C_SR1_RXNE);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fca1 	bl	8000812 <I2C_WaitForCompletion>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]

			size--;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f af60 	bne.w	8000db0 <HAL_I2C_Master_Receive+0xa6>

		}
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C_StopTransmission>:

/*
 * @I2C_StopTransmission: Disables I2C control bits and sets I2C struct to initial values
 */
static void I2C_StopTransmission(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
//	printf ("Stopping transmission...\n\n");

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f08:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f16:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	731a      	strb	r2, [r3, #12]
//	I2C_handle_p->rxBufferLength = BYTES_PER_TRANSACTION;

	I2C_handle_p->rxStartIndex = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <I2C_StopTransmission+0x3c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
//	I2C_handle_p->txBufferLength = I2C
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200000b4 	.word	0x200000b4

08000f38 <I2C_SetCtrlBits>:

/*
 * @I2C_SetCtrlBits: Sets I2C control bits
 */
static void I2C_SetCtrlBits(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f48:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f56:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITERREN;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <I2C_SetCtrlBits+0x38>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f64:	605a      	str	r2, [r3, #4]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200000b4 	.word	0x200000b4

08000f74 <WaitTillTimeout>:

HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 8000f7e:	f000 ff8b 	bl	8001e98 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 8000f86:	bf00      	nop
 8000f88:	f000 ff86 	bl	8001e98 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f7      	bcc.n	8000f88 <WaitTillTimeout+0x14>
	return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <concatData>:


};

unsigned long long concatData(uint8_t *arr, uint8_t size)
{
 8000fa2:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	long long unsigned value = 0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	f04f 0400 	mov.w	r4, #0
 8000fb8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (uint8_t i = 0; i < size; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e01e      	b.n	8001000 <concatData+0x5e>
	{
		value <<= 8;
 8000fc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	f04f 0400 	mov.w	r4, #0
 8000fce:	0214      	lsls	r4, r2, #8
 8000fd0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8000fd4:	020b      	lsls	r3, r1, #8
 8000fd6:	e9c7 3404 	strd	r3, r4, [r7, #16]
		value |= arr[i];
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	fa5f fb83 	uxtb.w	fp, r3
 8000fe6:	f04f 0c00 	mov.w	ip, #0
 8000fea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000fee:	ea4b 0301 	orr.w	r3, fp, r1
 8000ff2:	ea4c 0402 	orr.w	r4, ip, r2
 8000ff6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (uint8_t i = 0; i < size; i++)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	429a      	cmp	r2, r3
 8001006:	d3dc      	bcc.n	8000fc2 <concatData+0x20>
	}
	return value;
 8001008:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800100c:	4618      	mov	r0, r3
 800100e:	4621      	mov	r1, r4
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001018:	4770      	bx	lr
	...

0800101c <nRF24_GPIO_Init>:

void nRF24_GPIO_Init(GPIO_InitTypeDef *gpioPort)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	// SCK, MISO, MOSI
	gpioPort->Mode = GPIO_MODE_AF_PP;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	605a      	str	r2, [r3, #4]
	gpioPort->Pin = SPI_SCLK_PIN | SPI_MOSI_PIN | SPI_MISO_PIN;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001030:	601a      	str	r2, [r3, #0]
	gpioPort->Alternate = GPIO_AF5_SPI2;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	611a      	str	r2, [r3, #16]
	gpioPort->Pull = GPIO_PULLDOWN;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SPI_SCLK_PORT, gpioPort);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <nRF24_GPIO_Init+0x84>)
 8001042:	f001 f847 	bl	80020d4 <HAL_GPIO_Init>

	// CE and SCN
	gpioPort->Pin = rNRF24_CE_PIN | rNRF24_CSN_PIN;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800104c:	601a      	str	r2, [r3, #0]
	gpioPort->Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
	gpioPort->Pull = GPIO_NOPULL;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	gpioPort->Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(nRF24_GPIO_PORT, gpioPort);
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <nRF24_GPIO_Init+0x88>)
 8001064:	f001 f836 	bl	80020d4 <HAL_GPIO_Init>

	RESET_CE();
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <nRF24_GPIO_Init+0x88>)
 8001070:	f001 f9ca 	bl	8002408 <HAL_GPIO_WritePin>
	SET_CSN();
 8001074:	2201      	movs	r2, #1
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <nRF24_GPIO_Init+0x88>)
 800107a:	f001 f9c5 	bl	8002408 <HAL_GPIO_WritePin>

	// IRQ
	gpioPort->Pin = nRF24_IRQ_PIN;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2220      	movs	r2, #32
 8001082:	601a      	str	r2, [r3, #0]
	gpioPort->Mode = GPIO_MODE_IT_FALLING;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <nRF24_GPIO_Init+0x8c>)
 8001088:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(nRF24_GPIO_PORT, gpioPort);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <nRF24_GPIO_Init+0x88>)
 800108e:	f001 f821 	bl	80020d4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001092:	2017      	movs	r0, #23
 8001094:	f001 f803 	bl	800209e <HAL_NVIC_EnableIRQ>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800
 80010a8:	10210000 	.word	0x10210000

080010ac <nRF24_WriteRegisterX>:

NRF_STATUS nRF24_WriteRegisterX(nrfl2401 *nrf, uint8_t reg, uint8_t *data, const uint8_t txSize, char *text)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	461a      	mov	r2, r3
 80010b8:	460b      	mov	r3, r1
 80010ba:	72fb      	strb	r3, [r7, #11]
 80010bc:	4613      	mov	r3, r2
 80010be:	72bb      	strb	r3, [r7, #10]
	uint8_t txBuffer[10] = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	811a      	strh	r2, [r3, #8]
	uint8_t rxBuffer[10] = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	811a      	strh	r2, [r3, #8]
//	uint8_t spiTxSize = txSize;
	uint8_t spiTxSize = txSize + 1;
 80010d8:	7abb      	ldrb	r3, [r7, #10]
 80010da:	3301      	adds	r3, #1
 80010dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

//	txBuffer[0] = reg <= nRF24_CMD_W_REG ? nRF24_CMD_W_REG | (reg & nRF24_R_W_MASK), spiTxSize++ : reg;

	if (reg <= nRF24_CMD_W_REG)
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d80a      	bhi.n	80010fc <nRF24_WriteRegisterX+0x50>
	{
		txBuffer[0] = nRF24_CMD_W_REG | (reg & nRF24_R_W_MASK);
 80010e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	773b      	strb	r3, [r7, #28]
 80010fa:	e001      	b.n	8001100 <nRF24_WriteRegisterX+0x54>
//		spiTxSize++;
	}
	else {
		txBuffer[0] = reg;
 80010fc:	7afb      	ldrb	r3, [r7, #11]
 80010fe:	773b      	strb	r3, [r7, #28]
	}

	// populate the buffer with the data that needs to be sent
	for (uint8_t i = 0; i < txSize; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001106:	e011      	b.n	800112c <nRF24_WriteRegisterX+0x80>
	{
		txBuffer[i+1] = data[i];
 8001108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	441a      	add	r2, r3
 8001110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001114:	3301      	adds	r3, #1
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800111c:	440b      	add	r3, r1
 800111e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t i = 0; i < txSize; i++)
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	3301      	adds	r3, #1
 8001128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800112c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001130:	7abb      	ldrb	r3, [r7, #10]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3e8      	bcc.n	8001108 <nRF24_WriteRegisterX+0x5c>
	}

	nRF24_SendCommand(nrf, txBuffer, rxBuffer, spiTxSize);
 8001136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113a:	f107 0210 	add.w	r2, r7, #16
 800113e:	f107 011c 	add.w	r1, r7, #28
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f80e 	bl	8001164 <nRF24_SendCommand>

//	OutputToSerial(txBuffer, spiTxSize, text);
	OutputToSerial(txBuffer, rxBuffer, spiTxSize, text);
 8001148:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800114c:	f107 0110 	add.w	r1, r7, #16
 8001150:	f107 001c 	add.w	r0, r7, #28
 8001154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001156:	f000 f87f 	bl	8001258 <OutputToSerial>


	return NRF_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <nRF24_SendCommand>:

	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, readBuffer, "Reading Status Register");
}

void nRF24_SendCommand(nrfl2401 *nrf, uint8_t *txBuffer, uint8_t *rxBuffer, uint8_t size)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	70fb      	strb	r3, [r7, #3]
	RESET_CSN();
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <nRF24_SendCommand+0x48>)
 8001178:	f001 f946 	bl	8002408 <HAL_GPIO_WritePin>

//	HAL_SPI_TransmitReceive_IT(nrf->config.spiHandle, txBuffer, rxBuffer, size);
	HAL_StatusTypeDef transactionStatus = HAL_SPI_TransmitReceive(nrf->config.spiHandle, txBuffer, rxBuffer, size, 1000);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6858      	ldr	r0, [r3, #4]
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	b29a      	uxth	r2, r3
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4613      	mov	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	f001 fe04 	bl	8002d9c <HAL_SPI_TransmitReceive>
 8001194:	4603      	mov	r3, r0
 8001196:	75fb      	strb	r3, [r7, #23]

	SET_CSN();
 8001198:	2201      	movs	r2, #1
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <nRF24_SendCommand+0x48>)
 800119e:	f001 f933 	bl	8002408 <HAL_GPIO_WritePin>

	// maybe return ... - todo!
//	return transactionStatus;
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40020800 	.word	0x40020800

080011b0 <nRF24_ReadRegister>:

void nRF24_ReadRegister(nrfl2401 *nrf, uint8_t reg, const uint8_t rxSize)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
 80011bc:	4613      	mov	r3, r2
 80011be:	70bb      	strb	r3, [r7, #2]
//	uint8_t txBuffer[1] = {0};
//	uint8_t rxBuffer[rxSize];

	pTxData[0] = reg < nRF24_CMD_W_REG ? (nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK)) : reg;
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b1f      	cmp	r3, #31
 80011c4:	d804      	bhi.n	80011d0 <nRF24_ReadRegister+0x20>
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e000      	b.n	80011d2 <nRF24_ReadRegister+0x22>
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <nRF24_ReadRegister+0x3c>)
 80011d4:	7013      	strb	r3, [r2, #0]
	nRF24_SendCommand(nrf, pTxData, pRxData, rxSize);
 80011d6:	78bb      	ldrb	r3, [r7, #2]
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <nRF24_ReadRegister+0x40>)
 80011da:	4904      	ldr	r1, [pc, #16]	; (80011ec <nRF24_ReadRegister+0x3c>)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffc1 	bl	8001164 <nRF24_SendCommand>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000b8 	.word	0x200000b8
 80011f0:	200000c4 	.word	0x200000c4

080011f4 <nRF24_ReadRegisterX>:

void nRF24_ReadRegisterX(nrfl2401 *nrf, uint8_t reg, const uint8_t rxSize, uint8_t *rxBuffer, char *text)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	72fb      	strb	r3, [r7, #11]
 8001202:	4613      	mov	r3, r2
 8001204:	72bb      	strb	r3, [r7, #10]
//	txBuffer[0] = reg < nRF24_CMD_W_REG ? (nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK)) : reg;
	uint8_t txBuffer[10] = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	811a      	strh	r2, [r3, #8]
	uint8_t spiRxSize = rxSize;
 8001212:	7abb      	ldrb	r3, [r7, #10]
 8001214:	77fb      	strb	r3, [r7, #31]

	if (reg <= nRF24_CMD_W_REG)
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	2b20      	cmp	r3, #32
 800121a:	d808      	bhi.n	800122e <nRF24_ReadRegisterX+0x3a>
	{
		txBuffer[0] = nRF24_CMD_R_REG | (reg & nRF24_R_W_MASK);
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	b2db      	uxtb	r3, r3
 8001224:	753b      	strb	r3, [r7, #20]
		spiRxSize++;
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	3301      	adds	r3, #1
 800122a:	77fb      	strb	r3, [r7, #31]
 800122c:	e001      	b.n	8001232 <nRF24_ReadRegisterX+0x3e>
	}
	else
	{
		txBuffer[0] = reg;
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	753b      	strb	r3, [r7, #20]
	}

	nRF24_SendCommand(nrf, txBuffer, rxBuffer, spiRxSize);
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	f107 0114 	add.w	r1, r7, #20
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff ff92 	bl	8001164 <nRF24_SendCommand>

	OutputToSerial(txBuffer, rxBuffer, spiRxSize, text);
 8001240:	7ffa      	ldrb	r2, [r7, #31]
 8001242:	f107 0014 	add.w	r0, r7, #20
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	f000 f805 	bl	8001258 <OutputToSerial>
}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <OutputToSerial>:
#define PRI_UINT64_C_Val(value) ((unsigned long) (value>>32)), ((unsigned long)value)
#define PRI_UINT64 "%lx%lx"
#define LONG_TO_STR(STR, LONG_VAL) (sprintf(STR, "%lx%lx", PRI_UINT64_C_Val(LONG_VAL)))

void OutputToSerial(uint8_t *writeBuffer, uint8_t *readBuffer, uint8_t size, char *text)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b0cb      	sub	sp, #300	; 0x12c
 800125c:	af00      	add	r7, sp, #0
 800125e:	f107 040c 	add.w	r4, r7, #12
 8001262:	6020      	str	r0, [r4, #0]
 8001264:	f107 0008 	add.w	r0, r7, #8
 8001268:	6001      	str	r1, [r0, #0]
 800126a:	4611      	mov	r1, r2
 800126c:	463a      	mov	r2, r7
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	460a      	mov	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	char strData[100] = {0}, rxStrData[100] = {0};
 8001276:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f941 	bl	8004506 <memset>
 8001284:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001288:	2264      	movs	r2, #100	; 0x64
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f003 f93a 	bl	8004506 <memset>
	long long unsigned txStr = concatData(writeBuffer, size);
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4611      	mov	r1, r2
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f7ff fe80 	bl	8000fa2 <concatData>
 80012a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012a6:	e9c3 0100 	strd	r0, r1, [r3]
	long long unsigned rxStr = concatData(readBuffer, size);
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4611      	mov	r1, r2
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f7ff fe74 	bl	8000fa2 <concatData>
 80012ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012be:	e9c3 0100 	strd	r0, r1, [r3]
	LONG_TO_STR(strData, txStr);
 80012c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012c6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	f04f 0400 	mov.w	r4, #0
 80012d2:	0013      	movs	r3, r2
 80012d4:	2400      	movs	r4, #0
 80012d6:	461a      	mov	r2, r3
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012dc:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80012e0:	4928      	ldr	r1, [pc, #160]	; (8001384 <OutputToSerial+0x12c>)
 80012e2:	f003 f9a9 	bl	8004638 <siprintf>
	LONG_TO_STR(rxStrData, rxStr);
 80012e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	0013      	movs	r3, r2
 80012f8:	2400      	movs	r4, #0
 80012fa:	461a      	mov	r2, r3
 80012fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001300:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001304:	491f      	ldr	r1, [pc, #124]	; (8001384 <OutputToSerial+0x12c>)
 8001306:	f003 f997 	bl	8004638 <siprintf>

	char outputMsg[60] = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4618      	mov	r0, r3
 8001310:	233c      	movs	r3, #60	; 0x3c
 8001312:	461a      	mov	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	f003 f8f6 	bl	8004506 <memset>
	strcpy(outputMsg, text);
 800131a:	463b      	mov	r3, r7
 800131c:	f107 0214 	add.w	r2, r7, #20
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	4610      	mov	r0, r2
 8001324:	f003 f9b5 	bl	8004692 <strcpy>
	strcat(outputMsg, ":          0x%s ----------- 0x%s\n");
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff61 	bl	80001f4 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4413      	add	r3, r2
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <OutputToSerial+0x130>)
 800133e:	4614      	mov	r4, r2
 8001340:	469c      	mov	ip, r3
 8001342:	f104 0e20 	add.w	lr, r4, #32
 8001346:	4665      	mov	r5, ip
 8001348:	4626      	mov	r6, r4
 800134a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800134c:	6028      	str	r0, [r5, #0]
 800134e:	6069      	str	r1, [r5, #4]
 8001350:	60aa      	str	r2, [r5, #8]
 8001352:	60eb      	str	r3, [r5, #12]
 8001354:	3410      	adds	r4, #16
 8001356:	f10c 0c10 	add.w	ip, ip, #16
 800135a:	4574      	cmp	r4, lr
 800135c:	d1f3      	bne.n	8001346 <OutputToSerial+0xee>
 800135e:	4662      	mov	r2, ip
 8001360:	4623      	mov	r3, r4
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	8013      	strh	r3, [r2, #0]

//	char temp[30] = {0}; // todo - remove !!
//	strcpy(temp, outputMsg);

	printf (outputMsg, strData, rxStrData);
 8001366:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800136a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f003 f8d0 	bl	8004518 <iprintf>
//	SendSerialData(&USART2_handle, outputMsg, strData, rxStrData);
}
 8001378:	bf00      	nop
 800137a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800137e:	46bd      	mov	sp, r7
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	08005878 	.word	0x08005878
 8001388:	08005880 	.word	0x08005880

0800138c <nRF24_PrintDetails>:

void nRF24_PrintDetails(nrfl2401 *nrf)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
	printf ("\n ------------- PRINTING details --------\n");
 8001394:	483a      	ldr	r0, [pc, #232]	; (8001480 <nRF24_PrintDetails+0xf4>)
 8001396:	f003 f947 	bl	8004628 <puts>
	uint8_t readBuffer[10] = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	811a      	strh	r2, [r3, #8]
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, readBuffer, "Config");
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <nRF24_PrintDetails+0xf8>)
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4613      	mov	r3, r2
 80013b0:	2201      	movs	r2, #1
 80013b2:	2100      	movs	r1, #0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff1d 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RX_ADDR_P0_REG, nrf->config.addressWidth, readBuffer, "RX_ADDR_P0");
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80013c0:	f107 010c 	add.w	r1, r7, #12
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <nRF24_PrintDetails+0xfc>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	460b      	mov	r3, r1
 80013ca:	210a      	movs	r1, #10
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff11 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, (uint8_t) 1, readBuffer, "EN_AA");
 80013d2:	f107 020c 	add.w	r2, r7, #12
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <nRF24_PrintDetails+0x100>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4613      	mov	r3, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff07 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_TX_ADDR_REG, nrf->config.addressWidth, readBuffer, "TX_ADDR_REG");
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80013ec:	f107 010c 	add.w	r1, r7, #12
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <nRF24_PrintDetails+0x104>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	2110      	movs	r1, #16
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fefb 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "RF_Setup");
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <nRF24_PrintDetails+0x108>)
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	2201      	movs	r2, #1
 800140a:	2106      	movs	r1, #6
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fef1 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RF_CH_REG, (uint8_t) 1, readBuffer, "RF_CH Reg");
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <nRF24_PrintDetails+0x10c>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	4613      	mov	r3, r2
 800141c:	2201      	movs	r2, #1
 800141e:	2105      	movs	r1, #5
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fee7 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_SETUP_AW_REG, (uint8_t) 1, readBuffer, "ADDRESS WIDTH");
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <nRF24_PrintDetails+0x110>)
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	2201      	movs	r2, #1
 8001432:	2103      	movs	r1, #3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fedd 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_OBSERVE_TX_REG, (uint8_t) 1, readBuffer, "OBSERVE_TX");
 800143a:	f107 020c 	add.w	r2, r7, #12
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <nRF24_PrintDetails+0x114>)
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4613      	mov	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	2108      	movs	r1, #8
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fed3 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_FEATURE_REG, (uint8_t) 1, readBuffer, "FEATURE_REG");
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <nRF24_PrintDetails+0x118>)
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4613      	mov	r3, r2
 8001458:	2201      	movs	r2, #1
 800145a:	211d      	movs	r1, #29
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fec9 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_DYNPD_REG, (uint8_t) 1, readBuffer, "DPL_Px");
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <nRF24_PrintDetails+0x11c>)
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	2201      	movs	r2, #1
 800146e:	211c      	movs	r1, #28
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff febf 	bl	80011f4 <nRF24_ReadRegisterX>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	080058a4 	.word	0x080058a4
 8001484:	080058d0 	.word	0x080058d0
 8001488:	080058d8 	.word	0x080058d8
 800148c:	080058e4 	.word	0x080058e4
 8001490:	080058ec 	.word	0x080058ec
 8001494:	080058f8 	.word	0x080058f8
 8001498:	08005904 	.word	0x08005904
 800149c:	08005910 	.word	0x08005910
 80014a0:	08005920 	.word	0x08005920
 80014a4:	0800592c 	.word	0x0800592c
 80014a8:	08005938 	.word	0x08005938

080014ac <ReadStatusRegister>:


NRF_STATUS ReadStatusRegister(nrfl2401 *nrf, FlagStatus verifyInitState)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
	nRF24_ReadRegister(nrf, nRF24_CMD_NOP, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe77 	bl	80011b0 <nRF24_ReadRegister>
	if (verifyInitState == SET)
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <ReadStatusRegister+0x28>
	{
		if (pRxData[0] != nRF24_DEFAULT_STATUS_REG)
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <ReadStatusRegister+0x34>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b0e      	cmp	r3, #14
 80014ce:	d001      	beq.n	80014d4 <ReadStatusRegister+0x28>
		{
			return NRF_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <ReadStatusRegister+0x2a>
		}
	}
	return NRF_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000c4 	.word	0x200000c4

080014e4 <nRF24_SetTxAddress>:
{
	nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, &data, size, "Status register");
}

void nRF24_SetTxAddress(nrfl2401 *nrf, const uint8_t size)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_TX_ADDR_REG, nrf->config.txAddress, size, "TX address");
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f4:	78f9      	ldrb	r1, [r7, #3]
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <nRF24_SetTxAddress+0x28>)
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	2110      	movs	r1, #16
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdd4 	bl	80010ac <nRF24_WriteRegisterX>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	08005950 	.word	0x08005950

08001510 <nRF24_SetRxAddress>:

void nRF24_SetRxAddress(nrfl2401 *nrf, uint8_t size)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	char printStr[10] = "RX_ADDR_P0";
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <nRF24_SetRxAddress+0x60>)
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	ca07      	ldmia	r2, {r0, r1, r2}
 8001524:	c303      	stmia	r3!, {r0, r1}
 8001526:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	75fb      	strb	r3, [r7, #23]
 800152c:	e015      	b.n	800155a <nRF24_SetRxAddress+0x4a>
	{
//		nRF24_WriteRegister(nrf, nRF24_RX_ADDR[i], nrf->config.txAddressesList[i], size);
		nRF24_WriteRegisterX(nrf, nRF24_RX_ADDR[i], nrf->config.txAddressesList[i], size, printStr);
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <nRF24_SetRxAddress+0x64>)
 8001532:	5cd0      	ldrb	r0, [r2, r3]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001538:	7dfa      	ldrb	r2, [r7, #23]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	18ca      	adds	r2, r1, r3
 8001542:	78f9      	ldrb	r1, [r7, #3]
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	460b      	mov	r3, r1
 800154c:	4601      	mov	r1, r0
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fdac 	bl	80010ac <nRF24_WriteRegisterX>
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	3301      	adds	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001560:	7dfa      	ldrb	r2, [r7, #23]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3e3      	bcc.n	800152e <nRF24_SetRxAddress+0x1e>
	}
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	080058d8 	.word	0x080058d8
 8001574:	20000000 	.word	0x20000000

08001578 <nRF24_EnableRxDataPipes>:

void nRF24_EnableRxDataPipes(nrfl2401 *nrf, const uint8_t size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_EN_RXADDR_REG, nrf->config.enableRxDataPipes, size, "RX_DATA_PIPE0");
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	78f9      	ldrb	r1, [r7, #3]
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <nRF24_EnableRxDataPipes+0x28>)
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	460b      	mov	r3, r1
 8001590:	2102      	movs	r1, #2
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd8a 	bl	80010ac <nRF24_WriteRegisterX>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800595c 	.word	0x0800595c

080015a4 <nRF24_SetAddressFieldWidth>:

void nRF24_SetAddressFieldWidth(nrfl2401 *nrf, const uint8_t size)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteRegisterX(nrf, nRF24_SETUP_AW_REG, &nrf->config.addressFieldWidth, size, "Address field width");
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80015b6:	78f9      	ldrb	r1, [r7, #3]
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <nRF24_SetAddressFieldWidth+0x2c>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	2103      	movs	r1, #3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd73 	bl	80010ac <nRF24_WriteRegisterX>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	0800596c 	.word	0x0800596c

080015d4 <nRF24_SetDataRate>:
{
	nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, nrf->config.rfSetup, size, "Setup RF");
}

NRF_STATUS nRF24_SetDataRate(nrfl2401 *nrf)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	811a      	strh	r2, [r3, #8]
	uint8_t setValue;

	// reading RF setup register
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "Read RF Setup");
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <nRF24_SetDataRate+0x70>)
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	2201      	movs	r2, #1
 80015f4:	2106      	movs	r1, #6
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fdfc 	bl	80011f4 <nRF24_ReadRegisterX>

	setValue = readBuffer[1] | nrf->config.dataRate;
 80015fc:	7b7a      	ldrb	r2, [r7, #13]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7e1b      	ldrb	r3, [r3, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	72fb      	strb	r3, [r7, #11]
	// setting data rate
	nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, &setValue, (uint8_t) 1, "Set data rate");
 8001608:	f107 020b 	add.w	r2, r7, #11
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <nRF24_SetDataRate+0x74>)
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	2106      	movs	r1, #6
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fd49 	bl	80010ac <nRF24_WriteRegisterX>

	// verifying set data
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, readBuffer, "Verifying RF Setup");
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <nRF24_SetDataRate+0x78>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	2201      	movs	r2, #1
 8001626:	2106      	movs	r1, #6
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fde3 	bl	80011f4 <nRF24_ReadRegisterX>
	if (readBuffer[1] != setValue)
 800162e:	7b7a      	ldrb	r2, [r7, #13]
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	429a      	cmp	r2, r3
 8001634:	d001      	beq.n	800163a <nRF24_SetDataRate+0x66>
	{
		return NRF_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <nRF24_SetDataRate+0x68>
	}
	return NRF_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0800598c 	.word	0x0800598c
 8001648:	0800599c 	.word	0x0800599c
 800164c:	080059ac 	.word	0x080059ac

08001650 <nRF24_DisableIRQ>:
		HAL_Delay(2000);
	}
}

void nRF24_DisableIRQ(nrfl2401 *nrf)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	6078      	str	r0, [r7, #4]
	uint8_t registerRead[10] = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	811a      	strh	r2, [r3, #8]
	uint8_t write = nRF24_DISABLE_MAX_RT | nRF24_DISABLE_TX_DS | nRF24_DISABLE_RX_DR;
 8001664:	2370      	movs	r3, #112	; 0x70
 8001666:	75fb      	strb	r3, [r7, #23]
	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, registerRead, "Reading Status Reg");
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <nRF24_DisableIRQ+0x50>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	2107      	movs	r1, #7
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fdbc 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | write}, (uint8_t) 1, "Disabling IRQs");
 800167c:	7a7a      	ldrb	r2, [r7, #9]
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	4313      	orrs	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	753b      	strb	r3, [r7, #20]
 8001686:	f107 0214 	add.w	r2, r7, #20
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <nRF24_DisableIRQ+0x54>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2107      	movs	r1, #7
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fd0a 	bl	80010ac <nRF24_WriteRegisterX>
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	080059d8 	.word	0x080059d8
 80016a4:	080059ec 	.word	0x080059ec

080016a8 <nRF24_FlushTX>:

void nRF24_FlushTX(nrfl2401 *nrf)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisterX(nrf, nRF24_CMD_FLUSH_TX, (uint8_t[]) {nRF24_CMD_NOP}, (uint8_t) 2, "Flush TX FIFO");
 80016b0:	23ff      	movs	r3, #255	; 0xff
 80016b2:	733b      	strb	r3, [r7, #12]
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <nRF24_FlushTX+0x28>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2302      	movs	r3, #2
 80016be:	21e1      	movs	r1, #225	; 0xe1
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fcf3 	bl	80010ac <nRF24_WriteRegisterX>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	080059fc 	.word	0x080059fc

080016d4 <nRF24_Reset>:

void nRF24_Reset(nrfl2401 *nrf)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af02      	add	r7, sp, #8
 80016da:	6078      	str	r0, [r7, #4]
	printf (" ************* RESETTING *************\n");
 80016dc:	4874      	ldr	r0, [pc, #464]	; (80018b0 <nRF24_Reset+0x1dc>)
 80016de:	f002 ffa3 	bl	8004628 <puts>
//	nRF24_SetConfigureRegister(nrf, nRF24_PWR_UP, PWR_UP);

//	nRF24_WriteRegister(nrf, nRF24_CONFIG_REG, 0x08, (uint8_t) 2);

//	uint8_t rxBuffer[2] = {0};
	uint8_t registerRead[2] = {0};
 80016e2:	2300      	movs	r3, #0
 80016e4:	813b      	strh	r3, [r7, #8]


//	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, rxBuffer, "Reading Default Config Register");	// 0x0011 1111
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, registerRead, "Reading Default Config");	// 0x0011 1111
 80016e6:	f107 0208 	add.w	r2, r7, #8
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <nRF24_Reset+0x1e0>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4613      	mov	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fd7d 	bl	80011f4 <nRF24_ReadRegisterX>

	if (registerRead[1] != DEFAULT_CONFIG_REG)
 80016fa:	7a7b      	ldrb	r3, [r7, #9]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d00a      	beq.n	8001716 <nRF24_Reset+0x42>
	{
		nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t[]) {DEFAULT_CONFIG_REG}, (uint8_t) 1, "Setting CONFIG");
 8001700:	2308      	movs	r3, #8
 8001702:	733b      	strb	r3, [r7, #12]
 8001704:	f107 020c 	add.w	r2, r7, #12
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <nRF24_Reset+0x1e4>)
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2301      	movs	r3, #1
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fccb 	bl	80010ac <nRF24_WriteRegisterX>
	}

	// read status register
	nRF24_ReadRegisterX(nrf, nRF24_STATUS_REG, (uint8_t) 1, registerRead, "Reading Default Status");	// 0x0011 1111
 8001716:	f107 0208 	add.w	r2, r7, #8
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <nRF24_Reset+0x1e8>)
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	2201      	movs	r2, #1
 8001722:	2107      	movs	r1, #7
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fd65 	bl	80011f4 <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_STATUS_REG)
 800172a:	7a7b      	ldrb	r3, [r7, #9]
 800172c:	2b0e      	cmp	r3, #14
 800172e:	d053      	beq.n	80017d8 <nRF24_Reset+0x104>
	{
		if (registerRead[1] & nRF24_DISABLE_MAX_RT)
 8001730:	7a7b      	ldrb	r3, [r7, #9]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00d      	beq.n	8001756 <nRF24_Reset+0x82>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_MAX_RT}, (uint8_t) 1, "Disabling MAX_RT");
 800173a:	7a7b      	ldrb	r3, [r7, #9]
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	b2db      	uxtb	r3, r3
 8001742:	743b      	strb	r3, [r7, #16]
 8001744:	f107 0210 	add.w	r2, r7, #16
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <nRF24_Reset+0x1ec>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	2107      	movs	r1, #7
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fcab 	bl	80010ac <nRF24_WriteRegisterX>
		}

		if (registerRead[1] & nRF24_DISABLE_TX_FULL)
 8001756:	7a7b      	ldrb	r3, [r7, #9]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <nRF24_Reset+0xa8>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_TX_FULL}, (uint8_t) 1, "Disabing TX_FULL");
 8001760:	7a7b      	ldrb	r3, [r7, #9]
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	753b      	strb	r3, [r7, #20]
 800176a:	f107 0214 	add.w	r2, r7, #20
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <nRF24_Reset+0x1f0>)
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	2107      	movs	r1, #7
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fc98 	bl	80010ac <nRF24_WriteRegisterX>
		}

		if (registerRead[1] & nRF24_DISABLE_TX_DS)
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <nRF24_Reset+0xce>
		{
			nRF24_WriteRegisterX(nrf, nRF24_STATUS_REG, (uint8_t[]) {registerRead[1] | nRF24_DISABLE_TX_DS}, (uint8_t) 1, "Disabing TX_DR");
 8001786:	7a7b      	ldrb	r3, [r7, #9]
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	b2db      	uxtb	r3, r3
 800178e:	763b      	strb	r3, [r7, #24]
 8001790:	f107 0218 	add.w	r2, r7, #24
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <nRF24_Reset+0x1f4>)
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	2107      	movs	r1, #7
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fc85 	bl	80010ac <nRF24_WriteRegisterX>
		}

		// read en_aa register
		nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, (uint8_t) 1, registerRead, "Reading EN_AA");
 80017a2:	f107 0208 	add.w	r2, r7, #8
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <nRF24_Reset+0x1f8>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	2201      	movs	r2, #1
 80017ae:	2101      	movs	r1, #1
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fd1f 	bl	80011f4 <nRF24_ReadRegisterX>
		if (registerRead[1] != DEFAULT_EN_AA_REG)
 80017b6:	7a7b      	ldrb	r3, [r7, #9]
 80017b8:	2b3e      	cmp	r3, #62	; 0x3e
 80017ba:	d00d      	beq.n	80017d8 <nRF24_Reset+0x104>
		{
			nRF24_WriteRegisterX(nrf, DEFAULT_EN_AA_REG, (uint8_t[]) {registerRead[1] | DEFAULT_EN_AA_REG}, (uint8_t) 1, "Resetting EN_AA");
 80017bc:	7a7b      	ldrb	r3, [r7, #9]
 80017be:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	773b      	strb	r3, [r7, #28]
 80017c6:	f107 021c 	add.w	r2, r7, #28
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <nRF24_Reset+0x1fc>)
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	213e      	movs	r1, #62	; 0x3e
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fc6a 	bl	80010ac <nRF24_WriteRegisterX>
		}
	}

	// read RF setup register
	nRF24_ReadRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t) 1, registerRead, "Reading Default RF setup");
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <nRF24_Reset+0x200>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	2201      	movs	r2, #1
 80017e4:	2106      	movs	r1, #6
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd04 	bl	80011f4 <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_RF_SETUP_REG)
 80017ec:	7a7b      	ldrb	r3, [r7, #9]
 80017ee:	2b0e      	cmp	r3, #14
 80017f0:	d00b      	beq.n	800180a <nRF24_Reset+0x136>
	{
		nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t[]) {DEFAULT_RF_SETUP_REG}, (uint8_t) 1, "Setting default RF_SETUP");
 80017f2:	230e      	movs	r3, #14
 80017f4:	f887 3020 	strb.w	r3, [r7, #32]
 80017f8:	f107 0220 	add.w	r2, r7, #32
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <nRF24_Reset+0x204>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	2106      	movs	r1, #6
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fc51 	bl	80010ac <nRF24_WriteRegisterX>
	}

	// read RF_CH register
	nRF24_ReadRegisterX(nrf, nRF24_RF_CH_REG, (uint8_t) 1, registerRead, "Reading Default RF_CH");
 800180a:	f107 0208 	add.w	r2, r7, #8
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <nRF24_Reset+0x208>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	2201      	movs	r2, #1
 8001816:	2105      	movs	r1, #5
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fceb 	bl	80011f4 <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_RF_CH_REG)
 800181e:	7a7b      	ldrb	r3, [r7, #9]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d00b      	beq.n	800183c <nRF24_Reset+0x168>
	{
		nRF24_WriteRegisterX(nrf, nRF24_RF_SETUP_REG, (uint8_t[]) {DEFAULT_RF_CH_REG}, (uint8_t) 1, "Setting default RF_CH");
 8001824:	2302      	movs	r3, #2
 8001826:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800182a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <nRF24_Reset+0x20c>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2106      	movs	r1, #6
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fc38 	bl	80010ac <nRF24_WriteRegisterX>
	}

	// read Feature register
	nRF24_ReadRegisterX(nrf, nRF24_FEATURE_REG, (uint8_t) 1, registerRead, "Reading FEATURE reg");
 800183c:	f107 0208 	add.w	r2, r7, #8
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <nRF24_Reset+0x210>)
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	2201      	movs	r2, #1
 8001848:	211d      	movs	r1, #29
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fcd2 	bl	80011f4 <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_FEATURE_REG)
 8001850:	7a7b      	ldrb	r3, [r7, #9]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <nRF24_Reset+0x19a>
	{
		nRF24_WriteRegisterX(nrf, nRF24_FEATURE_REG, (uint8_t[]) {DEFAULT_FEATURE_REG}, (uint8_t) 1, "Set default FTR_REG");
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800185c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <nRF24_Reset+0x214>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	211d      	movs	r1, #29
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fc1f 	bl	80010ac <nRF24_WriteRegisterX>
	}

	// read DPL PX register
	nRF24_ReadRegisterX(nrf, nRF24_DYNPD_REG, (uint8_t) 1, registerRead, "Reading DPL_Px");
 800186e:	f107 0208 	add.w	r2, r7, #8
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <nRF24_Reset+0x218>)
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	211c      	movs	r1, #28
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fcb9 	bl	80011f4 <nRF24_ReadRegisterX>
	if (registerRead[1] != DEFAULT_DPL_PX)
 8001882:	7a7b      	ldrb	r3, [r7, #9]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <nRF24_Reset+0x1cc>
	{
		nRF24_WriteRegisterX(nrf, nRF24_DYNPD_REG, (uint8_t[]) {DEFAULT_DPL_PX}, (uint8_t) 1, "Reset DPL_Px");
 8001888:	2300      	movs	r3, #0
 800188a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800188e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <nRF24_Reset+0x21c>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	211c      	movs	r1, #28
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fc06 	bl	80010ac <nRF24_WriteRegisterX>
	}


	printf ("\n");
 80018a0:	200a      	movs	r0, #10
 80018a2:	f002 fe51 	bl	8004548 <putchar>
}
 80018a6:	bf00      	nop
 80018a8:	3730      	adds	r7, #48	; 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08005a0c 	.word	0x08005a0c
 80018b4:	08005a34 	.word	0x08005a34
 80018b8:	08005a4c 	.word	0x08005a4c
 80018bc:	08005a5c 	.word	0x08005a5c
 80018c0:	08005a74 	.word	0x08005a74
 80018c4:	08005a88 	.word	0x08005a88
 80018c8:	08005a9c 	.word	0x08005a9c
 80018cc:	08005aac 	.word	0x08005aac
 80018d0:	08005abc 	.word	0x08005abc
 80018d4:	08005acc 	.word	0x08005acc
 80018d8:	08005ae8 	.word	0x08005ae8
 80018dc:	08005b04 	.word	0x08005b04
 80018e0:	08005b1c 	.word	0x08005b1c
 80018e4:	08005b34 	.word	0x08005b34
 80018e8:	08005b48 	.word	0x08005b48
 80018ec:	08005b5c 	.word	0x08005b5c
 80018f0:	08005b6c 	.word	0x08005b6c

080018f4 <nRF24_EnableDynamicPayload>:

void nRF24_EnableDynamicPayload(nrfl2401 *nrf)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0}, setValue;
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	811a      	strh	r2, [r3, #8]
	if (nrf->config.enableDynamicPayload == SET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800190e:	2b01      	cmp	r3, #1
 8001910:	d120      	bne.n	8001954 <nRF24_EnableDynamicPayload+0x60>
	{
		nRF24_ReadRegisterX(nrf, nRF24_FEATURE_REG, (uint8_t) 1, readBuffer, "Reading FEATURE_REG");
 8001912:	f107 020c 	add.w	r2, r7, #12
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <nRF24_EnableDynamicPayload+0x68>)
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4613      	mov	r3, r2
 800191c:	2201      	movs	r2, #1
 800191e:	211d      	movs	r1, #29
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fc67 	bl	80011f4 <nRF24_ReadRegisterX>

		setValue = readBuffer[1] | nRF24_ENABLE_DYNAMIC_PAYLOAD;
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	72fb      	strb	r3, [r7, #11]
		nRF24_WriteRegisterX(nrf, nRF24_FEATURE_REG, &setValue, (uint8_t) 1, "Enabling dynamic payload");
 8001930:	f107 020b 	add.w	r2, r7, #11
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <nRF24_EnableDynamicPayload+0x6c>)
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	211d      	movs	r1, #29
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fbb5 	bl	80010ac <nRF24_WriteRegisterX>

		nRF24_WriteRegisterX(nrf, nRF24_DYNPD_REG, nrf->config.enableRxDataPipes, (uint8_t) 1, "EN_DPL data pipe");
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <nRF24_EnableDynamicPayload+0x70>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2301      	movs	r3, #1
 800194c:	211c      	movs	r1, #28
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fbac 	bl	80010ac <nRF24_WriteRegisterX>
	}
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08005b7c 	.word	0x08005b7c
 8001960:	08005b90 	.word	0x08005b90
 8001964:	08005bac 	.word	0x08005bac

08001968 <nRF24_PowerUp>:

void nRF24_PowerUp(nrfl2401 *nrf)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t[]) {nRF24_SET_PWR_UP}, (uint8_t) 1, "Enabling PWR_UP");
 8001970:	2302      	movs	r3, #2
 8001972:	723b      	strb	r3, [r7, #8]
 8001974:	f107 0208 	add.w	r2, r7, #8
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <nRF24_PowerUp+0x48>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	2100      	movs	r1, #0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fb93 	bl	80010ac <nRF24_WriteRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, (uint8_t[10]) {}, "Verifying PWR_UP");
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	811a      	strh	r2, [r3, #8]
 8001992:	f107 020c 	add.w	r2, r7, #12
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <nRF24_PowerUp+0x4c>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	2201      	movs	r2, #1
 800199e:	2100      	movs	r1, #0
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fc27 	bl	80011f4 <nRF24_ReadRegisterX>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	08005bc0 	.word	0x08005bc0
 80019b4:	08005bd0 	.word	0x08005bd0

080019b8 <nRF24_Initialization>:



NRF_STATUS nRF24_Initialization(nrfl2401 *nrf)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(nRF24_GPIO_PORT, rNRF24_CE_PIN, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(nRF24_GPIO_PORT, rNRF24_CSN_PIN, GPIO_PIN_RESET);
//	SET_CE();
//	RESET_CSN();

	nRF24_Reset(nrf);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fe87 	bl	80016d4 <nRF24_Reset>

//	// set PRIM_RX low
//	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);

	// switch to TX mode
	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f9be 	bl	8001d4c <nRF24_SetConfigureRegister>

	// set TX address
	nRF24_SetTxAddress(nrf, nrf->config.addressWidth);		// used only for PTX device
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fd83 	bl	80014e4 <nRF24_SetTxAddress>

	// enable RX data pipes
	nRF24_EnableRxDataPipes(nrf, (uint8_t) 1); 				// enabling data pipe 0 to receive the ACK
 80019de:	2101      	movs	r1, #1
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fdc9 	bl	8001578 <nRF24_EnableRxDataPipes>

	// Disable auto ACK for a respective data pipe if it needs to be
	nRF24_DisableAutoAck(nrf);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f966 	bl	8001cb8 <nRF24_DisableAutoAck>

	// set address field width
	nRF24_SetAddressFieldWidth(nrf, (uint8_t) 1);
 80019ec:	2101      	movs	r1, #1
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fdd8 	bl	80015a4 <nRF24_SetAddressFieldWidth>

	// Data rate
	nRF24_SetDataRate(nrf);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fded 	bl	80015d4 <nRF24_SetDataRate>

	// set channel
	nRF24_SetChannel(nrf);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f826 	bl	8001a4c <nRF24_SetChannel>

	// RF setup
//	nRF24_SetupRF(nrf, (uint8_t) 1);

	nRF24_SetRxAddress(nrf, nrf->config.addressWidth);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fd81 	bl	8001510 <nRF24_SetRxAddress>

	if (nrf->config.enableDynamicPayload == SET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d103      	bne.n	8001a20 <nRF24_Initialization+0x68>
	{
		nRF24_EnableDynamicPayload(nrf);				// Enable dynamic payload
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff6b 	bl	80018f4 <nRF24_EnableDynamicPayload>
 8001a1e:	e003      	b.n	8001a28 <nRF24_Initialization+0x70>
	}
	else
	{
		nRF24_SetPayloadWidth(nrf, (uint8_t) 1);		// todo - no need in PTX
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f838 	bl	8001a98 <nRF24_SetPayloadWidth>
	}

	nRF24_EnablePayloadWithAck(nrf);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f917 	bl	8001c5c <nRF24_EnablePayloadWithAck>
//	}
//
//	nRF24_SetConfigureRegister(nrf, nRF24_PWR_UP, PWR_UP);

//	SET_CE();
	ReadStatusRegister(nrf, RESET);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fd3b 	bl	80014ac <ReadStatusRegister>

	nRF24_FlushTX(nrf);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fe36 	bl	80016a8 <nRF24_FlushTX>


	nRF24_PowerUp(nrf);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff93 	bl	8001968 <nRF24_PowerUp>

//	nRF24_PowerUp(nrf);


//	while(1);
}
 8001a42:	bf00      	nop
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <nRF24_SetChannel>:
	}
	return NRF_OK;
}

void nRF24_SetChannel(nrfl2401 *nrf)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]

	nRF24_WriteRegisterX(nrf, nRF24_RF_CH_REG, &nrf->config.rfChannel, (uint8_t) 1, "Setting channel");
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f103 0210 	add.w	r2, r3, #16
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <nRF24_SetChannel+0x44>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fb1c 	bl	80010ac <nRF24_WriteRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_RF_CH_REG, (uint8_t) 1, readBuffer, "Reading RF_CH");
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <nRF24_SetChannel+0x48>)
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2105      	movs	r1, #5
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fbb6 	bl	80011f4 <nRF24_ReadRegisterX>

//	if (nRF24_VerifyRegister(actual, expected))
}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	08005be4 	.word	0x08005be4
 8001a94:	08005bf4 	.word	0x08005bf4

08001a98 <nRF24_SetPayloadWidth>:

void nRF24_SetPayloadWidth(nrfl2401 *nrf, uint8_t size)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e010      	b.n	8001acc <nRF24_SetPayloadWidth+0x34>
	{
//		nRF24_WriteRegister(nrf, nRF24_RX_PAYLOAD[i], nrf->config.rxPayloadWidths[i], size);

		nRF24_WriteRegisterX(nrf, nRF24_RX_PAYLOAD[i], &nrf->config.rxPayloadWidths[i], size, "Payload width");
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <nRF24_SetPayloadWidth+0x48>)
 8001aae:	5cd1      	ldrb	r1, [r2, r3]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	78f8      	ldrb	r0, [r7, #3]
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <nRF24_SetPayloadWidth+0x4c>)
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff faf3 	bl	80010ac <nRF24_WriteRegisterX>
	for (uint8_t i = 0; i < nrf->config.txDevicesUsed; i++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3e8      	bcc.n	8001aaa <nRF24_SetPayloadWidth+0x12>

	}
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	08005c04 	.word	0x08005c04

08001ae8 <nRF24_IRQHandler>:
	}
	return false;
}

void nRF24_IRQHandler(nrfl2401 *nrfRadio)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[10] = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	811a      	strh	r2, [r3, #8]
	printf ("\nIRQ handler...\n");
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <nRF24_IRQHandler+0x3c>)
 8001afe:	f002 fd93 	bl	8004628 <puts>
//	SendSerialData(&USART2_handle, "\n>>> IRQ handler triggered on PTX...\n", "");

	nRF24_ReadFifo(nrfRadio);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f812 	bl	8001b2c <nRF24_ReadFifo>

	// TODO - check if TX FIFO is full - if it is, call nRF24_TransmitPayload()

	// disable IRQ bits
	nRF24_DisableIRQ(nrfRadio);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fda1 	bl	8001650 <nRF24_DisableIRQ>

	// clear pending bit
	__HAL_GPIO_EXTI_CLEAR_IT(nRF24_IRQ_PIN);
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <nRF24_IRQHandler+0x40>)
 8001b10:	2220      	movs	r2, #32
 8001b12:	615a      	str	r2, [r3, #20]

	nrfRadio->state = NRF_TX_OK;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	08005c2c 	.word	0x08005c2c
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <nRF24_ReadFifo>:

void nRF24_ReadFifo(nrfl2401 *nrf)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	6078      	str	r0, [r7, #4]
	printf ("Reading FIFO...\n");
 8001b34:	4810      	ldr	r0, [pc, #64]	; (8001b78 <nRF24_ReadFifo+0x4c>)
 8001b36:	f002 fd77 	bl	8004628 <puts>
	uint8_t readBuffer[10] = {0};
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	811a      	strh	r2, [r3, #8]
	nRF24_ReadRegisterX(nrf, nRF24_FIFO_STATUS_REG, (uint8_t) 1, readBuffer, "Reading FIFO status");
 8001b46:	f107 020c 	add.w	r2, r7, #12
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <nRF24_ReadFifo+0x50>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	2201      	movs	r2, #1
 8001b52:	2117      	movs	r1, #23
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fb4d 	bl	80011f4 <nRF24_ReadRegisterX>

	nRF24_ReadRegisterX(nrf, nRF24_CMD_R_PAYLOAD, (uint8_t) 2, readBuffer, "Reading FIFO");
 8001b5a:	f107 020c 	add.w	r2, r7, #12
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <nRF24_ReadFifo+0x54>)
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4613      	mov	r3, r2
 8001b64:	2202      	movs	r2, #2
 8001b66:	2161      	movs	r1, #97	; 0x61
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fb43 	bl	80011f4 <nRF24_ReadRegisterX>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08005c3c 	.word	0x08005c3c
 8001b7c:	08005c4c 	.word	0x08005c4c
 8001b80:	08005c60 	.word	0x08005c60

08001b84 <nRF24_TransmitPayload>:
//
//	nRF24_ReadRegisterX(nrf, nRF24_CMD_R_PAYLOAD, (uint8_t) 2, readBuffer, "Reading FIFO");	// 0x0011 1111
}

NRF_STATUS nRF24_TransmitPayload(nrfl2401 *nrf, uint8_t *data, uint8_t size)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b08d      	sub	sp, #52	; 0x34
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
	printf ("\n ********** Sending payload data %c ************\n", *data);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	482b      	ldr	r0, [pc, #172]	; (8001c48 <nRF24_TransmitPayload+0xc4>)
 8001b9a:	f002 fcbd 	bl	8004518 <iprintf>

//	// switch to TX mode
//	nRF24_SetConfigureRegister(nrf, nRF24_PRIM_RX, TX_CTRL);

	nrf->state = NRF_TX_BUSY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<1; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	e034      	b.n	8001c14 <nRF24_TransmitPayload+0x90>
	{
		char txt[20] = "\nTX payload_";
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <nRF24_TransmitPayload+0xc8>)
 8001bac:	f107 0410 	add.w	r4, r7, #16
 8001bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb2:	c407      	stmia	r4!, {r0, r1, r2}
 8001bb4:	7023      	strb	r3, [r4, #0]
 8001bb6:	f107 031d 	add.w	r3, r7, #29
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f8c3 2003 	str.w	r2, [r3, #3]
		sprintf (txt, strcat(txt, "%d"), i);
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb14 	bl	80001f4 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <nRF24_TransmitPayload+0xcc>)
 8001bd8:	8811      	ldrh	r1, [r2, #0]
 8001bda:	7892      	ldrb	r2, [r2, #2]
 8001bdc:	8019      	strh	r1, [r3, #0]
 8001bde:	709a      	strb	r2, [r3, #2]
 8001be0:	f107 0110 	add.w	r1, r7, #16
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd24 	bl	8004638 <siprintf>

		nRF24_WriteRegisterX(nrf, nRF24_CMD_W_PAYLOAD, &data[i], size, txt);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	79f9      	ldrb	r1, [r7, #7]
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	21a0      	movs	r1, #160	; 0xa0
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fa52 	bl	80010ac <nRF24_WriteRegisterX>

		nRF24_PrintDetails(&nrfRadio);
 8001c08:	4812      	ldr	r0, [pc, #72]	; (8001c54 <nRF24_TransmitPayload+0xd0>)
 8001c0a:	f7ff fbbf 	bl	800138c <nRF24_PrintDetails>
	for (int i=0; i<1; i++)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3301      	adds	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	ddc7      	ble.n	8001baa <nRF24_TransmitPayload+0x26>
	}
	SET_CE();
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <nRF24_TransmitPayload+0xd4>)
 8001c22:	f000 fbf1 	bl	8002408 <HAL_GPIO_WritePin>

//	HAL_Delay(5);
	while(nrf->state == NRF_TX_BUSY); // THIS AND the following line should be in the callback I guess
 8001c26:	bf00      	nop
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0fb      	beq.n	8001c28 <nRF24_TransmitPayload+0xa4>

	RESET_CE();
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c36:	4808      	ldr	r0, [pc, #32]	; (8001c58 <nRF24_TransmitPayload+0xd4>)
 8001c38:	f000 fbe6 	bl	8002408 <HAL_GPIO_WritePin>
}
 8001c3c:	bf00      	nop
 8001c3e:	4618      	mov	r0, r3
 8001c40:	372c      	adds	r7, #44	; 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	08005c84 	.word	0x08005c84
 8001c4c:	08005cbc 	.word	0x08005cbc
 8001c50:	08005cb8 	.word	0x08005cb8
 8001c54:	20000208 	.word	0x20000208
 8001c58:	40020800 	.word	0x40020800

08001c5c <nRF24_EnablePayloadWithAck>:

void nRF24_EnablePayloadWithAck(nrfl2401 *nrf)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[5] = {0}, setValue;
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	711a      	strb	r2, [r3, #4]
	if (nrf->config.enablePayloadkWithAck == SET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d117      	bne.n	8001ca8 <nRF24_EnablePayloadWithAck+0x4c>
	{
		nRF24_ReadRegisterX(nrf, nRF24_FEATURE_REG, 1, readBuffer, "Reading FEATURE_REG");
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <nRF24_EnablePayloadWithAck+0x54>)
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	2201      	movs	r2, #1
 8001c84:	211d      	movs	r1, #29
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fab4 	bl	80011f4 <nRF24_ReadRegisterX>

		setValue = readBuffer[1] | nRF24_ENABLE_PAYLOAD_WITH_ACK;
 8001c8c:	7c7b      	ldrb	r3, [r7, #17]
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteRegisterX(nrf, nRF24_FEATURE_REG, &setValue, (uint8_t) 1, "Enable PAYLOAD with ACK");
 8001c96:	f107 020f 	add.w	r2, r7, #15
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <nRF24_EnablePayloadWithAck+0x58>)
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	211d      	movs	r1, #29
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fa02 	bl	80010ac <nRF24_WriteRegisterX>
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08005b7c 	.word	0x08005b7c
 8001cb4:	08005cd0 	.word	0x08005cd0

08001cb8 <nRF24_DisableAutoAck>:

void nRF24_DisableAutoAck(nrfl2401 *nrf)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
	uint8_t regState;
	uint8_t rxBuffer[2] = {0};
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81bb      	strh	r3, [r7, #12]

	if (nrf->config.disableAutoAck[0] > 0)		// the first element represents the size of data pipes who's ACK is to be disabled
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02c      	beq.n	8001d28 <nRF24_DisableAutoAck+0x70>
	{
		nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, 1, rxBuffer, "Reading EN_AA");	// 0x0011 1111
 8001cce:	f107 020c 	add.w	r2, r7, #12
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <nRF24_DisableAutoAck+0x8c>)
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fa89 	bl	80011f4 <nRF24_ReadRegisterX>

		for (uint8_t i = 1; i <= nrf->config.disableAutoAck[0]; i++)
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e010      	b.n	8001d0a <nRF24_DisableAutoAck+0x52>
		{
			regState = (rxBuffer[1] & ~(nrf->config.disableAutoAck[i]));
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
 8001cea:	b25a      	sxtb	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	440b      	add	r3, r1
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	73bb      	strb	r3, [r7, #14]
		for (uint8_t i = 1; i <= nrf->config.disableAutoAck[0]; i++)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	3301      	adds	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d9e8      	bls.n	8001ce8 <nRF24_DisableAutoAck+0x30>
		}
		nRF24_WriteRegisterX(nrf, nRF24_EN_AA_REG, &regState, (uint8_t) 1, "Disable ACK");
 8001d16:	f107 020e 	add.w	r2, r7, #14
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <nRF24_DisableAutoAck+0x90>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2101      	movs	r1, #1
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff f9c2 	bl	80010ac <nRF24_WriteRegisterX>
	}
	nRF24_ReadRegisterX(nrf, nRF24_EN_AA_REG, 1, rxBuffer, "Reading EN_AA");
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <nRF24_DisableAutoAck+0x8c>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	2201      	movs	r2, #1
 8001d34:	2101      	movs	r1, #1
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fa5c 	bl	80011f4 <nRF24_ReadRegisterX>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	08005aac 	.word	0x08005aac
 8001d48:	08005ce8 	.word	0x08005ce8

08001d4c <nRF24_SetConfigureRegister>:

void nRF24_SetConfigureRegister(nrfl2401 *nrf, NRF_ConfigRegBits configRegBit, NRF_FLAG setFlag)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	70bb      	strb	r3, [r7, #2]
	uint8_t regState;
	uint8_t rxBuffer[2] = {0};
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	81bb      	strh	r3, [r7, #12]

	// read the initial state of config register
	nRF24_ReadRegisterX(nrf, nRF24_CONFIG_REG, (uint8_t) 1, rxBuffer, "Read Config register");
 8001d60:	f107 020c 	add.w	r2, r7, #12
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <nRF24_SetConfigureRegister+0x78>)
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fa40 	bl	80011f4 <nRF24_ReadRegisterX>

	// set the flag that's being passed
	regState = (setFlag == BIT_SET) ? (rxBuffer[1] | 1 << configRegBit) : (rxBuffer[1] & ~(1 << configRegBit));
 8001d74:	78bb      	ldrb	r3, [r7, #2]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10a      	bne.n	8001d90 <nRF24_SetConfigureRegister+0x44>
 8001d7a:	7b7b      	ldrb	r3, [r7, #13]
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e00b      	b.n	8001da8 <nRF24_SetConfigureRegister+0x5c>
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteRegisterX(nrf, nRF24_CONFIG_REG, &regState, (uint8_t) 1, "Write Config register");
 8001daa:	f107 020f 	add.w	r2, r7, #15
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <nRF24_SetConfigureRegister+0x7c>)
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	2100      	movs	r1, #0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff f978 	bl	80010ac <nRF24_WriteRegisterX>
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08005cf4 	.word	0x08005cf4
 8001dc8:	08005d0c 	.word	0x08005d0c

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f92b 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f002 f856 	bl	8003eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f943 	bl	80020ba <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f000 f90b 	bl	8002066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000030 	.word	0x20000030
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000014 	.word	0x20000014
 8001e94:	20000168 	.word	0x20000168

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000168 	.word	0x20000168

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff3e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff31 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa2 	bl	800200c <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e159      	b.n	80023a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8148 	bne.w	800239e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d00b      	beq.n	800212e <HAL_GPIO_Init+0x5a>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002122:	2b11      	cmp	r3, #17
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b12      	cmp	r3, #18
 800212c:	d130      	bne.n	8002190 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0xfc>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a2 	beq.w	800239e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a51      	ldr	r2, [pc, #324]	; (80023bc <HAL_GPIO_Init+0x2e8>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a48      	ldr	r2, [pc, #288]	; (80023c0 <HAL_GPIO_Init+0x2ec>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x202>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <HAL_GPIO_Init+0x2f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x1fe>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a46      	ldr	r2, [pc, #280]	; (80023c8 <HAL_GPIO_Init+0x2f4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a45      	ldr	r2, [pc, #276]	; (80023cc <HAL_GPIO_Init+0x2f8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x1f6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a44      	ldr	r2, [pc, #272]	; (80023d0 <HAL_GPIO_Init+0x2fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x1f2>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4934      	ldr	r1, [pc, #208]	; (80023bc <HAL_GPIO_Init+0x2e8>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_GPIO_Init+0x300>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231a:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_GPIO_Init+0x300>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_GPIO_Init+0x300>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <HAL_GPIO_Init+0x300>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f aea2 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	3724      	adds	r7, #36	; 0x24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	401a      	ands	r2, r3
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	429a      	cmp	r2, r3
 8002452:	d104      	bne.n	800245e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	041a      	lsls	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e25b      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d075      	beq.n	800257a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248e:	4ba3      	ldr	r3, [pc, #652]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4ba0      	ldr	r3, [pc, #640]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b9d      	ldr	r3, [pc, #628]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b99      	ldr	r3, [pc, #612]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e236      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x74>
 80024d6:	4b91      	ldr	r3, [pc, #580]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a90      	ldr	r2, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8a      	ldr	r2, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a87      	ldr	r2, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xb0>
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a83      	ldr	r2, [pc, #524]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a80      	ldr	r2, [pc, #512]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fcb6 	bl	8001e98 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff fcb2 	bl	8001e98 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1fb      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xc0>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fca2 	bl	8001e98 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fc9e 	bl	8001e98 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1e7      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b6c      	ldr	r3, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0xe8>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d11c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1bb      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b56      	ldr	r3, [pc, #344]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4952      	ldr	r1, [pc, #328]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	e03a      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e0:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_RCC_OscConfig+0x2b0>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff fc57 	bl	8001e98 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7ff fc53 	bl	8001e98 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e19c      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4940      	ldr	r1, [pc, #256]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <HAL_RCC_OscConfig+0x2b0>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff fc36 	bl	8001e98 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002630:	f7ff fc32 	bl	8001e98 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e17b      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d030      	beq.n	80026bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x2b4>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7ff fc16 	bl	8001e98 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002670:	f7ff fc12 	bl	8001e98 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e15b      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x200>
 800268e:	e015      	b.n	80026bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x2b4>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff fbff 	bl	8001e98 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fbfb 	bl	8001e98 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e144      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a0 	beq.w	800280a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x2b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d121      	bne.n	800274a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_RCC_OscConfig+0x2b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_RCC_OscConfig+0x2b8>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff fbc1 	bl	8001e98 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e011      	b.n	800273e <HAL_RCC_OscConfig+0x2ce>
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	42470000 	.word	0x42470000
 8002724:	42470e80 	.word	0x42470e80
 8002728:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7ff fbb4 	bl	8001e98 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0fd      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x4d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x2f0>
 8002752:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	e01c      	b.n	800279a <HAL_RCC_OscConfig+0x32a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x312>
 8002768:	4b77      	ldr	r3, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a76      	ldr	r2, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	4b74      	ldr	r3, [pc, #464]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a73      	ldr	r2, [pc, #460]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x32a>
 8002782:	4b71      	ldr	r3, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a70      	ldr	r2, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a6d      	ldr	r2, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7ff fb79 	bl	8001e98 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff fb75 	bl	8001e98 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0bc      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <HAL_RCC_OscConfig+0x33a>
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fb63 	bl	8001e98 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7ff fb5f 	bl	8001e98 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0a6      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8092 	beq.w	8002938 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d05c      	beq.n	80028da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d141      	bne.n	80028ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <HAL_RCC_OscConfig+0x4dc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fb33 	bl	8001e98 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fb2f 	bl	8001e98 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e078      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	019b      	lsls	r3, r3, #6
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	4933      	ldr	r1, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCC_OscConfig+0x4dc>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff fb08 	bl	8001e98 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff fb04 	bl	8001e98 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e04d      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x41c>
 80028aa:	e045      	b.n	8002938 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x4dc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7ff faf1 	bl	8001e98 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7ff faed 	bl	8001e98 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e036      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x44a>
 80028d8:	e02e      	b.n	8002938 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e029      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_RCC_OscConfig+0x4d8>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11c      	bne.n	8002934 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d115      	bne.n	8002934 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002914:	4293      	cmp	r3, r2
 8002916:	d10d      	bne.n	8002934 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	40023800 	.word	0x40023800
 800294c:	42470060 	.word	0x42470060

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0cc      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d90c      	bls.n	800298c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0b8      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d044      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e067      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4934      	ldr	r1, [pc, #208]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a40:	f7ff fa2a 	bl	8001e98 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7ff fa26 	bl	8001e98 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d20c      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e032      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad6:	f000 f821 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ada:	4601      	mov	r1, r0
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	fa21 f303 	lsr.w	r3, r1, r3
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f98a 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08005dc4 	.word	0x08005dc4
 8002b14:	20000030 	.word	0x20000030
 8002b18:	20000010 	.word	0x20000010

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d007      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x32>
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d008      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x38>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 808d 	bne.w	8002c62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b4a:	60bb      	str	r3, [r7, #8]
       break;
 8002b4c:	e08c      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b50:	60bb      	str	r3, [r7, #8]
      break;
 8002b52:	e089      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5e:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d023      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	ea03 0501 	and.w	r5, r3, r1
 8002b80:	ea04 0602 	and.w	r6, r4, r2
 8002b84:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b86:	fb02 f106 	mul.w	r1, r2, r6
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	fb02 f205 	mul.w	r2, r2, r5
 8002b90:	440a      	add	r2, r1
 8002b92:	493a      	ldr	r1, [pc, #232]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002b94:	fba5 0101 	umull	r0, r1, r5, r1
 8002b98:	1853      	adds	r3, r2, r1
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	f7fd fb83 	bl	80002b0 <__aeabi_uldivmod>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e049      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	ea03 0501 	and.w	r5, r3, r1
 8002bc8:	ea04 0602 	and.w	r6, r4, r2
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4632      	mov	r2, r6
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	0154      	lsls	r4, r2, #5
 8002bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bde:	014b      	lsls	r3, r1, #5
 8002be0:	4619      	mov	r1, r3
 8002be2:	4622      	mov	r2, r4
 8002be4:	1b49      	subs	r1, r1, r5
 8002be6:	eb62 0206 	sbc.w	r2, r2, r6
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f04f 0400 	mov.w	r4, #0
 8002bf2:	0194      	lsls	r4, r2, #6
 8002bf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf8:	018b      	lsls	r3, r1, #6
 8002bfa:	1a5b      	subs	r3, r3, r1
 8002bfc:	eb64 0402 	sbc.w	r4, r4, r2
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	00e2      	lsls	r2, r4, #3
 8002c0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c0e:	00d9      	lsls	r1, r3, #3
 8002c10:	460b      	mov	r3, r1
 8002c12:	4614      	mov	r4, r2
 8002c14:	195b      	adds	r3, r3, r5
 8002c16:	eb44 0406 	adc.w	r4, r4, r6
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	02a2      	lsls	r2, r4, #10
 8002c24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c28:	0299      	lsls	r1, r3, #10
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4621      	mov	r1, r4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f7fd fb38 	bl	80002b0 <__aeabi_uldivmod>
 8002c40:	4603      	mov	r3, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	3301      	adds	r3, #1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c64:	60bb      	str	r3, [r7, #8]
      break;
 8002c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c68:	68bb      	ldr	r3, [r7, #8]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	017d7840 	.word	0x017d7840

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000030 	.word	0x20000030

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0b5b      	lsrs	r3, r3, #13
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08005dd4 	.word	0x08005dd4

08002cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e056      	b.n	8002d80 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f84b 	bl	8002d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	ea42 0103 	orr.w	r1, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f003 0104 	and.w	r1, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002daa:	2301      	movs	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x26>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e18a      	b.n	80030d8 <HAL_SPI_TransmitReceive+0x33c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dca:	f7ff f865 	bl	8001e98 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00f      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x70>
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d107      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x68>
 8002dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d003      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e0a:	e15b      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x82>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x82>
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e24:	e14e      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2205      	movs	r2, #5
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d007      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e96:	d178      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x10a>
 8002ea0:	8b7b      	ldrh	r3, [r7, #26]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d166      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	1c9a      	adds	r2, r3, #2
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eca:	e053      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d11b      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	1c9a      	adds	r2, r3, #2
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d119      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x1b8>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	b292      	uxth	r2, r2
 8002f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f54:	f7fe ffa0 	bl	8001e98 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d807      	bhi.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6a:	d003      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f72:	e0a7      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1a6      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x130>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1a1      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x130>
 8002f88:	e07c      	b.n	8003084 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x1fc>
 8002f92:	8b7b      	ldrh	r3, [r7, #26]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d16b      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	7812      	ldrb	r2, [r2, #0]
 8002fa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbe:	e057      	b.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11c      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d114      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d119      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2ae>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003046:	2301      	movs	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800304a:	f7fe ff25 	bl	8001e98 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003056:	429a      	cmp	r2, r3
 8003058:	d803      	bhi.n	8003062 <HAL_SPI_TransmitReceive+0x2c6>
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003060:	d102      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x2cc>
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800306e:	e029      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1a2      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x224>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d19d      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f993 	bl	80033b4 <SPI_EndRxTxTransaction>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030a0:	e010      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	e000      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3730      	adds	r7, #48	; 0x30
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
    return;
 8003122:	e0ba      	b.n	800329a <HAL_SPI_IRQHandler+0x1ba>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_SPI_IRQHandler+0x66>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	09db      	lsrs	r3, r3, #7
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    return;
 8003144:	e0a9      	b.n	800329a <HAL_SPI_IRQHandler+0x1ba>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_SPI_IRQHandler+0x8c>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8097 	beq.w	800329a <HAL_SPI_IRQHandler+0x1ba>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8090 	beq.w	800329a <HAL_SPI_IRQHandler+0x1ba>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d023      	beq.n	80031ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d011      	beq.n	80031b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0204 	orr.w	r2, r3, #4
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e00b      	b.n	80031ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]
        return;
 80031cc:	e065      	b.n	800329a <HAL_SPI_IRQHandler+0x1ba>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d014      	beq.n	8003204 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0208 	orr.w	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	2b00      	cmp	r3, #0
 8003230:	d032      	beq.n	8003298 <HAL_SPI_IRQHandler+0x1b8>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003240:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_SPI_IRQHandler+0x17e>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d018      	beq.n	8003290 <HAL_SPI_IRQHandler+0x1b0>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0203 	bic.w	r2, r2, #3
 800326c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_SPI_IRQHandler+0x19e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_SPI_IRQHandler+0x1c0>)
 800327c:	651a      	str	r2, [r3, #80]	; 0x50
//          {
//            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
//          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <HAL_SPI_IRQHandler+0x1c0>)
 800328c:	651a      	str	r2, [r3, #80]	; 0x50
        if (hspi->hdmatx != NULL)
 800328e:	e002      	b.n	8003296 <HAL_SPI_IRQHandler+0x1b6>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f807 	bl	80032a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003296:	bf00      	nop
 8003298:	bf00      	nop
  }
}
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	080032b9 	.word	0x080032b9

080032a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */

}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff ffe6 	bl	80032a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f0:	e04c      	b.n	800338c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	d048      	beq.n	800338c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80032fa:	f7fe fdcd 	bl	8001e98 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d902      	bls.n	8003310 <SPI_WaitFlagStateUntilTimeout+0x30>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13d      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003328:	d111      	bne.n	800334e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003332:	d004      	beq.n	800333e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d107      	bne.n	800334e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d10f      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e00f      	b.n	80033ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d1a3      	bne.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <SPI_EndRxTxTransaction+0x7c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <SPI_EndRxTxTransaction+0x80>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0d5b      	lsrs	r3, r3, #21
 80033cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033de:	d112      	bne.n	8003406 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff ff78 	bl	80032e0 <SPI_WaitFlagStateUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e00f      	b.n	8003426 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3b01      	subs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d0f2      	beq.n	8003406 <SPI_EndRxTxTransaction+0x52>
 8003420:	e000      	b.n	8003424 <SPI_EndRxTxTransaction+0x70>
        break;
 8003422:	bf00      	nop
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000030 	.word	0x20000030
 8003434:	165e9f81 	.word	0x165e9f81

08003438 <GetPCLK>:
static USART_Handle_t *ptrUSARTx;
bool endLine = false;


uint32_t GetPCLK(USART_TypeDef *pUSARTx)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	uint32_t pclk;
	if (pUSARTx == USART1 || USART6)
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7ff fc2a 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8003444:	60f8      	str	r0, [r7, #12]
	}
	else if (pUSARTx == USART2)
	{
		pclk = HAL_RCC_GetPCLK1Freq();
	}
	return pclk;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <USART_EnablePeripheralClk>:

/*
 * @USART_EnablePeripheralClk: Enables USARTx clock
 */
static void USART_EnablePeripheralClk(USART_TypeDef *pUSARTx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	if (pUSARTx == USART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <USART_EnablePeripheralClk+0x54>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d106      	bne.n	800346e <USART_EnablePeripheralClk+0x1e>
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART1EN;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 8003466:	f043 0310 	orr.w	r3, r3, #16
 800346a:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pUSARTx == USART6)
	{
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
	}
}
 800346c:	e014      	b.n	8003498 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <USART_EnablePeripheralClk+0x5c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d106      	bne.n	8003484 <USART_EnablePeripheralClk+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003482:	e009      	b.n	8003498 <USART_EnablePeripheralClk+0x48>
	else if (pUSARTx == USART6)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <USART_EnablePeripheralClk+0x60>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d105      	bne.n	8003498 <USART_EnablePeripheralClk+0x48>
		RCC->APB1ENR |= RCC_APB2ENR_USART6EN;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <USART_EnablePeripheralClk+0x58>)
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40011000 	.word	0x40011000
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40004400 	.word	0x40004400
 80034b0:	40011400 	.word	0x40011400

080034b4 <USART_TransmitData>:

/*
 * @USART_TransmitData: Enables USART control bits
 */
USART_State USART_TransmitData(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State != USART_TX_BUSY)
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <USART_TransmitData+0x3c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	7c1b      	ldrb	r3, [r3, #16]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d00d      	beq.n	80034de <USART_TransmitData+0x2a>
	{
		ptrUSARTx->USART_State = USART_TX_BUSY;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <USART_TransmitData+0x3c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2203      	movs	r2, #3
 80034c8:	741a      	strb	r2, [r3, #16]
		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);  // set Transmit Data Empty & Transmission Complete control bits
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <USART_TransmitData+0x3c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <USART_TransmitData+0x3c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80034dc:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <USART_TransmitData+0x3c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	7c1b      	ldrb	r3, [r3, #16]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	200000d0 	.word	0x200000d0

080034f4 <USART_RxData>:

USART_State USART_RxData(USART_State desiredState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	if (ptrUSARTx->USART_State != desiredState && ptrUSARTx->USART_State != USART_READY)
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <USART_RxData+0x50>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	7c1b      	ldrb	r3, [r3, #16]
 8003504:	79fa      	ldrb	r2, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d012      	beq.n	8003530 <USART_RxData+0x3c>
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <USART_RxData+0x50>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	7c1b      	ldrb	r3, [r3, #16]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00d      	beq.n	8003530 <USART_RxData+0x3c>
	{
		ptrUSARTx->USART_State = desiredState;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <USART_RxData+0x50>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	79fa      	ldrb	r2, [r7, #7]
 800351a:	741a      	strb	r2, [r3, #16]

		USART_ENABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE | USART_CR1_RE);
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <USART_RxData+0x50>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <USART_RxData+0x50>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 800352e:	60da      	str	r2, [r3, #12]
	}
	return ptrUSARTx->USART_State;
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <USART_RxData+0x50>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	7c1b      	ldrb	r3, [r3, #16]
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	200000d0 	.word	0x200000d0

08003548 <USART2_IRQHandler>:

/*
 * @USART2_IRQHandler: IRQ handler for servicing USART2 interrupts
 */
void USART2_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	endLine = false;
 800354c:	4b48      	ldr	r3, [pc, #288]	; (8003670 <USART2_IRQHandler+0x128>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

	// Transmit buffer empty
	if (ptrUSARTx->pUSARTx->SR & USART_SR_TXE)
 8003552:	4b48      	ldr	r3, [pc, #288]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d019      	beq.n	8003596 <USART2_IRQHandler+0x4e>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8003562:	4b44      	ldr	r3, [pc, #272]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	7c1b      	ldrb	r3, [r3, #16]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d114      	bne.n	8003596 <USART2_IRQHandler+0x4e>
		{
			// TXE
			if (ptrUSARTx->txLength)		// if there is stuff to send...
 800356c:	4b41      	ldr	r3, [pc, #260]	; (8003674 <USART2_IRQHandler+0x12c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	7f1b      	ldrb	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <USART2_IRQHandler+0x4e>
			{
				ptrUSARTx->pUSARTx->DR = *ptrUSARTx->txBuffer++; // send to serial
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	6953      	ldr	r3, [r2, #20]
 800357c:	1c59      	adds	r1, r3, #1
 800357e:	6151      	str	r1, [r2, #20]
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
				ptrUSARTx->txLength--;
 800358a:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <USART2_IRQHandler+0x12c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	7f1a      	ldrb	r2, [r3, #28]
 8003590:	3a01      	subs	r2, #1
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	771a      	strb	r2, [r3, #28]
			}
		}
	}

	// RXNE
	if (ptrUSARTx->pUSARTx->SR & USART_SR_RXNE)
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <USART2_IRQHandler+0xa0>
	{
		ptrUSARTx->rxBuffer[ptrUSARTx->txIdx] = ptrUSARTx->pUSARTx->DR;
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	b2ca      	uxtb	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]

		if(ptrUSARTx->rxBuffer[ptrUSARTx->txIdx++] == '\r')
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6999      	ldr	r1, [r3, #24]
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80035d0:	1c50      	adds	r0, r2, #1
 80035d2:	b2c0      	uxtb	r0, r0
 80035d4:	f883 0020 	strb.w	r0, [r3, #32]
 80035d8:	4613      	mov	r3, r2
 80035da:	440b      	add	r3, r1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b0d      	cmp	r3, #13
 80035e0:	d102      	bne.n	80035e8 <USART2_IRQHandler+0xa0>
		{
			endLine = true;
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <USART2_IRQHandler+0x128>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (ptrUSARTx->pUSARTx->SR & USART_SR_TC) // transmission complete
 80035e8:	4b22      	ldr	r3, [pc, #136]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01f      	beq.n	8003638 <USART2_IRQHandler+0xf0>
	{
		if (ptrUSARTx->USART_State == USART_TX_BUSY)
 80035f8:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <USART2_IRQHandler+0x12c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	7c1b      	ldrb	r3, [r3, #16]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d107      	bne.n	8003612 <USART2_IRQHandler+0xca>
		{
			if (!ptrUSARTx->txLength)		 // if no more bytes to send
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	7f1b      	ldrb	r3, [r3, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d115      	bne.n	8003638 <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 800360c:	f000 f834 	bl	8003678 <USART_CloseTransmission>
 8003610:	e012      	b.n	8003638 <USART2_IRQHandler+0xf0>
			}
		}
		else if (ptrUSARTx->USART_State == USART_RX_BUSY)
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	7c1b      	ldrb	r3, [r3, #16]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d10d      	bne.n	8003638 <USART2_IRQHandler+0xf0>
		{
			if (endLine)
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <USART2_IRQHandler+0x128>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <USART2_IRQHandler+0xf0>
			{
				USART_CloseTransmission();
 8003624:	f000 f828 	bl	8003678 <USART_CloseTransmission>
				ptrUSARTx->TxEndOfLineIdx++;
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <USART2_IRQHandler+0x12c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003630:	3201      	adds	r2, #1
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
	}
	ptrUSARTx->txIdx &= ptrUSARTx->bitMask;
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <USART2_IRQHandler+0x12c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	7fda      	ldrb	r2, [r3, #31]
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	400a      	ands	r2, r1
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f883 2020 	strb.w	r2, [r3, #32]
	ptrUSARTx->rxIdx &= ptrUSARTx->bitMask;
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <USART2_IRQHandler+0x12c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	7fda      	ldrb	r2, [r3, #31]
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <USART2_IRQHandler+0x12c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	400a      	ands	r2, r1
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200000d4 	.word	0x200000d4
 8003674:	200000d0 	.word	0x200000d0

08003678 <USART_CloseTransmission>:

static void USART_CloseTransmission()
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
	if (ptrUSARTx->USART_State == USART_RX_BUSY)
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <USART_CloseTransmission+0x50>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	7c1b      	ldrb	r3, [r3, #16]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d00e      	beq.n	80036a4 <USART_CloseTransmission+0x2c>
		//USART_ApplicationCallback(ptrUSARTx);
//		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_RXNEIE);
//		ptrUSARTx->rxLength = ptrUSARTx->rxSize;	// restoring the original RX size
//		ptrUSARTx->rxBufferIdx = 0;
	}
	else if (ptrUSARTx->USART_State == USART_TX_BUSY)
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <USART_CloseTransmission+0x50>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	7c1b      	ldrb	r3, [r3, #16]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d109      	bne.n	80036a4 <USART_CloseTransmission+0x2c>
	{
		USART_DISABLE_INTERRUPTS(ptrUSARTx->pUSARTx, USART_CR1_TXEIE | USART_CR1_TCIE);
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <USART_CloseTransmission+0x50>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <USART_CloseTransmission+0x50>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036a2:	60da      	str	r2, [r3, #12]
	}
	ptrUSARTx->USART_State = ptrUSARTx->session ? USART_RX_BUSY : USART_READY;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <USART_CloseTransmission+0x50>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <USART_CloseTransmission+0x3c>
 80036b0:	2202      	movs	r2, #2
 80036b2:	e000      	b.n	80036b6 <USART_CloseTransmission+0x3e>
 80036b4:	2201      	movs	r2, #1
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <USART_CloseTransmission+0x50>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	741a      	strb	r2, [r3, #16]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	200000d0 	.word	0x200000d0

080036cc <USART_Initization>:

/*
 * @USART_Init: Populates USART struct
 */
void USART_Initization(USART_Handle_t *pUSART)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	ptrUSARTx = pUSART;
 80036d4:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <USART_Initization+0x178>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]

	// initializing peripheral clock
	USART_EnablePeripheralClk(pUSART->pUSARTx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff feb6 	bl	8003450 <USART_EnablePeripheralClk>

	// enable UE bit
	pUSART->pUSARTx->CR1 |= USART_CR1_UE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

	// word length
	pUSART->pUSARTx->CR1 |= pUSART->USART_Config.USART_wordLength << USART_CR1_M_Pos;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7b5b      	ldrb	r3, [r3, #13]
 80036fe:	031b      	lsls	r3, r3, #12
 8003700:	4619      	mov	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	60da      	str	r2, [r3, #12]

	// parity control
	if (pUSART->USART_Config.USART_parityControl)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	791b      	ldrb	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <USART_Initization+0x56>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_PS;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003720:	60da      	str	r2, [r3, #12]
	}

	// USART mode
	if (pUSART->USART_Config.USART_mode == USART_MODE_TX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7b9b      	ldrb	r3, [r3, #14]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <USART_Initization+0x70>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0208 	orr.w	r2, r2, #8
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	e018      	b.n	800376e <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_RX)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7b9b      	ldrb	r3, [r3, #14]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <USART_Initization+0x8a>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_RE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0204 	orr.w	r2, r2, #4
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e00b      	b.n	800376e <USART_Initization+0xa2>
	}
	else if (pUSART->USART_Config.USART_mode == USART_MODE_TXRX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7b9b      	ldrb	r3, [r3, #14]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <USART_Initization+0xa2>
	{
		pUSART->pUSARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 020c 	orr.w	r2, r2, #12
 800376c:	60da      	str	r2, [r3, #12]
	}

	if (pUSART->dmaTransfer == DMA_TX_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <USART_Initization+0xbc>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003786:	615a      	str	r2, [r3, #20]
	}

	if (pUSART->dmaReception == DMA_RX_ENABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <USART_Initization+0xd6>
	{
		pUSART->pUSARTx->CR3 |= USART_CR3_DMAR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	615a      	str	r2, [r3, #20]
	}
	// STOP bit
	pUSART->pUSARTx->CR2 |= pUSART->USART_Config.USART_stopBits << USART_CR2_STOP_Pos;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7b1b      	ldrb	r3, [r3, #12]
 80037ac:	031b      	lsls	r3, r3, #12
 80037ae:	4619      	mov	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]

	// Hardware control
						// todo ....!

	// configuring baud rate
	uint8_t oversamplingValue = 16, divisor = 100;
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	2364      	movs	r3, #100	; 0x64
 80037be:	77bb      	strb	r3, [r7, #30]
	uint32_t tempUsartDiv, tempFraction;

	uint8_t over8 = pUSART->pUSARTx->CR1 & USART_CR1_OVER8; 	// by default, over8=0 = 16x oversampling
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	777b      	strb	r3, [r7, #29]
	tempUsartDiv = (GetPCLK(pUSART->pUSARTx) * divisor) / (8 * (2 - over8) * pUSART->USART_Config.USART_baudRate);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fe32 	bl	8003438 <GetPCLK>
 80037d4:	4602      	mov	r2, r0
 80037d6:	7fbb      	ldrb	r3, [r7, #30]
 80037d8:	fb03 f202 	mul.w	r2, r3, r2
 80037dc:	7f7b      	ldrb	r3, [r7, #29]
 80037de:	f1c3 0302 	rsb	r3, r3, #2
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	fb03 f301 	mul.w	r3, r3, r1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	61bb      	str	r3, [r7, #24]

	uint8_t divMantissa = tempUsartDiv / divisor;
 80037f4:	7fbb      	ldrb	r3, [r7, #30]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	75fb      	strb	r3, [r7, #23]
	tempFraction = (tempUsartDiv - divMantissa * divisor) * oversamplingValue;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	7fba      	ldrb	r2, [r7, #30]
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	461a      	mov	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	7ffa      	ldrb	r2, [r7, #31]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	613b      	str	r3, [r7, #16]

	uint8_t divFraction = (tempFraction + 50)/divisor;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800381a:	7fbb      	ldrb	r3, [r7, #30]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	73fb      	strb	r3, [r7, #15]

	// writing to BRR register
	pUSART->pUSARTx->BRR |= (divMantissa << USART_BRR_DIV_Mantissa_Pos | divFraction);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	0119      	lsls	r1, r3, #4
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	430b      	orrs	r3, r1
 8003830:	4619      	mov	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]

}
 800383a:	bf00      	nop
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200000d0 	.word	0x200000d0

08003848 <I2C_Initilization>:

/*
 * Initializes user-defined variables for I2C struct
 */
void I2C_Initilization(I2C_Config_t *I2C_Config, I2C_TypeDef *i2cPeripheral)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	I2C1_handle.pI2Cx = i2cPeripheral;
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <I2C_Initilization+0x2c>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6013      	str	r3, [r2, #0]
	I2C1_handle.I2C_Config = *I2C_Config;
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <I2C_Initilization+0x2c>)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003862:	e883 0003 	stmia.w	r3, {r0, r1}
	I2C_Init(&I2C1_handle);
 8003866:	4803      	ldr	r0, [pc, #12]	; (8003874 <I2C_Initilization+0x2c>)
 8003868:	f7fc ff24 	bl	80006b4 <I2C_Init>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200000d8 	.word	0x200000d8

08003878 <USART_Init>:

/*
 * Initializes user-defined variables for USART struct
 */
void USART_Init (void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	USART2_handle.pUSARTx = USART2;
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <USART_Init+0x8c>)
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <USART_Init+0x90>)
 8003880:	601a      	str	r2, [r3, #0]
	USART2_handle.USART_Config.USART_baudRate = USART_BAUD_9600;
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <USART_Init+0x8c>)
 8003884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003888:	609a      	str	r2, [r3, #8]
	USART2_handle.USART_Config.USART_mode = USART_MODE_TXRX;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <USART_Init+0x8c>)
 800388c:	2202      	movs	r2, #2
 800388e:	739a      	strb	r2, [r3, #14]
	USART2_handle.USART_Config.USART_parityControl = USART_PARITY_DISABLED;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <USART_Init+0x8c>)
 8003892:	2200      	movs	r2, #0
 8003894:	711a      	strb	r2, [r3, #4]
	USART2_handle.USART_Config.USART_stopBits = USART_STOP;
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <USART_Init+0x8c>)
 8003898:	2200      	movs	r2, #0
 800389a:	731a      	strb	r2, [r3, #12]
	USART2_handle.USART_Config.USART_wordLength = USART_8_DATA_BITS;
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <USART_Init+0x8c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	735a      	strb	r2, [r3, #13]
	USART2_handle.rxBuffer = usart_fifo;
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <USART_Init+0x8c>)
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <USART_Init+0x94>)
 80038a6:	619a      	str	r2, [r3, #24]
	USART2_handle.rxLength = usart_rxLength -1;
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <USART_Init+0x98>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <USART_Init+0x8c>)
 80038b2:	775a      	strb	r2, [r3, #29]
	USART2_handle.rxSize = usart_rxLength - 1;
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <USART_Init+0x98>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <USART_Init+0x8c>)
 80038be:	779a      	strb	r2, [r3, #30]
	USART2_handle.bitMask = usart_rxLength - 2;
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <USART_Init+0x98>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	3b02      	subs	r3, #2
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <USART_Init+0x8c>)
 80038ca:	77da      	strb	r2, [r3, #31]
	USART2_handle.txIdx = 0;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <USART_Init+0x8c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]
	USART2_handle.rxIdx = 0;
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <USART_Init+0x8c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	USART2_handle.dmaTransfer = DMA_TX_DISABLE;
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <USART_Init+0x8c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	USART2_handle.dmaReception = DMA_RX_DISABLE;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <USART_Init+0x8c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	USART2_handle.session = SET;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <USART_Init+0x8c>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	USART_Initization(&USART2_handle);
 80038f4:	4803      	ldr	r0, [pc, #12]	; (8003904 <USART_Init+0x8c>)
 80038f6:	f7ff fee9 	bl	80036cc <USART_Initization>

	USART_EnableRxInterrupts();
 80038fa:	f000 fd13 	bl	8004324 <USART_EnableRxInterrupts>
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000016c 	.word	0x2000016c
 8003908:	40004400 	.word	0x40004400
 800390c:	2000014c 	.word	0x2000014c
 8003910:	20000015 	.word	0x20000015

08003914 <SPI_Init>:

void SPI_Init(SPI_InitTypeDef *SPI_Config, SPI_TypeDef *SPIx)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	SPI_handle.Instance = SPIx;
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <SPI_Init+0x54>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6013      	str	r3, [r2, #0]
	SPI_handle.Init = *SPI_Config;
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <SPI_Init+0x54>)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	1d1c      	adds	r4, r3, #4
 800392a:	4615      	mov	r5, r2
 800392c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800392e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003934:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003938:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	__HAL_RCC_SPI2_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <SPI_Init+0x58>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a09      	ldr	r2, [pc, #36]	; (800396c <SPI_Init+0x58>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <SPI_Init+0x58>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
	HAL_SPI_Init(&SPI_handle);
 8003958:	4803      	ldr	r0, [pc, #12]	; (8003968 <SPI_Init+0x54>)
 800395a:	f7ff f9b1 	bl	8002cc0 <HAL_SPI_Init>
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bdb0      	pop	{r4, r5, r7, pc}
 8003966:	bf00      	nop
 8003968:	200000f4 	.word	0x200000f4
 800396c:	40023800 	.word	0x40023800

08003970 <nRF24_Init>:

void nRF24_Init(nrfl2401_Config *radioConfig)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	nrfRadio.config = *radioConfig;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <nRF24_Init+0x34>)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	1d1c      	adds	r4, r3, #4
 800397e:	4615      	mov	r5, r2
 8003980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003990:	e884 0003 	stmia.w	r4, {r0, r1}
	nRF24_Initialization(&nrfRadio);
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <nRF24_Init+0x34>)
 8003996:	f7fe f80f 	bl	80019b8 <nRF24_Initialization>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bdb0      	pop	{r4, r5, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000208 	.word	0x20000208

080039a8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b09e      	sub	sp, #120	; 0x78
 80039ac:	af00      	add	r7, sp, #0
	HAL_Init();
 80039ae:	f7fe fa0d 	bl	8001dcc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80039b2:	f000 f887 	bl	8003ac4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80039b6:	f000 f8e5 	bl	8003b84 <MX_GPIO_Init>

	/* Initialize I2C struct */
	I2C_Config_t i2c_config = {
 80039ba:	4a38      	ldr	r2, [pc, #224]	; (8003a9c <main+0xf4>)
 80039bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039c4:	e883 0003 	stmia.w	r3, {r0, r1}
		I2C_AckControl: I2C_ACK_ENABLE,
		I2C_SCLSpeed: I2C_SCL_SPEED_SM,
		I2C_DeviceAddress: MCP9808_ADDR,
		I2C_FMDutyCycle: I2C_FM_DUTY_2
	};
    I2C_Initilization(&i2c_config, I2C1);
 80039c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039cc:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <main+0xf8>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff3a 	bl	8003848 <I2C_Initilization>

    /* Initialize USART struct */
    USART_Init();
 80039d4:	f7ff ff50 	bl	8003878 <USART_Init>

    /* Initialize SPI struct */
    SPI_InitTypeDef spi_config = {
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <main+0xfc>)
 80039da:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80039de:	461d      	mov	r5, r3
 80039e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			FirstBit: SPI_FIRSTBIT_MSB,
			TIMode: SPI_TIMODE_DISABLE,
			CRCCalculation: SPI_CRCCALCULATION_DISABLE,
			CRCPolynomial: 7
    };
    SPI_Init(&spi_config, SPI2);
 80039f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f4:	492c      	ldr	r1, [pc, #176]	; (8003aa8 <main+0x100>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff8c 	bl	8003914 <SPI_Init>
//    __HAL_LINKDMA(&usart, dmaTx, dma_usart_tx);

//    DMA_Start_IT(&dma_usart_tx, (uint32_t) tx_buff, &usart.pUSARTx->DR);
//    DMA_Start_IT(&dma_usart_rx, &usart.pUSARTx->DR, (uint32_t) rx_buff);

    nrfl2401_Config radioConfig = {
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	2238      	movs	r2, #56	; 0x38
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fd7f 	bl	8004506 <memset>
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <main+0x104>)
 8003a0a:	607b      	str	r3, [r7, #4]
			enableRxDataPipes: ( (uint8_t []) {DATA_PIPE_0}),
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    nrfl2401_Config radioConfig = {
 8003a12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a16:	60bb      	str	r3, [r7, #8]
			rfChannel: 0,
			dataRate: nRF24_RF_DR_HIGH(nRF24_SPEED_2MBPS),
			rxPayloadWidths: rxPayloadWidths,
			enableDynamicPayload: ENABLE,
			enablePayloadkWithAck: RESET,
			disableAutoAck: ((uint8_t []) {0, DATA_PIPE_0}), // by default, auto ACK is enabled for all the data pipes - note: the first element represents the size, and from second onwards is data pipes
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
    nrfl2401_Config radioConfig = {
 8003a24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	763b      	strb	r3, [r7, #24]
 8003a2e:	2305      	movs	r3, #5
 8003a30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003a34:	2303      	movs	r3, #3
 8003a36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <main+0x108>)
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <main+0x10c>)
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <main+0x110>)
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
			txAddress: primaryTxAddresses,
			txAddressesList: primaryTx,

    		spiHandle: &SPI_handle
    };
    nRF24_Init(&radioConfig);
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff8b 	bl	8003970 <nRF24_Init>

    while(1)
    {
    	uint8_t readFifo = USART_READ_FIFO(USART2_handle.rxBuffer,
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <main+0x114>)
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00e      	beq.n	8003a82 <main+0xda>
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <main+0x114>)
 8003a66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <main+0xda>
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <main+0x114>)
 8003a70:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <main+0x114>)
 8003a76:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <main+0xda>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <main+0xdc>
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    									   USART2_handle.TxEndOfLineIdx,
										   USART2_handle.RxEndOfLineIdx);

    	// read only when there's "\r" (return key) in the user input
    	if (readFifo)
 8003a88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0e4      	beq.n	8003a5a <main+0xb2>
    	{
    		SerialRead(&USART2_handle, &I2C1_handle);
 8003a90:	490b      	ldr	r1, [pc, #44]	; (8003ac0 <main+0x118>)
 8003a92:	480a      	ldr	r0, [pc, #40]	; (8003abc <main+0x114>)
 8003a94:	f000 fc4d 	bl	8004332 <SerialRead>
    {
 8003a98:	e7df      	b.n	8003a5a <main+0xb2>
 8003a9a:	bf00      	nop
 8003a9c:	08005d24 	.word	0x08005d24
 8003aa0:	40005400 	.word	0x40005400
 8003aa4:	08005d2c 	.word	0x08005d2c
 8003aa8:	40003800 	.word	0x40003800
 8003aac:	200000f4 	.word	0x200000f4
 8003ab0:	20000018 	.word	0x20000018
 8003ab4:	20000020 	.word	0x20000020
 8003ab8:	20000028 	.word	0x20000028
 8003abc:	2000016c 	.word	0x2000016c
 8003ac0:	200000d8 	.word	0x200000d8

08003ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b094      	sub	sp, #80	; 0x50
 8003ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aca:	f107 0320 	add.w	r3, r7, #32
 8003ace:	2230      	movs	r2, #48	; 0x30
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fd17 	bl	8004506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <SystemClock_Config+0xb8>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <SystemClock_Config+0xb8>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	; 0x40
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <SystemClock_Config+0xb8>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <SystemClock_Config+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <SystemClock_Config+0xbc>)
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <SystemClock_Config+0xbc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b24:	2302      	movs	r3, #2
 8003b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b34:	f107 0320 	add.w	r3, r7, #32
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fc99 	bl	8002470 <HAL_RCC_OscConfig>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003b44:	f000 f8d0 	bl	8003ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b48:	230f      	movs	r3, #15
 8003b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fef4 	bl	8002950 <HAL_RCC_ClockConfig>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003b6e:	f000 f8bb 	bl	8003ce8 <Error_Handler>
  }
}
 8003b72:	bf00      	nop
 8003b74:	3750      	adds	r7, #80	; 0x50
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000

08003b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();			// Push button (PC13)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a50      	ldr	r2, [pc, #320]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();			// LED (PA5)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a49      	ldr	r2, [pc, #292]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();			// I2C1
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();			// SPI2
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <MX_GPIO_Init+0x150>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]

	/* LED/Push button config */

	// Configure GPIO pin : PC13 [PUSH BUTTON]
	gpio.Pin = GPIO_PIN_13;
 8003bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfe:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_IT_FALLING;
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <MX_GPIO_Init+0x154>)
 8003c02:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpio);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4833      	ldr	r0, [pc, #204]	; (8003cdc <MX_GPIO_Init+0x158>)
 8003c10:	f7fe fa60 	bl	80020d4 <HAL_GPIO_Init>

	// Configure GPIO pin : PA5  		// LED
	gpio.Pin = GPIO_PIN_5;
 8003c14:	2320      	movs	r3, #32
 8003c16:	617b      	str	r3, [r7, #20]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &gpio);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4619      	mov	r1, r3
 8003c2a:	482d      	ldr	r0, [pc, #180]	; (8003ce0 <MX_GPIO_Init+0x15c>)
 8003c2c:	f7fe fa52 	bl	80020d4 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003c30:	2120      	movs	r1, #32
 8003c32:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <MX_GPIO_Init+0x15c>)
 8003c34:	f7fe fc01 	bl	800243a <HAL_GPIO_TogglePin>

	/* Configure SPI */
	nRF24_GPIO_Init(&gpio);
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f9ed 	bl	800101c <nRF24_GPIO_Init>
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	4826      	ldr	r0, [pc, #152]	; (8003ce0 <MX_GPIO_Init+0x15c>)
 8003c48:	f7fe fbde 	bl	8002408 <HAL_GPIO_WritePin>

	/* USART config */
	gpio.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003c50:	230c      	movs	r3, #12
 8003c52:	617b      	str	r3, [r7, #20]
	gpio.Pull = GPIO_PULLUP;				// idle state is HIGH
 8003c54:	2301      	movs	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
	gpio.Alternate = GPIO_AF7_USART2;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio);
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4619      	mov	r1, r3
 8003c62:	481f      	ldr	r0, [pc, #124]	; (8003ce0 <MX_GPIO_Init+0x15c>)
 8003c64:	f7fe fa36 	bl	80020d4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c68:	2026      	movs	r0, #38	; 0x26
 8003c6a:	f7fe fa18 	bl	800209e <HAL_NVIC_EnableIRQ>

	/* Configure I2C */
	gpio.Mode = GPIO_MODE_AF_OD;
 8003c6e:	2312      	movs	r3, #18
 8003c70:	61bb      	str	r3, [r7, #24]
	gpio.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c76:	2302      	movs	r3, #2
 8003c78:	623b      	str	r3, [r7, #32]
	gpio.Alternate = GPIO_AF4_I2C1;
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24

	// scl
	gpio.Pin = GPIO_PIN_6;
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio);
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	4619      	mov	r1, r3
 8003c88:	4816      	ldr	r0, [pc, #88]	; (8003ce4 <MX_GPIO_Init+0x160>)
 8003c8a:	f7fe fa23 	bl	80020d4 <HAL_GPIO_Init>

	// sdata
	gpio.Pin = GPIO_PIN_7;
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio);
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	4619      	mov	r1, r3
 8003c98:	4812      	ldr	r0, [pc, #72]	; (8003ce4 <MX_GPIO_Init+0x160>)
 8003c9a:	f7fe fa1b 	bl	80020d4 <HAL_GPIO_Init>

	/* EXTI GPIO init */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	2028      	movs	r0, #40	; 0x28
 8003ca4:	f7fe f9df 	bl	8002066 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ca8:	2028      	movs	r0, #40	; 0x28
 8003caa:	f7fe f9f8 	bl	800209e <HAL_NVIC_EnableIRQ>

	/* I2C Interrupts */
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cae:	201f      	movs	r0, #31
 8003cb0:	f7fe f9f5 	bl	800209e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cb4:	2020      	movs	r0, #32
 8003cb6:	f7fe f9f2 	bl	800209e <HAL_NVIC_EnableIRQ>

	/* SPI Interrupt */
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003cba:	2024      	movs	r0, #36	; 0x24
 8003cbc:	f7fe f9ef 	bl	800209e <HAL_NVIC_EnableIRQ>


//	/* EXTI DMA interrupt */ -- todo remove
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003cc0:	2011      	movs	r0, #17
 8003cc2:	f7fe f9ec 	bl	800209e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003cc6:	2010      	movs	r0, #16
 8003cc8:	f7fe f9e9 	bl	800209e <HAL_NVIC_EnableIRQ>
}
 8003ccc:	bf00      	nop
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	10210000 	.word	0x10210000
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400

08003ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <ProcessData>:
static uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
static uint8_t rxSize = BYTES_PER_TRANSACTION;
/*
 * @ProcessData: Converts raw bytes into readable data
 */
uint16_t ProcessData (uint8_t *rxBuffer) {
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
	uint8_t startIndex = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	737b      	strb	r3, [r7, #13]
	//printf ("\nUpper byte: %d, Lower byte: %d\n", rxBuffer[startIndex], rxBuffer[startIndex+1]);
	uint16_t temperatureInDegrees;

	// process data
	uint8_t upperByte = rxBuffer[startIndex] & 0x1F; // mask out the 3 bits
 8003d02:	7b7b      	ldrb	r3, [r7, #13]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	733b      	strb	r3, [r7, #12]
	uint8_t signBit = upperByte & 0x10;
 8003d10:	7b3b      	ldrb	r3, [r7, #12]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	72fb      	strb	r3, [r7, #11]

	if (signBit)
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <ProcessData+0x54>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 8003d1e:	7b3b      	ldrb	r3, [r7, #12]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	733b      	strb	r3, [r7, #12]
		temperatureInDegrees = 256 - (upperByte << 4 | rxBuffer[startIndex+1] >> 4);
 8003d26:	7b3b      	ldrb	r3, [r7, #12]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	7b7b      	ldrb	r3, [r7, #13]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	440b      	add	r3, r1
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003d46:	81fb      	strh	r3, [r7, #14]
 8003d48:	e00d      	b.n	8003d66 <ProcessData+0x70>
	}
	else
	{
		temperatureInDegrees = upperByte << 4 | rxBuffer[startIndex+1] >> 4;
 8003d4a:	7b3b      	ldrb	r3, [r7, #12]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	7b7b      	ldrb	r3, [r7, #13]
 8003d52:	3301      	adds	r3, #1
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	440b      	add	r3, r1
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	81fb      	strh	r3, [r7, #14]
	}
//	printf ("Temperature value: %d\n\n", temperatureInDegrees);
	return temperatureInDegrees;
 8003d66:	89fb      	ldrh	r3, [r7, #14]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ReadTemperature_IT>:

/*
 * @ReadTemperatureInterrupt: Reads temperature values via I2C using interrupts
 */
uint16_t _ReadTemperature_IT(I2C_Handle_t *I2C_handle)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	I2C_handle->txBuffer = txBuffer;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <_ReadTemperature_IT+0x8c>)
 8003d80:	611a      	str	r2, [r3, #16]
	I2C_handle->pRxBuffer = rxBuffer;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <_ReadTemperature_IT+0x90>)
 8003d86:	615a      	str	r2, [r3, #20]
	I2C_handle->rxBufferSize = rxSize;
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <_ReadTemperature_IT+0x94>)
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	765a      	strb	r2, [r3, #25]

	// Start I2C transaction
	while (HAL_I2C_StartInterrupt(I2C_TX_BUSY, txSize, rxSize) != I2C_READY);
 8003d90:	bf00      	nop
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <_ReadTemperature_IT+0x98>)
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <_ReadTemperature_IT+0x94>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2003      	movs	r0, #3
 8003d9e:	f7fc fdbb 	bl	8000918 <HAL_I2C_StartInterrupt>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d1f4      	bne.n	8003d92 <_ReadTemperature_IT+0x1e>

	I2C_handle->I2C_State = I2C_INIT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	731a      	strb	r2, [r3, #12]

	// request the data from the sensor
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e011      	b.n	8003dd8 <_ReadTemperature_IT+0x64>
	{
		I2C_handle->I2C_State = I2C_INIT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	731a      	strb	r2, [r3, #12]
		while (HAL_I2C_StartInterrupt(I2C_RX_BUSY, txSize, rxSize) != I2C_READY);
 8003dba:	bf00      	nop
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <_ReadTemperature_IT+0x98>)
 8003dbe:	7819      	ldrb	r1, [r3, #0]
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <_ReadTemperature_IT+0x94>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f7fc fda6 	bl	8000918 <HAL_I2C_StartInterrupt>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d1f4      	bne.n	8003dbc <_ReadTemperature_IT+0x48>
	for (int i = 0; i < I2C_handle->rxBufferSize/2; i++)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7e5b      	ldrb	r3, [r3, #25]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	dbe5      	blt.n	8003db4 <_ReadTemperature_IT+0x40>
	}

	uint16_t temperature = ProcessData(I2C_handle->pRxBuffer);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff82 	bl	8003cf6 <ProcessData>
 8003df2:	4603      	mov	r3, r0
 8003df4:	817b      	strh	r3, [r7, #10]
	return temperature;
 8003df6:	897b      	ldrh	r3, [r7, #10]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000002c 	.word	0x2000002c
 8003e04:	20000158 	.word	0x20000158
 8003e08:	2000002e 	.word	0x2000002e
 8003e0c:	2000002d 	.word	0x2000002d

08003e10 <_ReadTemperature>:

/*
 * @ReadTemperature: Read temperature via I2C using polling approach
 */
void _ReadTemperature(I2C_Handle_t *I2C_handle)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	// todo - maybe use the following data straight from I2C_handle
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 8003e18:	2305      	movs	r3, #5
 8003e1a:	743b      	strb	r3, [r7, #16]
	uint8_t rxBuffer[BYTES_TO_READ];
	uint8_t startRxIndex = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]

//	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <_ReadTemperature+0x6c>)
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ff2c 	bl	8000c88 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	e00c      	b.n	8003e50 <_ReadTemperature+0x40>
	{
		HAL_I2C_Master_Receive (I2C_handle, rxBuffer, BYTES_PER_TRANSACTION, startRxIndex);
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	f107 010c 	add.w	r1, r7, #12
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc ff63 	bl	8000d0a <HAL_I2C_Master_Receive>
	for (int i = 0; i < BYTES_TO_READ/2; i++, startRxIndex+=2)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	ddef      	ble.n	8003e36 <_ReadTemperature+0x26>
	}

//	printf ("Printing raw bytes:\n");
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e007      	b.n	8003e6c <_ReadTemperature+0x5c>
	{
		ProcessData(rxBuffer);
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff48 	bl	8003cf6 <ProcessData>
	for (int i = 0; i < BYTES_TO_READ; i+=2)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	ddf4      	ble.n	8003e5c <_ReadTemperature+0x4c>
	}
}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000002d 	.word	0x2000002d

08003e80 <GetTemperature>:

uint16_t GetTemperature(uint8_t interrupt, I2C_Handle_t *I2C_Handle)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	71fb      	strb	r3, [r7, #7]
	uint16_t temperature;

	if (interrupt == SET)
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <GetTemperature+0x1e>
	{
		temperature = _ReadTemperature_IT(I2C_Handle);
 8003e92:	6838      	ldr	r0, [r7, #0]
 8003e94:	f7ff ff6e 	bl	8003d74 <_ReadTemperature_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	81fb      	strh	r3, [r7, #14]
 8003e9c:	e002      	b.n	8003ea4 <GetTemperature+0x24>
	}
	else
	{
		_ReadTemperature(I2C_Handle);
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f7ff ffb6 	bl	8003e10 <_ReadTemperature>
	}
	return temperature;
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_MspInit+0x4c>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_MspInit+0x4c>)
 8003ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_MspInit+0x4c>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_MspInit+0x4c>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <HAL_MspInit+0x4c>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_MspInit+0x4c>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <HardFault_Handler+0x4>

08003f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <MemManage_Handler+0x4>

08003f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f1e:	e7fe      	b.n	8003f1e <BusFault_Handler+0x4>

08003f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f24:	e7fe      	b.n	8003f24 <UsageFault_Handler+0x4>

08003f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
//
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
//
  /* USER CODE END SVCall_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
//
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
//
  /* USER CODE END PendSV_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <DMA1_Stream5_IRQHandler>:



void DMA1_Stream5_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_rx);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <DMA1_Stream5_IRQHandler+0x10>)
 8003f56:	f7fc fb2b 	bl	80005b0 <DMA_InterruptHandler>
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200001a0 	.word	0x200001a0

08003f64 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
	DMA_InterruptHandler(&dma_usart_tx);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <DMA1_Stream6_IRQHandler+0x10>)
 8003f6a:	f7fc fb21 	bl	80005b0 <DMA_InterruptHandler>
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200001d4 	.word	0x200001d4

08003f78 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(nrfRadio.config.spiHandle);
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <SPI2_IRQHandler+0x14>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f8ad 	bl	80030e0 <HAL_SPI_IRQHandler>
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000208 	.word	0x20000208

08003f90 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	nRF24_IRQHandler(&nrfRadio);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <EXTI9_5_IRQHandler+0x10>)
 8003f96:	f7fd fda7 	bl	8001ae8 <nRF24_IRQHandler>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000208 	.word	0x20000208

08003fa4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13))
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <EXTI15_10_IRQHandler+0x38>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <EXTI15_10_IRQHandler+0x2e>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <EXTI15_10_IRQHandler+0x38>)
 8003fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fbc:	615a      	str	r2, [r3, #20]
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <EXTI15_10_IRQHandler+0x3c>)
 8003fc2:	f7fe fa09 	bl	80023d8 <HAL_GPIO_ReadPin>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003fca:	2120      	movs	r1, #32
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <EXTI15_10_IRQHandler+0x3c>)
 8003fce:	f7fe fa34 	bl	800243a <HAL_GPIO_TogglePin>
	}
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40013c00 	.word	0x40013c00
 8003fe0:	40020000 	.word	0x40020000

08003fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fe8:	f7fd ff42 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <ITM_SendChar+0x48>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <ITM_SendChar+0x48>)
 8004000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004004:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <ITM_SendChar+0x4c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <ITM_SendChar+0x4c>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8004012:	bf00      	nop
 8004014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f8      	beq.n	8004014 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8004022:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000edfc 	.word	0xe000edfc
 800403c:	e0000e00 	.word	0xe0000e00

08004040 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e00a      	b.n	8004068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004052:	f3af 8000 	nop.w
 8004056:	4601      	mov	r1, r0
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	60ba      	str	r2, [r7, #8]
 800405e:	b2ca      	uxtb	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3301      	adds	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	dbf0      	blt.n	8004052 <_read+0x12>
	}

return len;
 8004070:	687b      	ldr	r3, [r7, #4]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e009      	b.n	80040a0 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	60ba      	str	r2, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ffab 	bl	8003ff0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3301      	adds	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	dbf1      	blt.n	800408c <_write+0x12>
	}
	return len;
 80040a8:	687b      	ldr	r3, [r7, #4]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_close>:

int _close(int file)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
	return -1;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040da:	605a      	str	r2, [r3, #4]
	return 0;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_isatty>:

int _isatty(int file)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
	return 1;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
	return 0;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <_sbrk+0x50>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <_sbrk+0x16>
		heap_end = &end;
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <_sbrk+0x50>)
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <_sbrk+0x54>)
 8004130:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <_sbrk+0x50>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <_sbrk+0x50>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	466a      	mov	r2, sp
 8004142:	4293      	cmp	r3, r2
 8004144:	d907      	bls.n	8004156 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004146:	f000 f9a9 	bl	800449c <__errno>
 800414a:	4602      	mov	r2, r0
 800414c:	230c      	movs	r3, #12
 800414e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004154:	e006      	b.n	8004164 <_sbrk+0x48>
	}

	heap_end += incr;
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <_sbrk+0x50>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	4a03      	ldr	r2, [pc, #12]	; (800416c <_sbrk+0x50>)
 8004160:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000015c 	.word	0x2000015c
 8004170:	20000248 	.word	0x20000248

08004174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <SystemInit+0x28>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <SystemInit+0x28>)
 8004180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <SystemInit+0x28>)
 800418a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418e:	609a      	str	r2, [r3, #8]
#endif
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <SendSerialData>:
 * @param: format: format of the TX data
 * @param: ...   : data to display
 * @return void
 */
void SendSerialData(USART_Handle_t *usart, const char *format, ...)
{
 80041a0:	b40e      	push	{r1, r2, r3}
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b09f      	sub	sp, #124	; 0x7c
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
	size_t size = strlen(format);
 80041aa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80041ae:	f7fc f821 	bl	80001f4 <strlen>
 80041b2:	6778      	str	r0, [r7, #116]	; 0x74
//	char serialBuffer[strlen(format)] = {0};
	char serialBuffer[100] = {0};
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	2264      	movs	r2, #100	; 0x64
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f9a2 	bl	8004506 <memset>
	va_list args;
	va_start(args, format);
 80041c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80041c6:	60bb      	str	r3, [r7, #8]
	vsprintf(serialBuffer, format, args);
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fa7c 	bl	80046d0 <vsiprintf>

	usart->txBuffer = serialBuffer;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f107 020c 	add.w	r2, r7, #12
 80041de:	615a      	str	r2, [r3, #20]
	usart->txLength = strlen(serialBuffer);
 80041e0:	f107 030c 	add.w	r3, r7, #12
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f805 	bl	80001f4 <strlen>
 80041ea:	4603      	mov	r3, r0
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	771a      	strb	r2, [r3, #28]

	USART_State expectedState = usart->session ? USART_RX_BUSY : USART_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SendSerialData+0x60>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e000      	b.n	8004202 <SendSerialData+0x62>
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	while (USART_TransmitData() != expectedState);
 8004206:	bf00      	nop
 8004208:	f7ff f954 	bl	80034b4 <USART_TransmitData>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004214:	4293      	cmp	r3, r2
 8004216:	d1f7      	bne.n	8004208 <SendSerialData+0x68>

//	USART_DMA_Transmit(usart, sizeof(serialBuffer));
//	USART_DMA_Transmit(usartHandle, dmaHandle); //
	va_end(args);						// clean memory reserved for valist
//	usart->USART_State = USART_INIT;
}
 8004218:	bf00      	nop
 800421a:	377c      	adds	r7, #124	; 0x7c
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004222:	b003      	add	sp, #12
 8004224:	4770      	bx	lr
	...

08004228 <ExecuteSerialData>:
 * @param: str1:  hardcoded string to compare the user input against
 * @param: I2C_Handle_t: pointer to I2C_Handle_t struct
 * @return false if "q" (quit) is entered, otherwise true
 */
bool ExecuteSerialData(USART_Handle_t *usart, const char *str1, I2C_Handle_t *I2C_Handle)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	unsigned char payload[10] = {0};
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	811a      	strh	r2, [r3, #8]
	if (!strcmp(str1, "temp"))
 8004240:	492e      	ldr	r1, [pc, #184]	; (80042fc <ExecuteSerialData+0xd4>)
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f7fb ffcc 	bl	80001e0 <strcmp>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11a      	bne.n	8004284 <ExecuteSerialData+0x5c>
	{
		uint16_t temp = GetTemperature(SET, I2C_Handle);
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	2001      	movs	r0, #1
 8004252:	f7ff fe15 	bl	8003e80 <GetTemperature>
 8004256:	4603      	mov	r3, r0
 8004258:	83fb      	strh	r3, [r7, #30]
		SendSerialData(usart, "Current temperature: %d\n", temp);
 800425a:	8bfb      	ldrh	r3, [r7, #30]
 800425c:	461a      	mov	r2, r3
 800425e:	4928      	ldr	r1, [pc, #160]	; (8004300 <ExecuteSerialData+0xd8>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff9d 	bl	80041a0 <SendSerialData>
		sprintf (payload, "%u", temp);							// todo - verify signedness
 8004266:	8bfa      	ldrh	r2, [r7, #30]
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4925      	ldr	r1, [pc, #148]	; (8004304 <ExecuteSerialData+0xdc>)
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f9e2 	bl	8004638 <siprintf>
	    nRF24_TransmitPayload(&nrfRadio, payload, 2);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	2202      	movs	r2, #2
 800427a:	4619      	mov	r1, r3
 800427c:	4822      	ldr	r0, [pc, #136]	; (8004308 <ExecuteSerialData+0xe0>)
 800427e:	f7fd fc81 	bl	8001b84 <nRF24_TransmitPayload>
 8004282:	e036      	b.n	80042f2 <ExecuteSerialData+0xca>

	}
	else if (!strcmp(str1, "led"))
 8004284:	4921      	ldr	r1, [pc, #132]	; (800430c <ExecuteSerialData+0xe4>)
 8004286:	68b8      	ldr	r0, [r7, #8]
 8004288:	f7fb ffaa 	bl	80001e0 <strcmp>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <ExecuteSerialData+0x7c>
	{
		SendSerialData(usart, "Toggling LED\n");
 8004292:	491f      	ldr	r1, [pc, #124]	; (8004310 <ExecuteSerialData+0xe8>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff ff83 	bl	80041a0 <SendSerialData>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800429a:	2120      	movs	r1, #32
 800429c:	481d      	ldr	r0, [pc, #116]	; (8004314 <ExecuteSerialData+0xec>)
 800429e:	f7fe f8cc 	bl	800243a <HAL_GPIO_TogglePin>
 80042a2:	e026      	b.n	80042f2 <ExecuteSerialData+0xca>
	}
	else if (!strcmp(str1, "q"))
 80042a4:	491c      	ldr	r1, [pc, #112]	; (8004318 <ExecuteSerialData+0xf0>)
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f7fb ff9a 	bl	80001e0 <strcmp>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <ExecuteSerialData+0x96>
	{
		SendSerialData(usart, "No longer accepting serial data...\n");
 80042b2:	491a      	ldr	r1, [pc, #104]	; (800431c <ExecuteSerialData+0xf4>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff ff73 	bl	80041a0 <SendSerialData>
		return false;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e01a      	b.n	80042f4 <ExecuteSerialData+0xcc>
	}
	else if (!strcmp(str1, "stop"))
 80042be:	4918      	ldr	r1, [pc, #96]	; (8004320 <ExecuteSerialData+0xf8>)
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	f7fb ff8d 	bl	80001e0 <strcmp>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d112      	bne.n	80042f2 <ExecuteSerialData+0xca>
	{
		sprintf (payload, "%s", str1);
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f9dd 	bl	8004692 <strcpy>
	    nRF24_TransmitPayload(&nrfRadio, payload, strlen(str1)+1);
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7fb ff8b 	bl	80001f4 <strlen>
 80042de:	4603      	mov	r3, r0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	3301      	adds	r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4619      	mov	r1, r3
 80042ec:	4806      	ldr	r0, [pc, #24]	; (8004308 <ExecuteSerialData+0xe0>)
 80042ee:	f7fd fc49 	bl	8001b84 <nRF24_TransmitPayload>
	}
	return true;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08005d58 	.word	0x08005d58
 8004300:	08005d60 	.word	0x08005d60
 8004304:	08005d7c 	.word	0x08005d7c
 8004308:	20000208 	.word	0x20000208
 800430c:	08005d80 	.word	0x08005d80
 8004310:	08005d84 	.word	0x08005d84
 8004314:	40020000 	.word	0x40020000
 8004318:	08005d94 	.word	0x08005d94
 800431c:	08005d98 	.word	0x08005d98
 8004320:	08005dbc 	.word	0x08005dbc

08004324 <USART_EnableRxInterrupts>:
		usart->USART_State = USART_INIT;
	}
}

void USART_EnableRxInterrupts()
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
	USART_RxData(USART_RX_BUSY);
 8004328:	2002      	movs	r0, #2
 800432a:	f7ff f8e3 	bl	80034f4 <USART_RxData>
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}

08004332 <SerialRead>:

/*
 * @SerialRead: reads the FIFO that contains the meaningful user input (containing \r)
 */
void SerialRead(USART_Handle_t *usart, I2C_Handle_t *I2C_Handle)
{
 8004332:	b5b0      	push	{r4, r5, r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
 800433c:	466b      	mov	r3, sp
 800433e:	461d      	mov	r5, r3
	char token[usart->rxSize];
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7f98      	ldrb	r0, [r3, #30]
 8004344:	4603      	mov	r3, r0
 8004346:	3b01      	subs	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	b2c1      	uxtb	r1, r0
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	00d4      	lsls	r4, r2, #3
 800435a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800435e:	00cb      	lsls	r3, r1, #3
 8004360:	b2c1      	uxtb	r1, r0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	f04f 0400 	mov.w	r4, #0
 800436e:	00d4      	lsls	r4, r2, #3
 8004370:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004374:	00cb      	lsls	r3, r1, #3
 8004376:	4603      	mov	r3, r0
 8004378:	3307      	adds	r3, #7
 800437a:	08db      	lsrs	r3, r3, #3
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	ebad 0d03 	sub.w	sp, sp, r3
 8004382:	466b      	mov	r3, sp
 8004384:	3300      	adds	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
	memset(token, 0, usart->rxSize);
 8004388:	69b8      	ldr	r0, [r7, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7f9b      	ldrb	r3, [r3, #30]
 800438e:	461a      	mov	r2, r3
 8004390:	2100      	movs	r1, #0
 8004392:	f000 f8b8 	bl	8004506 <memset>

	// parse the data
	char *dataStart = usart->rxBuffer + usart->rxIdx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80043a0:	4413      	add	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
	char *dataEnd = strstr(dataStart, "\r");
 80043a4:	210d      	movs	r1, #13
 80043a6:	6978      	ldr	r0, [r7, #20]
 80043a8:	f000 f966 	bl	8004678 <strchr>
 80043ac:	6138      	str	r0, [r7, #16]
	uint8_t bytes;

	if (dataEnd == NULL) // wrap-around
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d125      	bne.n	8004400 <SerialRead+0xce>
	{
		char *lastChar = strchr(dataStart, '\0');
 80043b4:	6978      	ldr	r0, [r7, #20]
 80043b6:	f7fb ff1d 	bl	80001f4 <strlen>
 80043ba:	4603      	mov	r3, r0
 80043bc:	461a      	mov	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
		bytes = lastChar - dataStart;
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	73fb      	strb	r3, [r7, #15]
		memcpy(token, dataStart, bytes);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6979      	ldr	r1, [r7, #20]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f88c 	bl	80044f0 <memcpy>
		dataEnd = strstr(usart->rxBuffer, "\r");
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	210d      	movs	r1, #13
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f94a 	bl	8004678 <strchr>
 80043e4:	6138      	str	r0, [r7, #16]
		memcpy(token + bytes, usart->rxBuffer, dataEnd - usart->rxBuffer);
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	18d0      	adds	r0, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6999      	ldr	r1, [r3, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6992      	ldr	r2, [r2, #24]
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	f000 f879 	bl	80044f0 <memcpy>
 80043fe:	e009      	b.n	8004414 <SerialRead+0xe2>
	}
	else
	{
		bytes = dataEnd - dataStart;
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	73fb      	strb	r3, [r7, #15]
		memcpy(token, dataStart, bytes);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	6979      	ldr	r1, [r7, #20]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f86e 	bl	80044f0 <memcpy>
	}

	// execute the user input request
	ExecuteSerialData(usart, token, I2C_Handle);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff04 	bl	8004228 <ExecuteSerialData>

	usart->RxEndOfLineIdx++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004426:	3301      	adds	r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	usart->rxIdx = usart->txIdx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800443c:	46ad      	mov	sp, r5
}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004480 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800444c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800444e:	e003      	b.n	8004458 <LoopCopyDataInit>

08004450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004456:	3104      	adds	r1, #4

08004458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800445c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800445e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004460:	d3f6      	bcc.n	8004450 <CopyDataInit>
  ldr  r2, =_sbss
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004464:	e002      	b.n	800446c <LoopFillZerobss>

08004466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004468:	f842 3b04 	str.w	r3, [r2], #4

0800446c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800446e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004470:	d3f9      	bcc.n	8004466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004472:	f7ff fe7f 	bl	8004174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004476:	f000 f817 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800447a:	f7ff fa95 	bl	80039a8 <main>
  bx  lr    
 800447e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004480:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8004484:	08005e84 	.word	0x08005e84
  ldr  r0, =_sdata
 8004488:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800448c:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8004490:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8004494:	20000248 	.word	0x20000248

08004498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC_IRQHandler>
	...

0800449c <__errno>:
 800449c:	4b01      	ldr	r3, [pc, #4]	; (80044a4 <__errno+0x8>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000034 	.word	0x20000034

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4e0d      	ldr	r6, [pc, #52]	; (80044e0 <__libc_init_array+0x38>)
 80044ac:	4c0d      	ldr	r4, [pc, #52]	; (80044e4 <__libc_init_array+0x3c>)
 80044ae:	1ba4      	subs	r4, r4, r6
 80044b0:	10a4      	asrs	r4, r4, #2
 80044b2:	2500      	movs	r5, #0
 80044b4:	42a5      	cmp	r5, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	4e0b      	ldr	r6, [pc, #44]	; (80044e8 <__libc_init_array+0x40>)
 80044ba:	4c0c      	ldr	r4, [pc, #48]	; (80044ec <__libc_init_array+0x44>)
 80044bc:	f001 f9ae 	bl	800581c <_init>
 80044c0:	1ba4      	subs	r4, r4, r6
 80044c2:	10a4      	asrs	r4, r4, #2
 80044c4:	2500      	movs	r5, #0
 80044c6:	42a5      	cmp	r5, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d0:	4798      	blx	r3
 80044d2:	3501      	adds	r5, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044da:	4798      	blx	r3
 80044dc:	3501      	adds	r5, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	08005e7c 	.word	0x08005e7c
 80044e4:	08005e7c 	.word	0x08005e7c
 80044e8:	08005e7c 	.word	0x08005e7c
 80044ec:	08005e80 	.word	0x08005e80

080044f0 <memcpy>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	1e43      	subs	r3, r0, #1
 80044f4:	440a      	add	r2, r1
 80044f6:	4291      	cmp	r1, r2
 80044f8:	d100      	bne.n	80044fc <memcpy+0xc>
 80044fa:	bd10      	pop	{r4, pc}
 80044fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004504:	e7f7      	b.n	80044f6 <memcpy+0x6>

08004506 <memset>:
 8004506:	4402      	add	r2, r0
 8004508:	4603      	mov	r3, r0
 800450a:	4293      	cmp	r3, r2
 800450c:	d100      	bne.n	8004510 <memset+0xa>
 800450e:	4770      	bx	lr
 8004510:	f803 1b01 	strb.w	r1, [r3], #1
 8004514:	e7f9      	b.n	800450a <memset+0x4>
	...

08004518 <iprintf>:
 8004518:	b40f      	push	{r0, r1, r2, r3}
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <iprintf+0x2c>)
 800451c:	b513      	push	{r0, r1, r4, lr}
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	b124      	cbz	r4, 800452c <iprintf+0x14>
 8004522:	69a3      	ldr	r3, [r4, #24]
 8004524:	b913      	cbnz	r3, 800452c <iprintf+0x14>
 8004526:	4620      	mov	r0, r4
 8004528:	f000 fa8c 	bl	8004a44 <__sinit>
 800452c:	ab05      	add	r3, sp, #20
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	4620      	mov	r0, r4
 8004536:	f000 fd97 	bl	8005068 <_vfiprintf_r>
 800453a:	b002      	add	sp, #8
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	20000034 	.word	0x20000034

08004548 <putchar>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <putchar+0x24>)
 800454c:	681c      	ldr	r4, [r3, #0]
 800454e:	4605      	mov	r5, r0
 8004550:	b124      	cbz	r4, 800455c <putchar+0x14>
 8004552:	69a3      	ldr	r3, [r4, #24]
 8004554:	b913      	cbnz	r3, 800455c <putchar+0x14>
 8004556:	4620      	mov	r0, r4
 8004558:	f000 fa74 	bl	8004a44 <__sinit>
 800455c:	68a2      	ldr	r2, [r4, #8]
 800455e:	4629      	mov	r1, r5
 8004560:	4620      	mov	r0, r4
 8004562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004566:	f001 b81d 	b.w	80055a4 <_putc_r>
 800456a:	bf00      	nop
 800456c:	20000034 	.word	0x20000034

08004570 <_puts_r>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	460e      	mov	r6, r1
 8004574:	4605      	mov	r5, r0
 8004576:	b118      	cbz	r0, 8004580 <_puts_r+0x10>
 8004578:	6983      	ldr	r3, [r0, #24]
 800457a:	b90b      	cbnz	r3, 8004580 <_puts_r+0x10>
 800457c:	f000 fa62 	bl	8004a44 <__sinit>
 8004580:	69ab      	ldr	r3, [r5, #24]
 8004582:	68ac      	ldr	r4, [r5, #8]
 8004584:	b913      	cbnz	r3, 800458c <_puts_r+0x1c>
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fa5c 	bl	8004a44 <__sinit>
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <_puts_r+0xac>)
 800458e:	429c      	cmp	r4, r3
 8004590:	d117      	bne.n	80045c2 <_puts_r+0x52>
 8004592:	686c      	ldr	r4, [r5, #4]
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	071b      	lsls	r3, r3, #28
 8004598:	d51d      	bpl.n	80045d6 <_puts_r+0x66>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	b1db      	cbz	r3, 80045d6 <_puts_r+0x66>
 800459e:	3e01      	subs	r6, #1
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	b9e9      	cbnz	r1, 80045e8 <_puts_r+0x78>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da2e      	bge.n	800460e <_puts_r+0x9e>
 80045b0:	4622      	mov	r2, r4
 80045b2:	210a      	movs	r1, #10
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f895 	bl	80046e4 <__swbuf_r>
 80045ba:	3001      	adds	r0, #1
 80045bc:	d011      	beq.n	80045e2 <_puts_r+0x72>
 80045be:	200a      	movs	r0, #10
 80045c0:	e011      	b.n	80045e6 <_puts_r+0x76>
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <_puts_r+0xb0>)
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d101      	bne.n	80045cc <_puts_r+0x5c>
 80045c8:	68ac      	ldr	r4, [r5, #8]
 80045ca:	e7e3      	b.n	8004594 <_puts_r+0x24>
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <_puts_r+0xb4>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	bf08      	it	eq
 80045d2:	68ec      	ldreq	r4, [r5, #12]
 80045d4:	e7de      	b.n	8004594 <_puts_r+0x24>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f8d5 	bl	8004788 <__swsetup_r>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0dd      	beq.n	800459e <_puts_r+0x2e>
 80045e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da04      	bge.n	80045f6 <_puts_r+0x86>
 80045ec:	69a2      	ldr	r2, [r4, #24]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	dc06      	bgt.n	8004600 <_puts_r+0x90>
 80045f2:	290a      	cmp	r1, #10
 80045f4:	d004      	beq.n	8004600 <_puts_r+0x90>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	6022      	str	r2, [r4, #0]
 80045fc:	7019      	strb	r1, [r3, #0]
 80045fe:	e7cf      	b.n	80045a0 <_puts_r+0x30>
 8004600:	4622      	mov	r2, r4
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f86e 	bl	80046e4 <__swbuf_r>
 8004608:	3001      	adds	r0, #1
 800460a:	d1c9      	bne.n	80045a0 <_puts_r+0x30>
 800460c:	e7e9      	b.n	80045e2 <_puts_r+0x72>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	200a      	movs	r0, #10
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	7018      	strb	r0, [r3, #0]
 8004618:	e7e5      	b.n	80045e6 <_puts_r+0x76>
 800461a:	bf00      	nop
 800461c:	08005e00 	.word	0x08005e00
 8004620:	08005e20 	.word	0x08005e20
 8004624:	08005de0 	.word	0x08005de0

08004628 <puts>:
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <puts+0xc>)
 800462a:	4601      	mov	r1, r0
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f7ff bf9f 	b.w	8004570 <_puts_r>
 8004632:	bf00      	nop
 8004634:	20000034 	.word	0x20000034

08004638 <siprintf>:
 8004638:	b40e      	push	{r1, r2, r3}
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <siprintf+0x38>)
 800464a:	9107      	str	r1, [sp, #28]
 800464c:	9104      	str	r1, [sp, #16]
 800464e:	4909      	ldr	r1, [pc, #36]	; (8004674 <siprintf+0x3c>)
 8004650:	f853 2b04 	ldr.w	r2, [r3], #4
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	6800      	ldr	r0, [r0, #0]
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	a902      	add	r1, sp, #8
 800465c:	f000 fbe2 	bl	8004e24 <_svfiprintf_r>
 8004660:	9b02      	ldr	r3, [sp, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	b01c      	add	sp, #112	; 0x70
 8004668:	f85d eb04 	ldr.w	lr, [sp], #4
 800466c:	b003      	add	sp, #12
 800466e:	4770      	bx	lr
 8004670:	20000034 	.word	0x20000034
 8004674:	ffff0208 	.word	0xffff0208

08004678 <strchr>:
 8004678:	b2c9      	uxtb	r1, r1
 800467a:	4603      	mov	r3, r0
 800467c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004680:	b11a      	cbz	r2, 800468a <strchr+0x12>
 8004682:	428a      	cmp	r2, r1
 8004684:	d1f9      	bne.n	800467a <strchr+0x2>
 8004686:	4618      	mov	r0, r3
 8004688:	4770      	bx	lr
 800468a:	2900      	cmp	r1, #0
 800468c:	bf18      	it	ne
 800468e:	2300      	movne	r3, #0
 8004690:	e7f9      	b.n	8004686 <strchr+0xe>

08004692 <strcpy>:
 8004692:	4603      	mov	r3, r0
 8004694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004698:	f803 2b01 	strb.w	r2, [r3], #1
 800469c:	2a00      	cmp	r2, #0
 800469e:	d1f9      	bne.n	8004694 <strcpy+0x2>
 80046a0:	4770      	bx	lr
	...

080046a4 <_vsiprintf_r>:
 80046a4:	b500      	push	{lr}
 80046a6:	b09b      	sub	sp, #108	; 0x6c
 80046a8:	9100      	str	r1, [sp, #0]
 80046aa:	9104      	str	r1, [sp, #16]
 80046ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	9102      	str	r1, [sp, #8]
 80046b4:	4905      	ldr	r1, [pc, #20]	; (80046cc <_vsiprintf_r+0x28>)
 80046b6:	9103      	str	r1, [sp, #12]
 80046b8:	4669      	mov	r1, sp
 80046ba:	f000 fbb3 	bl	8004e24 <_svfiprintf_r>
 80046be:	9b00      	ldr	r3, [sp, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	b01b      	add	sp, #108	; 0x6c
 80046c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ca:	bf00      	nop
 80046cc:	ffff0208 	.word	0xffff0208

080046d0 <vsiprintf>:
 80046d0:	4613      	mov	r3, r2
 80046d2:	460a      	mov	r2, r1
 80046d4:	4601      	mov	r1, r0
 80046d6:	4802      	ldr	r0, [pc, #8]	; (80046e0 <vsiprintf+0x10>)
 80046d8:	6800      	ldr	r0, [r0, #0]
 80046da:	f7ff bfe3 	b.w	80046a4 <_vsiprintf_r>
 80046de:	bf00      	nop
 80046e0:	20000034 	.word	0x20000034

080046e4 <__swbuf_r>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	460e      	mov	r6, r1
 80046e8:	4614      	mov	r4, r2
 80046ea:	4605      	mov	r5, r0
 80046ec:	b118      	cbz	r0, 80046f6 <__swbuf_r+0x12>
 80046ee:	6983      	ldr	r3, [r0, #24]
 80046f0:	b90b      	cbnz	r3, 80046f6 <__swbuf_r+0x12>
 80046f2:	f000 f9a7 	bl	8004a44 <__sinit>
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <__swbuf_r+0x98>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	d12a      	bne.n	8004752 <__swbuf_r+0x6e>
 80046fc:	686c      	ldr	r4, [r5, #4]
 80046fe:	69a3      	ldr	r3, [r4, #24]
 8004700:	60a3      	str	r3, [r4, #8]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	071a      	lsls	r2, r3, #28
 8004706:	d52e      	bpl.n	8004766 <__swbuf_r+0x82>
 8004708:	6923      	ldr	r3, [r4, #16]
 800470a:	b363      	cbz	r3, 8004766 <__swbuf_r+0x82>
 800470c:	6923      	ldr	r3, [r4, #16]
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	1ac0      	subs	r0, r0, r3
 8004712:	6963      	ldr	r3, [r4, #20]
 8004714:	b2f6      	uxtb	r6, r6
 8004716:	4283      	cmp	r3, r0
 8004718:	4637      	mov	r7, r6
 800471a:	dc04      	bgt.n	8004726 <__swbuf_r+0x42>
 800471c:	4621      	mov	r1, r4
 800471e:	4628      	mov	r0, r5
 8004720:	f000 f926 	bl	8004970 <_fflush_r>
 8004724:	bb28      	cbnz	r0, 8004772 <__swbuf_r+0x8e>
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	3b01      	subs	r3, #1
 800472a:	60a3      	str	r3, [r4, #8]
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	701e      	strb	r6, [r3, #0]
 8004734:	6963      	ldr	r3, [r4, #20]
 8004736:	3001      	adds	r0, #1
 8004738:	4283      	cmp	r3, r0
 800473a:	d004      	beq.n	8004746 <__swbuf_r+0x62>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	07db      	lsls	r3, r3, #31
 8004740:	d519      	bpl.n	8004776 <__swbuf_r+0x92>
 8004742:	2e0a      	cmp	r6, #10
 8004744:	d117      	bne.n	8004776 <__swbuf_r+0x92>
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f911 	bl	8004970 <_fflush_r>
 800474e:	b190      	cbz	r0, 8004776 <__swbuf_r+0x92>
 8004750:	e00f      	b.n	8004772 <__swbuf_r+0x8e>
 8004752:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <__swbuf_r+0x9c>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d101      	bne.n	800475c <__swbuf_r+0x78>
 8004758:	68ac      	ldr	r4, [r5, #8]
 800475a:	e7d0      	b.n	80046fe <__swbuf_r+0x1a>
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <__swbuf_r+0xa0>)
 800475e:	429c      	cmp	r4, r3
 8004760:	bf08      	it	eq
 8004762:	68ec      	ldreq	r4, [r5, #12]
 8004764:	e7cb      	b.n	80046fe <__swbuf_r+0x1a>
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 f80d 	bl	8004788 <__swsetup_r>
 800476e:	2800      	cmp	r0, #0
 8004770:	d0cc      	beq.n	800470c <__swbuf_r+0x28>
 8004772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004776:	4638      	mov	r0, r7
 8004778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477a:	bf00      	nop
 800477c:	08005e00 	.word	0x08005e00
 8004780:	08005e20 	.word	0x08005e20
 8004784:	08005de0 	.word	0x08005de0

08004788 <__swsetup_r>:
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <__swsetup_r+0xcc>)
 800478a:	b570      	push	{r4, r5, r6, lr}
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	4606      	mov	r6, r0
 8004790:	460c      	mov	r4, r1
 8004792:	b125      	cbz	r5, 800479e <__swsetup_r+0x16>
 8004794:	69ab      	ldr	r3, [r5, #24]
 8004796:	b913      	cbnz	r3, 800479e <__swsetup_r+0x16>
 8004798:	4628      	mov	r0, r5
 800479a:	f000 f953 	bl	8004a44 <__sinit>
 800479e:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <__swsetup_r+0xd0>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d10f      	bne.n	80047c4 <__swsetup_r+0x3c>
 80047a4:	686c      	ldr	r4, [r5, #4]
 80047a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	0715      	lsls	r5, r2, #28
 80047ae:	d42c      	bmi.n	800480a <__swsetup_r+0x82>
 80047b0:	06d0      	lsls	r0, r2, #27
 80047b2:	d411      	bmi.n	80047d8 <__swsetup_r+0x50>
 80047b4:	2209      	movs	r2, #9
 80047b6:	6032      	str	r2, [r6, #0]
 80047b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047bc:	81a3      	strh	r3, [r4, #12]
 80047be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c2:	e03e      	b.n	8004842 <__swsetup_r+0xba>
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <__swsetup_r+0xd4>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d101      	bne.n	80047ce <__swsetup_r+0x46>
 80047ca:	68ac      	ldr	r4, [r5, #8]
 80047cc:	e7eb      	b.n	80047a6 <__swsetup_r+0x1e>
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <__swsetup_r+0xd8>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	bf08      	it	eq
 80047d4:	68ec      	ldreq	r4, [r5, #12]
 80047d6:	e7e6      	b.n	80047a6 <__swsetup_r+0x1e>
 80047d8:	0751      	lsls	r1, r2, #29
 80047da:	d512      	bpl.n	8004802 <__swsetup_r+0x7a>
 80047dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047de:	b141      	cbz	r1, 80047f2 <__swsetup_r+0x6a>
 80047e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047e4:	4299      	cmp	r1, r3
 80047e6:	d002      	beq.n	80047ee <__swsetup_r+0x66>
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 fa19 	bl	8004c20 <_free_r>
 80047ee:	2300      	movs	r3, #0
 80047f0:	6363      	str	r3, [r4, #52]	; 0x34
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	2300      	movs	r3, #0
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	b94b      	cbnz	r3, 8004822 <__swsetup_r+0x9a>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004818:	d003      	beq.n	8004822 <__swsetup_r+0x9a>
 800481a:	4621      	mov	r1, r4
 800481c:	4630      	mov	r0, r6
 800481e:	f000 f9bf 	bl	8004ba0 <__smakebuf_r>
 8004822:	89a2      	ldrh	r2, [r4, #12]
 8004824:	f012 0301 	ands.w	r3, r2, #1
 8004828:	d00c      	beq.n	8004844 <__swsetup_r+0xbc>
 800482a:	2300      	movs	r3, #0
 800482c:	60a3      	str	r3, [r4, #8]
 800482e:	6963      	ldr	r3, [r4, #20]
 8004830:	425b      	negs	r3, r3
 8004832:	61a3      	str	r3, [r4, #24]
 8004834:	6923      	ldr	r3, [r4, #16]
 8004836:	b953      	cbnz	r3, 800484e <__swsetup_r+0xc6>
 8004838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004840:	d1ba      	bne.n	80047b8 <__swsetup_r+0x30>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	0792      	lsls	r2, r2, #30
 8004846:	bf58      	it	pl
 8004848:	6963      	ldrpl	r3, [r4, #20]
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	e7f2      	b.n	8004834 <__swsetup_r+0xac>
 800484e:	2000      	movs	r0, #0
 8004850:	e7f7      	b.n	8004842 <__swsetup_r+0xba>
 8004852:	bf00      	nop
 8004854:	20000034 	.word	0x20000034
 8004858:	08005e00 	.word	0x08005e00
 800485c:	08005e20 	.word	0x08005e20
 8004860:	08005de0 	.word	0x08005de0

08004864 <__sflush_r>:
 8004864:	898a      	ldrh	r2, [r1, #12]
 8004866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	4605      	mov	r5, r0
 800486c:	0710      	lsls	r0, r2, #28
 800486e:	460c      	mov	r4, r1
 8004870:	d458      	bmi.n	8004924 <__sflush_r+0xc0>
 8004872:	684b      	ldr	r3, [r1, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	dc05      	bgt.n	8004884 <__sflush_r+0x20>
 8004878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	dc02      	bgt.n	8004884 <__sflush_r+0x20>
 800487e:	2000      	movs	r0, #0
 8004880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004886:	2e00      	cmp	r6, #0
 8004888:	d0f9      	beq.n	800487e <__sflush_r+0x1a>
 800488a:	2300      	movs	r3, #0
 800488c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004890:	682f      	ldr	r7, [r5, #0]
 8004892:	6a21      	ldr	r1, [r4, #32]
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	d032      	beq.n	80048fe <__sflush_r+0x9a>
 8004898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	075a      	lsls	r2, r3, #29
 800489e:	d505      	bpl.n	80048ac <__sflush_r+0x48>
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	1ac0      	subs	r0, r0, r3
 80048a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048a6:	b10b      	cbz	r3, 80048ac <__sflush_r+0x48>
 80048a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048aa:	1ac0      	subs	r0, r0, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	4602      	mov	r2, r0
 80048b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	d106      	bne.n	80048cc <__sflush_r+0x68>
 80048be:	6829      	ldr	r1, [r5, #0]
 80048c0:	291d      	cmp	r1, #29
 80048c2:	d848      	bhi.n	8004956 <__sflush_r+0xf2>
 80048c4:	4a29      	ldr	r2, [pc, #164]	; (800496c <__sflush_r+0x108>)
 80048c6:	40ca      	lsrs	r2, r1
 80048c8:	07d6      	lsls	r6, r2, #31
 80048ca:	d544      	bpl.n	8004956 <__sflush_r+0xf2>
 80048cc:	2200      	movs	r2, #0
 80048ce:	6062      	str	r2, [r4, #4]
 80048d0:	04d9      	lsls	r1, r3, #19
 80048d2:	6922      	ldr	r2, [r4, #16]
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	d504      	bpl.n	80048e2 <__sflush_r+0x7e>
 80048d8:	1c42      	adds	r2, r0, #1
 80048da:	d101      	bne.n	80048e0 <__sflush_r+0x7c>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b903      	cbnz	r3, 80048e2 <__sflush_r+0x7e>
 80048e0:	6560      	str	r0, [r4, #84]	; 0x54
 80048e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048e4:	602f      	str	r7, [r5, #0]
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d0c9      	beq.n	800487e <__sflush_r+0x1a>
 80048ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d002      	beq.n	80048f8 <__sflush_r+0x94>
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f994 	bl	8004c20 <_free_r>
 80048f8:	2000      	movs	r0, #0
 80048fa:	6360      	str	r0, [r4, #52]	; 0x34
 80048fc:	e7c0      	b.n	8004880 <__sflush_r+0x1c>
 80048fe:	2301      	movs	r3, #1
 8004900:	4628      	mov	r0, r5
 8004902:	47b0      	blx	r6
 8004904:	1c41      	adds	r1, r0, #1
 8004906:	d1c8      	bne.n	800489a <__sflush_r+0x36>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0c5      	beq.n	800489a <__sflush_r+0x36>
 800490e:	2b1d      	cmp	r3, #29
 8004910:	d001      	beq.n	8004916 <__sflush_r+0xb2>
 8004912:	2b16      	cmp	r3, #22
 8004914:	d101      	bne.n	800491a <__sflush_r+0xb6>
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	e7b1      	b.n	800487e <__sflush_r+0x1a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	e7ad      	b.n	8004880 <__sflush_r+0x1c>
 8004924:	690f      	ldr	r7, [r1, #16]
 8004926:	2f00      	cmp	r7, #0
 8004928:	d0a9      	beq.n	800487e <__sflush_r+0x1a>
 800492a:	0793      	lsls	r3, r2, #30
 800492c:	680e      	ldr	r6, [r1, #0]
 800492e:	bf08      	it	eq
 8004930:	694b      	ldreq	r3, [r1, #20]
 8004932:	600f      	str	r7, [r1, #0]
 8004934:	bf18      	it	ne
 8004936:	2300      	movne	r3, #0
 8004938:	eba6 0807 	sub.w	r8, r6, r7
 800493c:	608b      	str	r3, [r1, #8]
 800493e:	f1b8 0f00 	cmp.w	r8, #0
 8004942:	dd9c      	ble.n	800487e <__sflush_r+0x1a>
 8004944:	4643      	mov	r3, r8
 8004946:	463a      	mov	r2, r7
 8004948:	6a21      	ldr	r1, [r4, #32]
 800494a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	2800      	cmp	r0, #0
 8004952:	dc06      	bgt.n	8004962 <__sflush_r+0xfe>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004960:	e78e      	b.n	8004880 <__sflush_r+0x1c>
 8004962:	4407      	add	r7, r0
 8004964:	eba8 0800 	sub.w	r8, r8, r0
 8004968:	e7e9      	b.n	800493e <__sflush_r+0xda>
 800496a:	bf00      	nop
 800496c:	20400001 	.word	0x20400001

08004970 <_fflush_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	4605      	mov	r5, r0
 8004976:	460c      	mov	r4, r1
 8004978:	b1db      	cbz	r3, 80049b2 <_fflush_r+0x42>
 800497a:	b118      	cbz	r0, 8004984 <_fflush_r+0x14>
 800497c:	6983      	ldr	r3, [r0, #24]
 800497e:	b90b      	cbnz	r3, 8004984 <_fflush_r+0x14>
 8004980:	f000 f860 	bl	8004a44 <__sinit>
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <_fflush_r+0x48>)
 8004986:	429c      	cmp	r4, r3
 8004988:	d109      	bne.n	800499e <_fflush_r+0x2e>
 800498a:	686c      	ldr	r4, [r5, #4]
 800498c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004990:	b17b      	cbz	r3, 80049b2 <_fflush_r+0x42>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800499a:	f7ff bf63 	b.w	8004864 <__sflush_r>
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <_fflush_r+0x4c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d101      	bne.n	80049a8 <_fflush_r+0x38>
 80049a4:	68ac      	ldr	r4, [r5, #8]
 80049a6:	e7f1      	b.n	800498c <_fflush_r+0x1c>
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <_fflush_r+0x50>)
 80049aa:	429c      	cmp	r4, r3
 80049ac:	bf08      	it	eq
 80049ae:	68ec      	ldreq	r4, [r5, #12]
 80049b0:	e7ec      	b.n	800498c <_fflush_r+0x1c>
 80049b2:	2000      	movs	r0, #0
 80049b4:	bd38      	pop	{r3, r4, r5, pc}
 80049b6:	bf00      	nop
 80049b8:	08005e00 	.word	0x08005e00
 80049bc:	08005e20 	.word	0x08005e20
 80049c0:	08005de0 	.word	0x08005de0

080049c4 <std>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b510      	push	{r4, lr}
 80049c8:	4604      	mov	r4, r0
 80049ca:	e9c0 3300 	strd	r3, r3, [r0]
 80049ce:	6083      	str	r3, [r0, #8]
 80049d0:	8181      	strh	r1, [r0, #12]
 80049d2:	6643      	str	r3, [r0, #100]	; 0x64
 80049d4:	81c2      	strh	r2, [r0, #14]
 80049d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049da:	6183      	str	r3, [r0, #24]
 80049dc:	4619      	mov	r1, r3
 80049de:	2208      	movs	r2, #8
 80049e0:	305c      	adds	r0, #92	; 0x5c
 80049e2:	f7ff fd90 	bl	8004506 <memset>
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <std+0x38>)
 80049e8:	6263      	str	r3, [r4, #36]	; 0x24
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <std+0x3c>)
 80049ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <std+0x40>)
 80049f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <std+0x44>)
 80049f4:	6224      	str	r4, [r4, #32]
 80049f6:	6323      	str	r3, [r4, #48]	; 0x30
 80049f8:	bd10      	pop	{r4, pc}
 80049fa:	bf00      	nop
 80049fc:	08005631 	.word	0x08005631
 8004a00:	08005653 	.word	0x08005653
 8004a04:	0800568b 	.word	0x0800568b
 8004a08:	080056af 	.word	0x080056af

08004a0c <_cleanup_r>:
 8004a0c:	4901      	ldr	r1, [pc, #4]	; (8004a14 <_cleanup_r+0x8>)
 8004a0e:	f000 b885 	b.w	8004b1c <_fwalk_reent>
 8004a12:	bf00      	nop
 8004a14:	08004971 	.word	0x08004971

08004a18 <__sfmoreglue>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	1e4a      	subs	r2, r1, #1
 8004a1c:	2568      	movs	r5, #104	; 0x68
 8004a1e:	4355      	muls	r5, r2
 8004a20:	460e      	mov	r6, r1
 8004a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a26:	f000 f949 	bl	8004cbc <_malloc_r>
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	b140      	cbz	r0, 8004a40 <__sfmoreglue+0x28>
 8004a2e:	2100      	movs	r1, #0
 8004a30:	e9c0 1600 	strd	r1, r6, [r0]
 8004a34:	300c      	adds	r0, #12
 8004a36:	60a0      	str	r0, [r4, #8]
 8004a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a3c:	f7ff fd63 	bl	8004506 <memset>
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd70      	pop	{r4, r5, r6, pc}

08004a44 <__sinit>:
 8004a44:	6983      	ldr	r3, [r0, #24]
 8004a46:	b510      	push	{r4, lr}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	bb33      	cbnz	r3, 8004a9a <__sinit+0x56>
 8004a4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a50:	6503      	str	r3, [r0, #80]	; 0x50
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <__sinit+0x58>)
 8004a54:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <__sinit+0x5c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6282      	str	r2, [r0, #40]	; 0x28
 8004a5a:	4298      	cmp	r0, r3
 8004a5c:	bf04      	itt	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	6183      	streq	r3, [r0, #24]
 8004a62:	f000 f81f 	bl	8004aa4 <__sfp>
 8004a66:	6060      	str	r0, [r4, #4]
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f81b 	bl	8004aa4 <__sfp>
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f817 	bl	8004aa4 <__sfp>
 8004a76:	2200      	movs	r2, #0
 8004a78:	60e0      	str	r0, [r4, #12]
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	6860      	ldr	r0, [r4, #4]
 8004a7e:	f7ff ffa1 	bl	80049c4 <std>
 8004a82:	2201      	movs	r2, #1
 8004a84:	2109      	movs	r1, #9
 8004a86:	68a0      	ldr	r0, [r4, #8]
 8004a88:	f7ff ff9c 	bl	80049c4 <std>
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	2112      	movs	r1, #18
 8004a90:	68e0      	ldr	r0, [r4, #12]
 8004a92:	f7ff ff97 	bl	80049c4 <std>
 8004a96:	2301      	movs	r3, #1
 8004a98:	61a3      	str	r3, [r4, #24]
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	08005ddc 	.word	0x08005ddc
 8004aa0:	08004a0d 	.word	0x08004a0d

08004aa4 <__sfp>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <__sfp+0x70>)
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	69b3      	ldr	r3, [r6, #24]
 8004aac:	4607      	mov	r7, r0
 8004aae:	b913      	cbnz	r3, 8004ab6 <__sfp+0x12>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff ffc7 	bl	8004a44 <__sinit>
 8004ab6:	3648      	adds	r6, #72	; 0x48
 8004ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	d503      	bpl.n	8004ac8 <__sfp+0x24>
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	b133      	cbz	r3, 8004ad2 <__sfp+0x2e>
 8004ac4:	6836      	ldr	r6, [r6, #0]
 8004ac6:	e7f7      	b.n	8004ab8 <__sfp+0x14>
 8004ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004acc:	b16d      	cbz	r5, 8004aea <__sfp+0x46>
 8004ace:	3468      	adds	r4, #104	; 0x68
 8004ad0:	e7f4      	b.n	8004abc <__sfp+0x18>
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f7ff ff9f 	bl	8004a18 <__sfmoreglue>
 8004ada:	6030      	str	r0, [r6, #0]
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d1f1      	bne.n	8004ac4 <__sfp+0x20>
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <__sfp+0x74>)
 8004aec:	6665      	str	r5, [r4, #100]	; 0x64
 8004aee:	e9c4 5500 	strd	r5, r5, [r4]
 8004af2:	60a5      	str	r5, [r4, #8]
 8004af4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004af8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004afc:	2208      	movs	r2, #8
 8004afe:	4629      	mov	r1, r5
 8004b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b04:	f7ff fcff 	bl	8004506 <memset>
 8004b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b10:	e7e9      	b.n	8004ae6 <__sfp+0x42>
 8004b12:	bf00      	nop
 8004b14:	08005ddc 	.word	0x08005ddc
 8004b18:	ffff0001 	.word	0xffff0001

08004b1c <_fwalk_reent>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	4680      	mov	r8, r0
 8004b22:	4689      	mov	r9, r1
 8004b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b28:	2600      	movs	r6, #0
 8004b2a:	b914      	cbnz	r4, 8004b32 <_fwalk_reent+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b36:	3f01      	subs	r7, #1
 8004b38:	d501      	bpl.n	8004b3e <_fwalk_reent+0x22>
 8004b3a:	6824      	ldr	r4, [r4, #0]
 8004b3c:	e7f5      	b.n	8004b2a <_fwalk_reent+0xe>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d907      	bls.n	8004b54 <_fwalk_reent+0x38>
 8004b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	d003      	beq.n	8004b54 <_fwalk_reent+0x38>
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4640      	mov	r0, r8
 8004b50:	47c8      	blx	r9
 8004b52:	4306      	orrs	r6, r0
 8004b54:	3568      	adds	r5, #104	; 0x68
 8004b56:	e7ee      	b.n	8004b36 <_fwalk_reent+0x1a>

08004b58 <__swhatbuf_r>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	460e      	mov	r6, r1
 8004b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b60:	2900      	cmp	r1, #0
 8004b62:	b096      	sub	sp, #88	; 0x58
 8004b64:	4614      	mov	r4, r2
 8004b66:	461d      	mov	r5, r3
 8004b68:	da07      	bge.n	8004b7a <__swhatbuf_r+0x22>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	89b3      	ldrh	r3, [r6, #12]
 8004b70:	061a      	lsls	r2, r3, #24
 8004b72:	d410      	bmi.n	8004b96 <__swhatbuf_r+0x3e>
 8004b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b78:	e00e      	b.n	8004b98 <__swhatbuf_r+0x40>
 8004b7a:	466a      	mov	r2, sp
 8004b7c:	f000 fdbe 	bl	80056fc <_fstat_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dbf2      	blt.n	8004b6a <__swhatbuf_r+0x12>
 8004b84:	9a01      	ldr	r2, [sp, #4]
 8004b86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b8e:	425a      	negs	r2, r3
 8004b90:	415a      	adcs	r2, r3
 8004b92:	602a      	str	r2, [r5, #0]
 8004b94:	e7ee      	b.n	8004b74 <__swhatbuf_r+0x1c>
 8004b96:	2340      	movs	r3, #64	; 0x40
 8004b98:	2000      	movs	r0, #0
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	b016      	add	sp, #88	; 0x58
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}

08004ba0 <__smakebuf_r>:
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ba4:	079d      	lsls	r5, r3, #30
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	d507      	bpl.n	8004bbc <__smakebuf_r+0x1c>
 8004bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	6163      	str	r3, [r4, #20]
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	ab01      	add	r3, sp, #4
 8004bbe:	466a      	mov	r2, sp
 8004bc0:	f7ff ffca 	bl	8004b58 <__swhatbuf_r>
 8004bc4:	9900      	ldr	r1, [sp, #0]
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f877 	bl	8004cbc <_malloc_r>
 8004bce:	b948      	cbnz	r0, 8004be4 <__smakebuf_r+0x44>
 8004bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd4:	059a      	lsls	r2, r3, #22
 8004bd6:	d4ef      	bmi.n	8004bb8 <__smakebuf_r+0x18>
 8004bd8:	f023 0303 	bic.w	r3, r3, #3
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	e7e3      	b.n	8004bac <__smakebuf_r+0xc>
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <__smakebuf_r+0x7c>)
 8004be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	6020      	str	r0, [r4, #0]
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	81a3      	strh	r3, [r4, #12]
 8004bf2:	9b00      	ldr	r3, [sp, #0]
 8004bf4:	6163      	str	r3, [r4, #20]
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	6120      	str	r0, [r4, #16]
 8004bfa:	b15b      	cbz	r3, 8004c14 <__smakebuf_r+0x74>
 8004bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c00:	4630      	mov	r0, r6
 8004c02:	f000 fd8d 	bl	8005720 <_isatty_r>
 8004c06:	b128      	cbz	r0, 8004c14 <__smakebuf_r+0x74>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	431d      	orrs	r5, r3
 8004c18:	81a5      	strh	r5, [r4, #12]
 8004c1a:	e7cd      	b.n	8004bb8 <__smakebuf_r+0x18>
 8004c1c:	08004a0d 	.word	0x08004a0d

08004c20 <_free_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4605      	mov	r5, r0
 8004c24:	2900      	cmp	r1, #0
 8004c26:	d045      	beq.n	8004cb4 <_free_r+0x94>
 8004c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2c:	1f0c      	subs	r4, r1, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	18e4      	addlt	r4, r4, r3
 8004c34:	f000 fdaf 	bl	8005796 <__malloc_lock>
 8004c38:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <_free_r+0x98>)
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	b933      	cbnz	r3, 8004c4e <_free_r+0x2e>
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6014      	str	r4, [r2, #0]
 8004c44:	4628      	mov	r0, r5
 8004c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c4a:	f000 bda5 	b.w	8005798 <__malloc_unlock>
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	d90c      	bls.n	8004c6c <_free_r+0x4c>
 8004c52:	6821      	ldr	r1, [r4, #0]
 8004c54:	1862      	adds	r2, r4, r1
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bf04      	itt	eq
 8004c5a:	681a      	ldreq	r2, [r3, #0]
 8004c5c:	685b      	ldreq	r3, [r3, #4]
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	bf04      	itt	eq
 8004c62:	1852      	addeq	r2, r2, r1
 8004c64:	6022      	streq	r2, [r4, #0]
 8004c66:	6004      	str	r4, [r0, #0]
 8004c68:	e7ec      	b.n	8004c44 <_free_r+0x24>
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	b10a      	cbz	r2, 8004c74 <_free_r+0x54>
 8004c70:	42a2      	cmp	r2, r4
 8004c72:	d9fa      	bls.n	8004c6a <_free_r+0x4a>
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	1858      	adds	r0, r3, r1
 8004c78:	42a0      	cmp	r0, r4
 8004c7a:	d10b      	bne.n	8004c94 <_free_r+0x74>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	4401      	add	r1, r0
 8004c80:	1858      	adds	r0, r3, r1
 8004c82:	4282      	cmp	r2, r0
 8004c84:	6019      	str	r1, [r3, #0]
 8004c86:	d1dd      	bne.n	8004c44 <_free_r+0x24>
 8004c88:	6810      	ldr	r0, [r2, #0]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	4401      	add	r1, r0
 8004c90:	6019      	str	r1, [r3, #0]
 8004c92:	e7d7      	b.n	8004c44 <_free_r+0x24>
 8004c94:	d902      	bls.n	8004c9c <_free_r+0x7c>
 8004c96:	230c      	movs	r3, #12
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	e7d3      	b.n	8004c44 <_free_r+0x24>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	1821      	adds	r1, r4, r0
 8004ca0:	428a      	cmp	r2, r1
 8004ca2:	bf04      	itt	eq
 8004ca4:	6811      	ldreq	r1, [r2, #0]
 8004ca6:	6852      	ldreq	r2, [r2, #4]
 8004ca8:	6062      	str	r2, [r4, #4]
 8004caa:	bf04      	itt	eq
 8004cac:	1809      	addeq	r1, r1, r0
 8004cae:	6021      	streq	r1, [r4, #0]
 8004cb0:	605c      	str	r4, [r3, #4]
 8004cb2:	e7c7      	b.n	8004c44 <_free_r+0x24>
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000160 	.word	0x20000160

08004cbc <_malloc_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	1ccd      	adds	r5, r1, #3
 8004cc0:	f025 0503 	bic.w	r5, r5, #3
 8004cc4:	3508      	adds	r5, #8
 8004cc6:	2d0c      	cmp	r5, #12
 8004cc8:	bf38      	it	cc
 8004cca:	250c      	movcc	r5, #12
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	4606      	mov	r6, r0
 8004cd0:	db01      	blt.n	8004cd6 <_malloc_r+0x1a>
 8004cd2:	42a9      	cmp	r1, r5
 8004cd4:	d903      	bls.n	8004cde <_malloc_r+0x22>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	2000      	movs	r0, #0
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	f000 fd5a 	bl	8005796 <__malloc_lock>
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <_malloc_r+0xac>)
 8004ce4:	6814      	ldr	r4, [r2, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	b991      	cbnz	r1, 8004d10 <_malloc_r+0x54>
 8004cea:	4c20      	ldr	r4, [pc, #128]	; (8004d6c <_malloc_r+0xb0>)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	b91b      	cbnz	r3, 8004cf8 <_malloc_r+0x3c>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 fc8d 	bl	8005610 <_sbrk_r>
 8004cf6:	6020      	str	r0, [r4, #0]
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 fc88 	bl	8005610 <_sbrk_r>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d124      	bne.n	8004d4e <_malloc_r+0x92>
 8004d04:	230c      	movs	r3, #12
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 fd45 	bl	8005798 <__malloc_unlock>
 8004d0e:	e7e4      	b.n	8004cda <_malloc_r+0x1e>
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	1b5b      	subs	r3, r3, r5
 8004d14:	d418      	bmi.n	8004d48 <_malloc_r+0x8c>
 8004d16:	2b0b      	cmp	r3, #11
 8004d18:	d90f      	bls.n	8004d3a <_malloc_r+0x7e>
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	50cd      	str	r5, [r1, r3]
 8004d1e:	18cc      	adds	r4, r1, r3
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 fd39 	bl	8005798 <__malloc_unlock>
 8004d26:	f104 000b 	add.w	r0, r4, #11
 8004d2a:	1d23      	adds	r3, r4, #4
 8004d2c:	f020 0007 	bic.w	r0, r0, #7
 8004d30:	1ac3      	subs	r3, r0, r3
 8004d32:	d0d3      	beq.n	8004cdc <_malloc_r+0x20>
 8004d34:	425a      	negs	r2, r3
 8004d36:	50e2      	str	r2, [r4, r3]
 8004d38:	e7d0      	b.n	8004cdc <_malloc_r+0x20>
 8004d3a:	428c      	cmp	r4, r1
 8004d3c:	684b      	ldr	r3, [r1, #4]
 8004d3e:	bf16      	itet	ne
 8004d40:	6063      	strne	r3, [r4, #4]
 8004d42:	6013      	streq	r3, [r2, #0]
 8004d44:	460c      	movne	r4, r1
 8004d46:	e7eb      	b.n	8004d20 <_malloc_r+0x64>
 8004d48:	460c      	mov	r4, r1
 8004d4a:	6849      	ldr	r1, [r1, #4]
 8004d4c:	e7cc      	b.n	8004ce8 <_malloc_r+0x2c>
 8004d4e:	1cc4      	adds	r4, r0, #3
 8004d50:	f024 0403 	bic.w	r4, r4, #3
 8004d54:	42a0      	cmp	r0, r4
 8004d56:	d005      	beq.n	8004d64 <_malloc_r+0xa8>
 8004d58:	1a21      	subs	r1, r4, r0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f000 fc58 	bl	8005610 <_sbrk_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d0cf      	beq.n	8004d04 <_malloc_r+0x48>
 8004d64:	6025      	str	r5, [r4, #0]
 8004d66:	e7db      	b.n	8004d20 <_malloc_r+0x64>
 8004d68:	20000160 	.word	0x20000160
 8004d6c:	20000164 	.word	0x20000164

08004d70 <__ssputs_r>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	688e      	ldr	r6, [r1, #8]
 8004d76:	429e      	cmp	r6, r3
 8004d78:	4682      	mov	sl, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	4699      	mov	r9, r3
 8004d80:	d837      	bhi.n	8004df2 <__ssputs_r+0x82>
 8004d82:	898a      	ldrh	r2, [r1, #12]
 8004d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d88:	d031      	beq.n	8004dee <__ssputs_r+0x7e>
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	6909      	ldr	r1, [r1, #16]
 8004d8e:	1a6f      	subs	r7, r5, r1
 8004d90:	6965      	ldr	r5, [r4, #20]
 8004d92:	2302      	movs	r3, #2
 8004d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d98:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d9c:	f109 0301 	add.w	r3, r9, #1
 8004da0:	443b      	add	r3, r7
 8004da2:	429d      	cmp	r5, r3
 8004da4:	bf38      	it	cc
 8004da6:	461d      	movcc	r5, r3
 8004da8:	0553      	lsls	r3, r2, #21
 8004daa:	d530      	bpl.n	8004e0e <__ssputs_r+0x9e>
 8004dac:	4629      	mov	r1, r5
 8004dae:	f7ff ff85 	bl	8004cbc <_malloc_r>
 8004db2:	4606      	mov	r6, r0
 8004db4:	b950      	cbnz	r0, 8004dcc <__ssputs_r+0x5c>
 8004db6:	230c      	movs	r3, #12
 8004db8:	f8ca 3000 	str.w	r3, [sl]
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	463a      	mov	r2, r7
 8004dce:	6921      	ldr	r1, [r4, #16]
 8004dd0:	f7ff fb8e 	bl	80044f0 <memcpy>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	6126      	str	r6, [r4, #16]
 8004de2:	6165      	str	r5, [r4, #20]
 8004de4:	443e      	add	r6, r7
 8004de6:	1bed      	subs	r5, r5, r7
 8004de8:	6026      	str	r6, [r4, #0]
 8004dea:	60a5      	str	r5, [r4, #8]
 8004dec:	464e      	mov	r6, r9
 8004dee:	454e      	cmp	r6, r9
 8004df0:	d900      	bls.n	8004df4 <__ssputs_r+0x84>
 8004df2:	464e      	mov	r6, r9
 8004df4:	4632      	mov	r2, r6
 8004df6:	4641      	mov	r1, r8
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	f000 fcb3 	bl	8005764 <memmove>
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	1b9b      	subs	r3, r3, r6
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	441e      	add	r6, r3
 8004e08:	6026      	str	r6, [r4, #0]
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e7dc      	b.n	8004dc8 <__ssputs_r+0x58>
 8004e0e:	462a      	mov	r2, r5
 8004e10:	f000 fcc3 	bl	800579a <_realloc_r>
 8004e14:	4606      	mov	r6, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d1e2      	bne.n	8004de0 <__ssputs_r+0x70>
 8004e1a:	6921      	ldr	r1, [r4, #16]
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	f7ff feff 	bl	8004c20 <_free_r>
 8004e22:	e7c8      	b.n	8004db6 <__ssputs_r+0x46>

08004e24 <_svfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	461d      	mov	r5, r3
 8004e2a:	898b      	ldrh	r3, [r1, #12]
 8004e2c:	061f      	lsls	r7, r3, #24
 8004e2e:	b09d      	sub	sp, #116	; 0x74
 8004e30:	4680      	mov	r8, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	4616      	mov	r6, r2
 8004e36:	d50f      	bpl.n	8004e58 <_svfiprintf_r+0x34>
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	b96b      	cbnz	r3, 8004e58 <_svfiprintf_r+0x34>
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	f7ff ff3d 	bl	8004cbc <_malloc_r>
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	6120      	str	r0, [r4, #16]
 8004e46:	b928      	cbnz	r0, 8004e54 <_svfiprintf_r+0x30>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	f8c8 3000 	str.w	r3, [r8]
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e52:	e0c8      	b.n	8004fe6 <_svfiprintf_r+0x1c2>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	6163      	str	r3, [r4, #20]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e62:	2330      	movs	r3, #48	; 0x30
 8004e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e68:	9503      	str	r5, [sp, #12]
 8004e6a:	f04f 0b01 	mov.w	fp, #1
 8004e6e:	4637      	mov	r7, r6
 8004e70:	463d      	mov	r5, r7
 8004e72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e76:	b10b      	cbz	r3, 8004e7c <_svfiprintf_r+0x58>
 8004e78:	2b25      	cmp	r3, #37	; 0x25
 8004e7a:	d13e      	bne.n	8004efa <_svfiprintf_r+0xd6>
 8004e7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e80:	d00b      	beq.n	8004e9a <_svfiprintf_r+0x76>
 8004e82:	4653      	mov	r3, sl
 8004e84:	4632      	mov	r2, r6
 8004e86:	4621      	mov	r1, r4
 8004e88:	4640      	mov	r0, r8
 8004e8a:	f7ff ff71 	bl	8004d70 <__ssputs_r>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f000 80a4 	beq.w	8004fdc <_svfiprintf_r+0x1b8>
 8004e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e96:	4453      	add	r3, sl
 8004e98:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9a:	783b      	ldrb	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 809d 	beq.w	8004fdc <_svfiprintf_r+0x1b8>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	9307      	str	r3, [sp, #28]
 8004eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb6:	462f      	mov	r7, r5
 8004eb8:	2205      	movs	r2, #5
 8004eba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004ebe:	4850      	ldr	r0, [pc, #320]	; (8005000 <_svfiprintf_r+0x1dc>)
 8004ec0:	f7fb f9a6 	bl	8000210 <memchr>
 8004ec4:	9b04      	ldr	r3, [sp, #16]
 8004ec6:	b9d0      	cbnz	r0, 8004efe <_svfiprintf_r+0xda>
 8004ec8:	06d9      	lsls	r1, r3, #27
 8004eca:	bf44      	itt	mi
 8004ecc:	2220      	movmi	r2, #32
 8004ece:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed2:	071a      	lsls	r2, r3, #28
 8004ed4:	bf44      	itt	mi
 8004ed6:	222b      	movmi	r2, #43	; 0x2b
 8004ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004edc:	782a      	ldrb	r2, [r5, #0]
 8004ede:	2a2a      	cmp	r2, #42	; 0x2a
 8004ee0:	d015      	beq.n	8004f0e <_svfiprintf_r+0xea>
 8004ee2:	9a07      	ldr	r2, [sp, #28]
 8004ee4:	462f      	mov	r7, r5
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	250a      	movs	r5, #10
 8004eea:	4639      	mov	r1, r7
 8004eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef0:	3b30      	subs	r3, #48	; 0x30
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d94d      	bls.n	8004f92 <_svfiprintf_r+0x16e>
 8004ef6:	b1b8      	cbz	r0, 8004f28 <_svfiprintf_r+0x104>
 8004ef8:	e00f      	b.n	8004f1a <_svfiprintf_r+0xf6>
 8004efa:	462f      	mov	r7, r5
 8004efc:	e7b8      	b.n	8004e70 <_svfiprintf_r+0x4c>
 8004efe:	4a40      	ldr	r2, [pc, #256]	; (8005000 <_svfiprintf_r+0x1dc>)
 8004f00:	1a80      	subs	r0, r0, r2
 8004f02:	fa0b f000 	lsl.w	r0, fp, r0
 8004f06:	4318      	orrs	r0, r3
 8004f08:	9004      	str	r0, [sp, #16]
 8004f0a:	463d      	mov	r5, r7
 8004f0c:	e7d3      	b.n	8004eb6 <_svfiprintf_r+0x92>
 8004f0e:	9a03      	ldr	r2, [sp, #12]
 8004f10:	1d11      	adds	r1, r2, #4
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	db01      	blt.n	8004f1e <_svfiprintf_r+0xfa>
 8004f1a:	9207      	str	r2, [sp, #28]
 8004f1c:	e004      	b.n	8004f28 <_svfiprintf_r+0x104>
 8004f1e:	4252      	negs	r2, r2
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	9207      	str	r2, [sp, #28]
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	783b      	ldrb	r3, [r7, #0]
 8004f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f2c:	d10c      	bne.n	8004f48 <_svfiprintf_r+0x124>
 8004f2e:	787b      	ldrb	r3, [r7, #1]
 8004f30:	2b2a      	cmp	r3, #42	; 0x2a
 8004f32:	d133      	bne.n	8004f9c <_svfiprintf_r+0x178>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfb8      	it	lt
 8004f40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f44:	3702      	adds	r7, #2
 8004f46:	9305      	str	r3, [sp, #20]
 8004f48:	4d2e      	ldr	r5, [pc, #184]	; (8005004 <_svfiprintf_r+0x1e0>)
 8004f4a:	7839      	ldrb	r1, [r7, #0]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7fb f95e 	bl	8000210 <memchr>
 8004f54:	b138      	cbz	r0, 8004f66 <_svfiprintf_r+0x142>
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	1b40      	subs	r0, r0, r5
 8004f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	4303      	orrs	r3, r0
 8004f62:	3701      	adds	r7, #1
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	7839      	ldrb	r1, [r7, #0]
 8004f68:	4827      	ldr	r0, [pc, #156]	; (8005008 <_svfiprintf_r+0x1e4>)
 8004f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f6e:	2206      	movs	r2, #6
 8004f70:	1c7e      	adds	r6, r7, #1
 8004f72:	f7fb f94d 	bl	8000210 <memchr>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d038      	beq.n	8004fec <_svfiprintf_r+0x1c8>
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <_svfiprintf_r+0x1e8>)
 8004f7c:	bb13      	cbnz	r3, 8004fc4 <_svfiprintf_r+0x1a0>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	3308      	adds	r3, #8
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	444b      	add	r3, r9
 8004f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f90:	e76d      	b.n	8004e6e <_svfiprintf_r+0x4a>
 8004f92:	fb05 3202 	mla	r2, r5, r2, r3
 8004f96:	2001      	movs	r0, #1
 8004f98:	460f      	mov	r7, r1
 8004f9a:	e7a6      	b.n	8004eea <_svfiprintf_r+0xc6>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	3701      	adds	r7, #1
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	250a      	movs	r5, #10
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fac:	3a30      	subs	r2, #48	; 0x30
 8004fae:	2a09      	cmp	r2, #9
 8004fb0:	d903      	bls.n	8004fba <_svfiprintf_r+0x196>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0c8      	beq.n	8004f48 <_svfiprintf_r+0x124>
 8004fb6:	9105      	str	r1, [sp, #20]
 8004fb8:	e7c6      	b.n	8004f48 <_svfiprintf_r+0x124>
 8004fba:	fb05 2101 	mla	r1, r5, r1, r2
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	e7f0      	b.n	8004fa6 <_svfiprintf_r+0x182>
 8004fc4:	ab03      	add	r3, sp, #12
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <_svfiprintf_r+0x1ec>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	4640      	mov	r0, r8
 8004fd0:	f3af 8000 	nop.w
 8004fd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004fd8:	4681      	mov	r9, r0
 8004fda:	d1d6      	bne.n	8004f8a <_svfiprintf_r+0x166>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	065b      	lsls	r3, r3, #25
 8004fe0:	f53f af35 	bmi.w	8004e4e <_svfiprintf_r+0x2a>
 8004fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe6:	b01d      	add	sp, #116	; 0x74
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <_svfiprintf_r+0x1ec>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f000 f9c2 	bl	8005380 <_printf_i>
 8004ffc:	e7ea      	b.n	8004fd4 <_svfiprintf_r+0x1b0>
 8004ffe:	bf00      	nop
 8005000:	08005e40 	.word	0x08005e40
 8005004:	08005e46 	.word	0x08005e46
 8005008:	08005e4a 	.word	0x08005e4a
 800500c:	00000000 	.word	0x00000000
 8005010:	08004d71 	.word	0x08004d71

08005014 <__sfputc_r>:
 8005014:	6893      	ldr	r3, [r2, #8]
 8005016:	3b01      	subs	r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	b410      	push	{r4}
 800501c:	6093      	str	r3, [r2, #8]
 800501e:	da08      	bge.n	8005032 <__sfputc_r+0x1e>
 8005020:	6994      	ldr	r4, [r2, #24]
 8005022:	42a3      	cmp	r3, r4
 8005024:	db01      	blt.n	800502a <__sfputc_r+0x16>
 8005026:	290a      	cmp	r1, #10
 8005028:	d103      	bne.n	8005032 <__sfputc_r+0x1e>
 800502a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800502e:	f7ff bb59 	b.w	80046e4 <__swbuf_r>
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	1c58      	adds	r0, r3, #1
 8005036:	6010      	str	r0, [r2, #0]
 8005038:	7019      	strb	r1, [r3, #0]
 800503a:	4608      	mov	r0, r1
 800503c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005040:	4770      	bx	lr

08005042 <__sfputs_r>:
 8005042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
 8005048:	4614      	mov	r4, r2
 800504a:	18d5      	adds	r5, r2, r3
 800504c:	42ac      	cmp	r4, r5
 800504e:	d101      	bne.n	8005054 <__sfputs_r+0x12>
 8005050:	2000      	movs	r0, #0
 8005052:	e007      	b.n	8005064 <__sfputs_r+0x22>
 8005054:	463a      	mov	r2, r7
 8005056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ffda 	bl	8005014 <__sfputc_r>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d1f3      	bne.n	800504c <__sfputs_r+0xa>
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005068 <_vfiprintf_r>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	460c      	mov	r4, r1
 800506e:	b09d      	sub	sp, #116	; 0x74
 8005070:	4617      	mov	r7, r2
 8005072:	461d      	mov	r5, r3
 8005074:	4606      	mov	r6, r0
 8005076:	b118      	cbz	r0, 8005080 <_vfiprintf_r+0x18>
 8005078:	6983      	ldr	r3, [r0, #24]
 800507a:	b90b      	cbnz	r3, 8005080 <_vfiprintf_r+0x18>
 800507c:	f7ff fce2 	bl	8004a44 <__sinit>
 8005080:	4b7c      	ldr	r3, [pc, #496]	; (8005274 <_vfiprintf_r+0x20c>)
 8005082:	429c      	cmp	r4, r3
 8005084:	d158      	bne.n	8005138 <_vfiprintf_r+0xd0>
 8005086:	6874      	ldr	r4, [r6, #4]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	0718      	lsls	r0, r3, #28
 800508c:	d55e      	bpl.n	800514c <_vfiprintf_r+0xe4>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05b      	beq.n	800514c <_vfiprintf_r+0xe4>
 8005094:	2300      	movs	r3, #0
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	2320      	movs	r3, #32
 800509a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800509e:	2330      	movs	r3, #48	; 0x30
 80050a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a4:	9503      	str	r5, [sp, #12]
 80050a6:	f04f 0b01 	mov.w	fp, #1
 80050aa:	46b8      	mov	r8, r7
 80050ac:	4645      	mov	r5, r8
 80050ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050b2:	b10b      	cbz	r3, 80050b8 <_vfiprintf_r+0x50>
 80050b4:	2b25      	cmp	r3, #37	; 0x25
 80050b6:	d154      	bne.n	8005162 <_vfiprintf_r+0xfa>
 80050b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80050bc:	d00b      	beq.n	80050d6 <_vfiprintf_r+0x6e>
 80050be:	4653      	mov	r3, sl
 80050c0:	463a      	mov	r2, r7
 80050c2:	4621      	mov	r1, r4
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff ffbc 	bl	8005042 <__sfputs_r>
 80050ca:	3001      	adds	r0, #1
 80050cc:	f000 80c2 	beq.w	8005254 <_vfiprintf_r+0x1ec>
 80050d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d2:	4453      	add	r3, sl
 80050d4:	9309      	str	r3, [sp, #36]	; 0x24
 80050d6:	f898 3000 	ldrb.w	r3, [r8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80ba 	beq.w	8005254 <_vfiprintf_r+0x1ec>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	9307      	str	r3, [sp, #28]
 80050ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f2:	931a      	str	r3, [sp, #104]	; 0x68
 80050f4:	46a8      	mov	r8, r5
 80050f6:	2205      	movs	r2, #5
 80050f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050fc:	485e      	ldr	r0, [pc, #376]	; (8005278 <_vfiprintf_r+0x210>)
 80050fe:	f7fb f887 	bl	8000210 <memchr>
 8005102:	9b04      	ldr	r3, [sp, #16]
 8005104:	bb78      	cbnz	r0, 8005166 <_vfiprintf_r+0xfe>
 8005106:	06d9      	lsls	r1, r3, #27
 8005108:	bf44      	itt	mi
 800510a:	2220      	movmi	r2, #32
 800510c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005110:	071a      	lsls	r2, r3, #28
 8005112:	bf44      	itt	mi
 8005114:	222b      	movmi	r2, #43	; 0x2b
 8005116:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800511a:	782a      	ldrb	r2, [r5, #0]
 800511c:	2a2a      	cmp	r2, #42	; 0x2a
 800511e:	d02a      	beq.n	8005176 <_vfiprintf_r+0x10e>
 8005120:	9a07      	ldr	r2, [sp, #28]
 8005122:	46a8      	mov	r8, r5
 8005124:	2000      	movs	r0, #0
 8005126:	250a      	movs	r5, #10
 8005128:	4641      	mov	r1, r8
 800512a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800512e:	3b30      	subs	r3, #48	; 0x30
 8005130:	2b09      	cmp	r3, #9
 8005132:	d969      	bls.n	8005208 <_vfiprintf_r+0x1a0>
 8005134:	b360      	cbz	r0, 8005190 <_vfiprintf_r+0x128>
 8005136:	e024      	b.n	8005182 <_vfiprintf_r+0x11a>
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <_vfiprintf_r+0x214>)
 800513a:	429c      	cmp	r4, r3
 800513c:	d101      	bne.n	8005142 <_vfiprintf_r+0xda>
 800513e:	68b4      	ldr	r4, [r6, #8]
 8005140:	e7a2      	b.n	8005088 <_vfiprintf_r+0x20>
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <_vfiprintf_r+0x218>)
 8005144:	429c      	cmp	r4, r3
 8005146:	bf08      	it	eq
 8005148:	68f4      	ldreq	r4, [r6, #12]
 800514a:	e79d      	b.n	8005088 <_vfiprintf_r+0x20>
 800514c:	4621      	mov	r1, r4
 800514e:	4630      	mov	r0, r6
 8005150:	f7ff fb1a 	bl	8004788 <__swsetup_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	d09d      	beq.n	8005094 <_vfiprintf_r+0x2c>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	b01d      	add	sp, #116	; 0x74
 800515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005162:	46a8      	mov	r8, r5
 8005164:	e7a2      	b.n	80050ac <_vfiprintf_r+0x44>
 8005166:	4a44      	ldr	r2, [pc, #272]	; (8005278 <_vfiprintf_r+0x210>)
 8005168:	1a80      	subs	r0, r0, r2
 800516a:	fa0b f000 	lsl.w	r0, fp, r0
 800516e:	4318      	orrs	r0, r3
 8005170:	9004      	str	r0, [sp, #16]
 8005172:	4645      	mov	r5, r8
 8005174:	e7be      	b.n	80050f4 <_vfiprintf_r+0x8c>
 8005176:	9a03      	ldr	r2, [sp, #12]
 8005178:	1d11      	adds	r1, r2, #4
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	9103      	str	r1, [sp, #12]
 800517e:	2a00      	cmp	r2, #0
 8005180:	db01      	blt.n	8005186 <_vfiprintf_r+0x11e>
 8005182:	9207      	str	r2, [sp, #28]
 8005184:	e004      	b.n	8005190 <_vfiprintf_r+0x128>
 8005186:	4252      	negs	r2, r2
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	9207      	str	r2, [sp, #28]
 800518e:	9304      	str	r3, [sp, #16]
 8005190:	f898 3000 	ldrb.w	r3, [r8]
 8005194:	2b2e      	cmp	r3, #46	; 0x2e
 8005196:	d10e      	bne.n	80051b6 <_vfiprintf_r+0x14e>
 8005198:	f898 3001 	ldrb.w	r3, [r8, #1]
 800519c:	2b2a      	cmp	r3, #42	; 0x2a
 800519e:	d138      	bne.n	8005212 <_vfiprintf_r+0x1aa>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	9203      	str	r2, [sp, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bfb8      	it	lt
 80051ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051b0:	f108 0802 	add.w	r8, r8, #2
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4d33      	ldr	r5, [pc, #204]	; (8005284 <_vfiprintf_r+0x21c>)
 80051b8:	f898 1000 	ldrb.w	r1, [r8]
 80051bc:	2203      	movs	r2, #3
 80051be:	4628      	mov	r0, r5
 80051c0:	f7fb f826 	bl	8000210 <memchr>
 80051c4:	b140      	cbz	r0, 80051d8 <_vfiprintf_r+0x170>
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	1b40      	subs	r0, r0, r5
 80051ca:	fa03 f000 	lsl.w	r0, r3, r0
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	4303      	orrs	r3, r0
 80051d2:	f108 0801 	add.w	r8, r8, #1
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	f898 1000 	ldrb.w	r1, [r8]
 80051dc:	482a      	ldr	r0, [pc, #168]	; (8005288 <_vfiprintf_r+0x220>)
 80051de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051e2:	2206      	movs	r2, #6
 80051e4:	f108 0701 	add.w	r7, r8, #1
 80051e8:	f7fb f812 	bl	8000210 <memchr>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d037      	beq.n	8005260 <_vfiprintf_r+0x1f8>
 80051f0:	4b26      	ldr	r3, [pc, #152]	; (800528c <_vfiprintf_r+0x224>)
 80051f2:	bb1b      	cbnz	r3, 800523c <_vfiprintf_r+0x1d4>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	3307      	adds	r3, #7
 80051f8:	f023 0307 	bic.w	r3, r3, #7
 80051fc:	3308      	adds	r3, #8
 80051fe:	9303      	str	r3, [sp, #12]
 8005200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005202:	444b      	add	r3, r9
 8005204:	9309      	str	r3, [sp, #36]	; 0x24
 8005206:	e750      	b.n	80050aa <_vfiprintf_r+0x42>
 8005208:	fb05 3202 	mla	r2, r5, r2, r3
 800520c:	2001      	movs	r0, #1
 800520e:	4688      	mov	r8, r1
 8005210:	e78a      	b.n	8005128 <_vfiprintf_r+0xc0>
 8005212:	2300      	movs	r3, #0
 8005214:	f108 0801 	add.w	r8, r8, #1
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	4619      	mov	r1, r3
 800521c:	250a      	movs	r5, #10
 800521e:	4640      	mov	r0, r8
 8005220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005224:	3a30      	subs	r2, #48	; 0x30
 8005226:	2a09      	cmp	r2, #9
 8005228:	d903      	bls.n	8005232 <_vfiprintf_r+0x1ca>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0c3      	beq.n	80051b6 <_vfiprintf_r+0x14e>
 800522e:	9105      	str	r1, [sp, #20]
 8005230:	e7c1      	b.n	80051b6 <_vfiprintf_r+0x14e>
 8005232:	fb05 2101 	mla	r1, r5, r1, r2
 8005236:	2301      	movs	r3, #1
 8005238:	4680      	mov	r8, r0
 800523a:	e7f0      	b.n	800521e <_vfiprintf_r+0x1b6>
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4622      	mov	r2, r4
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <_vfiprintf_r+0x228>)
 8005244:	a904      	add	r1, sp, #16
 8005246:	4630      	mov	r0, r6
 8005248:	f3af 8000 	nop.w
 800524c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005250:	4681      	mov	r9, r0
 8005252:	d1d5      	bne.n	8005200 <_vfiprintf_r+0x198>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	065b      	lsls	r3, r3, #25
 8005258:	f53f af7e 	bmi.w	8005158 <_vfiprintf_r+0xf0>
 800525c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800525e:	e77d      	b.n	800515c <_vfiprintf_r+0xf4>
 8005260:	ab03      	add	r3, sp, #12
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	4622      	mov	r2, r4
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <_vfiprintf_r+0x228>)
 8005268:	a904      	add	r1, sp, #16
 800526a:	4630      	mov	r0, r6
 800526c:	f000 f888 	bl	8005380 <_printf_i>
 8005270:	e7ec      	b.n	800524c <_vfiprintf_r+0x1e4>
 8005272:	bf00      	nop
 8005274:	08005e00 	.word	0x08005e00
 8005278:	08005e40 	.word	0x08005e40
 800527c:	08005e20 	.word	0x08005e20
 8005280:	08005de0 	.word	0x08005de0
 8005284:	08005e46 	.word	0x08005e46
 8005288:	08005e4a 	.word	0x08005e4a
 800528c:	00000000 	.word	0x00000000
 8005290:	08005043 	.word	0x08005043

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4691      	mov	r9, r2
 800529a:	461f      	mov	r7, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfb8      	it	lt
 80052a8:	4613      	movlt	r3, r2
 80052aa:	f8c9 3000 	str.w	r3, [r9]
 80052ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b2:	4606      	mov	r6, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	b112      	cbz	r2, 80052be <_printf_common+0x2a>
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c9 3000 	str.w	r3, [r9]
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	0699      	lsls	r1, r3, #26
 80052c2:	bf42      	ittt	mi
 80052c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052c8:	3302      	addmi	r3, #2
 80052ca:	f8c9 3000 	strmi.w	r3, [r9]
 80052ce:	6825      	ldr	r5, [r4, #0]
 80052d0:	f015 0506 	ands.w	r5, r5, #6
 80052d4:	d107      	bne.n	80052e6 <_printf_common+0x52>
 80052d6:	f104 0a19 	add.w	sl, r4, #25
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	f8d9 2000 	ldr.w	r2, [r9]
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	42ab      	cmp	r3, r5
 80052e4:	dc28      	bgt.n	8005338 <_printf_common+0xa4>
 80052e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	3300      	adds	r3, #0
 80052ee:	bf18      	it	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	0692      	lsls	r2, r2, #26
 80052f4:	d42d      	bmi.n	8005352 <_printf_common+0xbe>
 80052f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052fa:	4639      	mov	r1, r7
 80052fc:	4630      	mov	r0, r6
 80052fe:	47c0      	blx	r8
 8005300:	3001      	adds	r0, #1
 8005302:	d020      	beq.n	8005346 <_printf_common+0xb2>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	68e5      	ldr	r5, [r4, #12]
 8005308:	f8d9 2000 	ldr.w	r2, [r9]
 800530c:	f003 0306 	and.w	r3, r3, #6
 8005310:	2b04      	cmp	r3, #4
 8005312:	bf08      	it	eq
 8005314:	1aad      	subeq	r5, r5, r2
 8005316:	68a3      	ldr	r3, [r4, #8]
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	bf0c      	ite	eq
 800531c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005320:	2500      	movne	r5, #0
 8005322:	4293      	cmp	r3, r2
 8005324:	bfc4      	itt	gt
 8005326:	1a9b      	subgt	r3, r3, r2
 8005328:	18ed      	addgt	r5, r5, r3
 800532a:	f04f 0900 	mov.w	r9, #0
 800532e:	341a      	adds	r4, #26
 8005330:	454d      	cmp	r5, r9
 8005332:	d11a      	bne.n	800536a <_printf_common+0xd6>
 8005334:	2000      	movs	r0, #0
 8005336:	e008      	b.n	800534a <_printf_common+0xb6>
 8005338:	2301      	movs	r3, #1
 800533a:	4652      	mov	r2, sl
 800533c:	4639      	mov	r1, r7
 800533e:	4630      	mov	r0, r6
 8005340:	47c0      	blx	r8
 8005342:	3001      	adds	r0, #1
 8005344:	d103      	bne.n	800534e <_printf_common+0xba>
 8005346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534e:	3501      	adds	r5, #1
 8005350:	e7c3      	b.n	80052da <_printf_common+0x46>
 8005352:	18e1      	adds	r1, r4, r3
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	2030      	movs	r0, #48	; 0x30
 8005358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800535c:	4422      	add	r2, r4
 800535e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005362:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005366:	3302      	adds	r3, #2
 8005368:	e7c5      	b.n	80052f6 <_printf_common+0x62>
 800536a:	2301      	movs	r3, #1
 800536c:	4622      	mov	r2, r4
 800536e:	4639      	mov	r1, r7
 8005370:	4630      	mov	r0, r6
 8005372:	47c0      	blx	r8
 8005374:	3001      	adds	r0, #1
 8005376:	d0e6      	beq.n	8005346 <_printf_common+0xb2>
 8005378:	f109 0901 	add.w	r9, r9, #1
 800537c:	e7d8      	b.n	8005330 <_printf_common+0x9c>
	...

08005380 <_printf_i>:
 8005380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005384:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005388:	460c      	mov	r4, r1
 800538a:	7e09      	ldrb	r1, [r1, #24]
 800538c:	b085      	sub	sp, #20
 800538e:	296e      	cmp	r1, #110	; 0x6e
 8005390:	4617      	mov	r7, r2
 8005392:	4606      	mov	r6, r0
 8005394:	4698      	mov	r8, r3
 8005396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005398:	f000 80b3 	beq.w	8005502 <_printf_i+0x182>
 800539c:	d822      	bhi.n	80053e4 <_printf_i+0x64>
 800539e:	2963      	cmp	r1, #99	; 0x63
 80053a0:	d036      	beq.n	8005410 <_printf_i+0x90>
 80053a2:	d80a      	bhi.n	80053ba <_printf_i+0x3a>
 80053a4:	2900      	cmp	r1, #0
 80053a6:	f000 80b9 	beq.w	800551c <_printf_i+0x19c>
 80053aa:	2958      	cmp	r1, #88	; 0x58
 80053ac:	f000 8083 	beq.w	80054b6 <_printf_i+0x136>
 80053b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053b8:	e032      	b.n	8005420 <_printf_i+0xa0>
 80053ba:	2964      	cmp	r1, #100	; 0x64
 80053bc:	d001      	beq.n	80053c2 <_printf_i+0x42>
 80053be:	2969      	cmp	r1, #105	; 0x69
 80053c0:	d1f6      	bne.n	80053b0 <_printf_i+0x30>
 80053c2:	6820      	ldr	r0, [r4, #0]
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	0605      	lsls	r5, r0, #24
 80053c8:	f103 0104 	add.w	r1, r3, #4
 80053cc:	d52a      	bpl.n	8005424 <_printf_i+0xa4>
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da03      	bge.n	80053de <_printf_i+0x5e>
 80053d6:	222d      	movs	r2, #45	; 0x2d
 80053d8:	425b      	negs	r3, r3
 80053da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053de:	486f      	ldr	r0, [pc, #444]	; (800559c <_printf_i+0x21c>)
 80053e0:	220a      	movs	r2, #10
 80053e2:	e039      	b.n	8005458 <_printf_i+0xd8>
 80053e4:	2973      	cmp	r1, #115	; 0x73
 80053e6:	f000 809d 	beq.w	8005524 <_printf_i+0x1a4>
 80053ea:	d808      	bhi.n	80053fe <_printf_i+0x7e>
 80053ec:	296f      	cmp	r1, #111	; 0x6f
 80053ee:	d020      	beq.n	8005432 <_printf_i+0xb2>
 80053f0:	2970      	cmp	r1, #112	; 0x70
 80053f2:	d1dd      	bne.n	80053b0 <_printf_i+0x30>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f043 0320 	orr.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	e003      	b.n	8005406 <_printf_i+0x86>
 80053fe:	2975      	cmp	r1, #117	; 0x75
 8005400:	d017      	beq.n	8005432 <_printf_i+0xb2>
 8005402:	2978      	cmp	r1, #120	; 0x78
 8005404:	d1d4      	bne.n	80053b0 <_printf_i+0x30>
 8005406:	2378      	movs	r3, #120	; 0x78
 8005408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800540c:	4864      	ldr	r0, [pc, #400]	; (80055a0 <_printf_i+0x220>)
 800540e:	e055      	b.n	80054bc <_printf_i+0x13c>
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	1d19      	adds	r1, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6011      	str	r1, [r2, #0]
 8005418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800541c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005420:	2301      	movs	r3, #1
 8005422:	e08c      	b.n	800553e <_printf_i+0x1be>
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6011      	str	r1, [r2, #0]
 8005428:	f010 0f40 	tst.w	r0, #64	; 0x40
 800542c:	bf18      	it	ne
 800542e:	b21b      	sxthne	r3, r3
 8005430:	e7cf      	b.n	80053d2 <_printf_i+0x52>
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	1d18      	adds	r0, r3, #4
 8005438:	6010      	str	r0, [r2, #0]
 800543a:	0628      	lsls	r0, r5, #24
 800543c:	d501      	bpl.n	8005442 <_printf_i+0xc2>
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	e002      	b.n	8005448 <_printf_i+0xc8>
 8005442:	0668      	lsls	r0, r5, #25
 8005444:	d5fb      	bpl.n	800543e <_printf_i+0xbe>
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	4854      	ldr	r0, [pc, #336]	; (800559c <_printf_i+0x21c>)
 800544a:	296f      	cmp	r1, #111	; 0x6f
 800544c:	bf14      	ite	ne
 800544e:	220a      	movne	r2, #10
 8005450:	2208      	moveq	r2, #8
 8005452:	2100      	movs	r1, #0
 8005454:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005458:	6865      	ldr	r5, [r4, #4]
 800545a:	60a5      	str	r5, [r4, #8]
 800545c:	2d00      	cmp	r5, #0
 800545e:	f2c0 8095 	blt.w	800558c <_printf_i+0x20c>
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	f021 0104 	bic.w	r1, r1, #4
 8005468:	6021      	str	r1, [r4, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d13d      	bne.n	80054ea <_printf_i+0x16a>
 800546e:	2d00      	cmp	r5, #0
 8005470:	f040 808e 	bne.w	8005590 <_printf_i+0x210>
 8005474:	4665      	mov	r5, ip
 8005476:	2a08      	cmp	r2, #8
 8005478:	d10b      	bne.n	8005492 <_printf_i+0x112>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	07db      	lsls	r3, r3, #31
 800547e:	d508      	bpl.n	8005492 <_printf_i+0x112>
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	bfde      	ittt	le
 8005488:	2330      	movle	r3, #48	; 0x30
 800548a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800548e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005492:	ebac 0305 	sub.w	r3, ip, r5
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	f8cd 8000 	str.w	r8, [sp]
 800549c:	463b      	mov	r3, r7
 800549e:	aa03      	add	r2, sp, #12
 80054a0:	4621      	mov	r1, r4
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7ff fef6 	bl	8005294 <_printf_common>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d14d      	bne.n	8005548 <_printf_i+0x1c8>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b0:	b005      	add	sp, #20
 80054b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054b6:	4839      	ldr	r0, [pc, #228]	; (800559c <_printf_i+0x21c>)
 80054b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054bc:	6813      	ldr	r3, [r2, #0]
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	1d1d      	adds	r5, r3, #4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6015      	str	r5, [r2, #0]
 80054c6:	060a      	lsls	r2, r1, #24
 80054c8:	d50b      	bpl.n	80054e2 <_printf_i+0x162>
 80054ca:	07ca      	lsls	r2, r1, #31
 80054cc:	bf44      	itt	mi
 80054ce:	f041 0120 	orrmi.w	r1, r1, #32
 80054d2:	6021      	strmi	r1, [r4, #0]
 80054d4:	b91b      	cbnz	r3, 80054de <_printf_i+0x15e>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	f022 0220 	bic.w	r2, r2, #32
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	2210      	movs	r2, #16
 80054e0:	e7b7      	b.n	8005452 <_printf_i+0xd2>
 80054e2:	064d      	lsls	r5, r1, #25
 80054e4:	bf48      	it	mi
 80054e6:	b29b      	uxthmi	r3, r3
 80054e8:	e7ef      	b.n	80054ca <_printf_i+0x14a>
 80054ea:	4665      	mov	r5, ip
 80054ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80054f0:	fb02 3311 	mls	r3, r2, r1, r3
 80054f4:	5cc3      	ldrb	r3, [r0, r3]
 80054f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054fa:	460b      	mov	r3, r1
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d1f5      	bne.n	80054ec <_printf_i+0x16c>
 8005500:	e7b9      	b.n	8005476 <_printf_i+0xf6>
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	6961      	ldr	r1, [r4, #20]
 8005508:	1d18      	adds	r0, r3, #4
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	0628      	lsls	r0, r5, #24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	d501      	bpl.n	8005516 <_printf_i+0x196>
 8005512:	6019      	str	r1, [r3, #0]
 8005514:	e002      	b.n	800551c <_printf_i+0x19c>
 8005516:	066a      	lsls	r2, r5, #25
 8005518:	d5fb      	bpl.n	8005512 <_printf_i+0x192>
 800551a:	8019      	strh	r1, [r3, #0]
 800551c:	2300      	movs	r3, #0
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	4665      	mov	r5, ip
 8005522:	e7b9      	b.n	8005498 <_printf_i+0x118>
 8005524:	6813      	ldr	r3, [r2, #0]
 8005526:	1d19      	adds	r1, r3, #4
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	681d      	ldr	r5, [r3, #0]
 800552c:	6862      	ldr	r2, [r4, #4]
 800552e:	2100      	movs	r1, #0
 8005530:	4628      	mov	r0, r5
 8005532:	f7fa fe6d 	bl	8000210 <memchr>
 8005536:	b108      	cbz	r0, 800553c <_printf_i+0x1bc>
 8005538:	1b40      	subs	r0, r0, r5
 800553a:	6060      	str	r0, [r4, #4]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	2300      	movs	r3, #0
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005546:	e7a7      	b.n	8005498 <_printf_i+0x118>
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	462a      	mov	r2, r5
 800554c:	4639      	mov	r1, r7
 800554e:	4630      	mov	r0, r6
 8005550:	47c0      	blx	r8
 8005552:	3001      	adds	r0, #1
 8005554:	d0aa      	beq.n	80054ac <_printf_i+0x12c>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	079b      	lsls	r3, r3, #30
 800555a:	d413      	bmi.n	8005584 <_printf_i+0x204>
 800555c:	68e0      	ldr	r0, [r4, #12]
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	4298      	cmp	r0, r3
 8005562:	bfb8      	it	lt
 8005564:	4618      	movlt	r0, r3
 8005566:	e7a3      	b.n	80054b0 <_printf_i+0x130>
 8005568:	2301      	movs	r3, #1
 800556a:	464a      	mov	r2, r9
 800556c:	4639      	mov	r1, r7
 800556e:	4630      	mov	r0, r6
 8005570:	47c0      	blx	r8
 8005572:	3001      	adds	r0, #1
 8005574:	d09a      	beq.n	80054ac <_printf_i+0x12c>
 8005576:	3501      	adds	r5, #1
 8005578:	68e3      	ldr	r3, [r4, #12]
 800557a:	9a03      	ldr	r2, [sp, #12]
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	42ab      	cmp	r3, r5
 8005580:	dcf2      	bgt.n	8005568 <_printf_i+0x1e8>
 8005582:	e7eb      	b.n	800555c <_printf_i+0x1dc>
 8005584:	2500      	movs	r5, #0
 8005586:	f104 0919 	add.w	r9, r4, #25
 800558a:	e7f5      	b.n	8005578 <_printf_i+0x1f8>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ac      	bne.n	80054ea <_printf_i+0x16a>
 8005590:	7803      	ldrb	r3, [r0, #0]
 8005592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005596:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800559a:	e76c      	b.n	8005476 <_printf_i+0xf6>
 800559c:	08005e51 	.word	0x08005e51
 80055a0:	08005e62 	.word	0x08005e62

080055a4 <_putc_r>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	460d      	mov	r5, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	4606      	mov	r6, r0
 80055ac:	b118      	cbz	r0, 80055b6 <_putc_r+0x12>
 80055ae:	6983      	ldr	r3, [r0, #24]
 80055b0:	b90b      	cbnz	r3, 80055b6 <_putc_r+0x12>
 80055b2:	f7ff fa47 	bl	8004a44 <__sinit>
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <_putc_r+0x60>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d112      	bne.n	80055e2 <_putc_r+0x3e>
 80055bc:	6874      	ldr	r4, [r6, #4]
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	da16      	bge.n	80055f6 <_putc_r+0x52>
 80055c8:	69a2      	ldr	r2, [r4, #24]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	db02      	blt.n	80055d4 <_putc_r+0x30>
 80055ce:	b2eb      	uxtb	r3, r5
 80055d0:	2b0a      	cmp	r3, #10
 80055d2:	d110      	bne.n	80055f6 <_putc_r+0x52>
 80055d4:	4622      	mov	r2, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	4630      	mov	r0, r6
 80055da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055de:	f7ff b881 	b.w	80046e4 <__swbuf_r>
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <_putc_r+0x64>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d101      	bne.n	80055ec <_putc_r+0x48>
 80055e8:	68b4      	ldr	r4, [r6, #8]
 80055ea:	e7e8      	b.n	80055be <_putc_r+0x1a>
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <_putc_r+0x68>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	bf08      	it	eq
 80055f2:	68f4      	ldreq	r4, [r6, #12]
 80055f4:	e7e3      	b.n	80055be <_putc_r+0x1a>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	701d      	strb	r5, [r3, #0]
 80055fe:	b2e8      	uxtb	r0, r5
 8005600:	bd70      	pop	{r4, r5, r6, pc}
 8005602:	bf00      	nop
 8005604:	08005e00 	.word	0x08005e00
 8005608:	08005e20 	.word	0x08005e20
 800560c:	08005de0 	.word	0x08005de0

08005610 <_sbrk_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4c06      	ldr	r4, [pc, #24]	; (800562c <_sbrk_r+0x1c>)
 8005614:	2300      	movs	r3, #0
 8005616:	4605      	mov	r5, r0
 8005618:	4608      	mov	r0, r1
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	f7fe fd7e 	bl	800411c <_sbrk>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_sbrk_r+0x1a>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	b103      	cbz	r3, 800562a <_sbrk_r+0x1a>
 8005628:	602b      	str	r3, [r5, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	20000244 	.word	0x20000244

08005630 <__sread>:
 8005630:	b510      	push	{r4, lr}
 8005632:	460c      	mov	r4, r1
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	f000 f8d6 	bl	80057e8 <_read_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	bfab      	itete	ge
 8005640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005642:	89a3      	ldrhlt	r3, [r4, #12]
 8005644:	181b      	addge	r3, r3, r0
 8005646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800564a:	bfac      	ite	ge
 800564c:	6563      	strge	r3, [r4, #84]	; 0x54
 800564e:	81a3      	strhlt	r3, [r4, #12]
 8005650:	bd10      	pop	{r4, pc}

08005652 <__swrite>:
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	461f      	mov	r7, r3
 8005658:	898b      	ldrh	r3, [r1, #12]
 800565a:	05db      	lsls	r3, r3, #23
 800565c:	4605      	mov	r5, r0
 800565e:	460c      	mov	r4, r1
 8005660:	4616      	mov	r6, r2
 8005662:	d505      	bpl.n	8005670 <__swrite+0x1e>
 8005664:	2302      	movs	r3, #2
 8005666:	2200      	movs	r2, #0
 8005668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566c:	f000 f868 	bl	8005740 <_lseek_r>
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567a:	81a3      	strh	r3, [r4, #12]
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	4628      	mov	r0, r5
 8005682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	f000 b817 	b.w	80056b8 <_write_r>

0800568a <__sseek>:
 800568a:	b510      	push	{r4, lr}
 800568c:	460c      	mov	r4, r1
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	f000 f855 	bl	8005740 <_lseek_r>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	bf15      	itete	ne
 800569c:	6560      	strne	r0, [r4, #84]	; 0x54
 800569e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056a6:	81a3      	strheq	r3, [r4, #12]
 80056a8:	bf18      	it	ne
 80056aa:	81a3      	strhne	r3, [r4, #12]
 80056ac:	bd10      	pop	{r4, pc}

080056ae <__sclose>:
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 b813 	b.w	80056dc <_close_r>
	...

080056b8 <_write_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4c07      	ldr	r4, [pc, #28]	; (80056d8 <_write_r+0x20>)
 80056bc:	4605      	mov	r5, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fe fcd7 	bl	800407a <_write>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_write_r+0x1e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_write_r+0x1e>
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000244 	.word	0x20000244

080056dc <_close_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4c06      	ldr	r4, [pc, #24]	; (80056f8 <_close_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4605      	mov	r5, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	f7fe fce3 	bl	80040b2 <_close>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_close_r+0x1a>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_close_r+0x1a>
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000244 	.word	0x20000244

080056fc <_fstat_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4c07      	ldr	r4, [pc, #28]	; (800571c <_fstat_r+0x20>)
 8005700:	2300      	movs	r3, #0
 8005702:	4605      	mov	r5, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	f7fe fcde 	bl	80040ca <_fstat>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	d102      	bne.n	8005718 <_fstat_r+0x1c>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	b103      	cbz	r3, 8005718 <_fstat_r+0x1c>
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	bf00      	nop
 800571c:	20000244 	.word	0x20000244

08005720 <_isatty_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4c06      	ldr	r4, [pc, #24]	; (800573c <_isatty_r+0x1c>)
 8005724:	2300      	movs	r3, #0
 8005726:	4605      	mov	r5, r0
 8005728:	4608      	mov	r0, r1
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	f7fe fcdd 	bl	80040ea <_isatty>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_isatty_r+0x1a>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	b103      	cbz	r3, 800573a <_isatty_r+0x1a>
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20000244 	.word	0x20000244

08005740 <_lseek_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4c07      	ldr	r4, [pc, #28]	; (8005760 <_lseek_r+0x20>)
 8005744:	4605      	mov	r5, r0
 8005746:	4608      	mov	r0, r1
 8005748:	4611      	mov	r1, r2
 800574a:	2200      	movs	r2, #0
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	f7fe fcd6 	bl	8004100 <_lseek>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d102      	bne.n	800575e <_lseek_r+0x1e>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	b103      	cbz	r3, 800575e <_lseek_r+0x1e>
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	20000244 	.word	0x20000244

08005764 <memmove>:
 8005764:	4288      	cmp	r0, r1
 8005766:	b510      	push	{r4, lr}
 8005768:	eb01 0302 	add.w	r3, r1, r2
 800576c:	d807      	bhi.n	800577e <memmove+0x1a>
 800576e:	1e42      	subs	r2, r0, #1
 8005770:	4299      	cmp	r1, r3
 8005772:	d00a      	beq.n	800578a <memmove+0x26>
 8005774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005778:	f802 4f01 	strb.w	r4, [r2, #1]!
 800577c:	e7f8      	b.n	8005770 <memmove+0xc>
 800577e:	4283      	cmp	r3, r0
 8005780:	d9f5      	bls.n	800576e <memmove+0xa>
 8005782:	1881      	adds	r1, r0, r2
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	42d3      	cmn	r3, r2
 8005788:	d100      	bne.n	800578c <memmove+0x28>
 800578a:	bd10      	pop	{r4, pc}
 800578c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005790:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005794:	e7f7      	b.n	8005786 <memmove+0x22>

08005796 <__malloc_lock>:
 8005796:	4770      	bx	lr

08005798 <__malloc_unlock>:
 8005798:	4770      	bx	lr

0800579a <_realloc_r>:
 800579a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579c:	4607      	mov	r7, r0
 800579e:	4614      	mov	r4, r2
 80057a0:	460e      	mov	r6, r1
 80057a2:	b921      	cbnz	r1, 80057ae <_realloc_r+0x14>
 80057a4:	4611      	mov	r1, r2
 80057a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057aa:	f7ff ba87 	b.w	8004cbc <_malloc_r>
 80057ae:	b922      	cbnz	r2, 80057ba <_realloc_r+0x20>
 80057b0:	f7ff fa36 	bl	8004c20 <_free_r>
 80057b4:	4625      	mov	r5, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ba:	f000 f827 	bl	800580c <_malloc_usable_size_r>
 80057be:	42a0      	cmp	r0, r4
 80057c0:	d20f      	bcs.n	80057e2 <_realloc_r+0x48>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4638      	mov	r0, r7
 80057c6:	f7ff fa79 	bl	8004cbc <_malloc_r>
 80057ca:	4605      	mov	r5, r0
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d0f2      	beq.n	80057b6 <_realloc_r+0x1c>
 80057d0:	4631      	mov	r1, r6
 80057d2:	4622      	mov	r2, r4
 80057d4:	f7fe fe8c 	bl	80044f0 <memcpy>
 80057d8:	4631      	mov	r1, r6
 80057da:	4638      	mov	r0, r7
 80057dc:	f7ff fa20 	bl	8004c20 <_free_r>
 80057e0:	e7e9      	b.n	80057b6 <_realloc_r+0x1c>
 80057e2:	4635      	mov	r5, r6
 80057e4:	e7e7      	b.n	80057b6 <_realloc_r+0x1c>
	...

080057e8 <_read_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4c07      	ldr	r4, [pc, #28]	; (8005808 <_read_r+0x20>)
 80057ec:	4605      	mov	r5, r0
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	2200      	movs	r2, #0
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7fe fc22 	bl	8004040 <_read>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_read_r+0x1e>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	b103      	cbz	r3, 8005806 <_read_r+0x1e>
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	20000244 	.word	0x20000244

0800580c <_malloc_usable_size_r>:
 800580c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005810:	1f18      	subs	r0, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbc      	itt	lt
 8005816:	580b      	ldrlt	r3, [r1, r0]
 8005818:	18c0      	addlt	r0, r0, r3
 800581a:	4770      	bx	lr

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
